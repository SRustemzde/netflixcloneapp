--- START OF FILE netflix-clone/package.json ---
{
  "name": "netflix-clone",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^13.5.0",
    "bcryptjs": "^3.0.2",
    "cloudinary": "^2.6.1",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "dotenv": "^16.5.0",
    "express": "^5.1.0",
    "express-rate-limit": "^7.5.0",
    "express-validator": "^7.2.1",
    "helmet": "^8.1.0",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.487.0",
    "mongoose": "^8.14.2",
    "multer": "^1.4.5-lts.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.3.0",
    "react-scripts": "5.0.1",
    "react-slick": "^0.30.3",
    "slick-carousel": "^1.8.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "CI=false react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "concurrently": "^9.1.2",
    "css-loader": "^7.1.2",
    "nodemon": "^3.1.10",
    "postcss-loader": "^8.1.1",
    "style-loader": "^4.0.0",
    "webpack": "^5.98.0",
    "webpack-cli": "^6.0.1"
  }
}

--- END OF FILE netflix-clone/package.json ---

--- START OF FILE netflix-clone/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

--- END OF FILE netflix-clone/public/index.html ---

--- START OF FILE netflix-clone/public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

--- END OF FILE netflix-clone/public/manifest.json ---

--- START OF FILE netflix-clone/src/App.css ---
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700;800;900&display=swap");

:root {
  --purple-dark: #4a148c;
  --purple-main: #7b1fa2;
  --purple-light: #9c27b0;
  --purple-lightest: #e1bee7;
  --white: #ffffff;
  --off-white: #f5f5f5;
  --text-dark: #212121;
  --text-medium: #424242;
  --text-light: #757575;
  --shadow-light: rgba(156, 39, 176, 0.1);
  --shadow-medium: rgba(156, 39, 176, 0.3);
  --shadow-dark: rgba(156, 39, 176, 0.5);
  --gradient-main: linear-gradient(to right, #7b1fa2, #9c27b0);
  --gradient-hover: linear-gradient(to right, #4a148c, #7b1fa2);
  --transition-fast: all 0.3s ease;
  --transition-medium: all 0.4s ease;
  --transition-slow: all 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  --radius-small: 8px;
  --radius-medium: 15px;
  --radius-large: 30px;
  --radius-round: 50%;
}

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

body {
  font-family: "Poppins", sans-serif;
  background-color: var(--off-white);
  color: var(--text-medium);
  line-height: 1.6;
}

a {
  text-decoration: none;
  color: var(--purple-main);
  transition: var(--transition-fast);
}

a:hover {
  color: var(--purple-dark);
}

ul {
  list-style-type: none;
}

.flexSB {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.flex {
  display: flex;
}

.container {
  max-width: 90%;
  margin: auto;
  padding: 0 15px;
}

button {
  background: var(--gradient-main);
  outline: none;
  border: none;
  color: var(--white);
  padding: 12px 30px;
  font-weight: 500;
  font-size: 16px;
  border-radius: var(--radius-large);
  cursor: pointer;
  transition: var(--transition-fast);
  box-shadow: 0 4px 10px var(--shadow-light);
}

button:hover {
  background: var(--gradient-hover);
  transform: translateY(-3px);
  box-shadow: 0 7px 15px var(--shadow-medium);
}

.row {
  width: 50%;
}

p {
  line-height: 1.8;
  color: var(--text-medium);
  font-size: 16px;
}

/* MovieBox Updated Styling */
.MovieBox {
  width: 100%;
  height: 300px;
  position: relative;
  transition: var(--transition-medium);
  border-radius: var(--radius-medium);
  overflow: hidden;
  box-shadow: 0 10px 20px var(--shadow-light);
  margin: 15px 0;
  background-color: var(--white);
}

.MovieBox:hover {
  cursor: pointer;
  transform: translateY(-10px);
  box-shadow: 0 20px 30px var(--shadow-medium);
}

.MovieBox .img {
  position: relative;
  height: 60%;
  overflow: hidden;
}

.MovieBox img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.5s ease;
}

.MovieBox:hover img {
  transform: scale(1.08);
}

.MovieBox .text {
  padding: 20px;
  color: var(--text-dark);
  background-color: var(--white);
  height: 40%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.MovieBox h3 {
  font-weight: 600;
  margin-bottom: 10px;
  color: var(--purple-dark);
  font-size: 18px;
  transition: var(--transition-fast);
}

.MovieBox:hover h3 {
  color: var(--purple-light);
}

.MovieBox .movie-info {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 15px;
  font-size: 14px;
  color: var(--text-light);
}

.MovieBox .movie-time {
  display: flex;
  align-items: center;
}

.MovieBox .movie-time i {
  margin-right: 5px;
  color: var(--purple-light);
}

.MovieBox .genre-tags {
  display: flex;
  gap: 8px;
}

.MovieBox .genre-tag {
  padding: 3px 10px;
  background-color: rgba(156, 39, 176, 0.1);
  color: var(--purple-main);
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
  transition: var(--transition-fast);
}

.MovieBox .genre-tag:hover {
  background-color: var(--purple-light);
  color: var(--white);
}

.MovieBox .primary-btn {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 10px;
  background: var(--gradient-main);
  color: var(--white);
  border-radius: var(--radius-medium);
  font-weight: 600;
  font-size: 14px;
  transition: var(--transition-fast);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.MovieBox .primary-btn:hover {
  background: var(--gradient-hover);
  transform: translateY(-3px);
  box-shadow: 0 6px 15px var(--shadow-medium);
}

.MovieBox .primary-btn i {
  margin-right: 8px;
}

.MovieBox .hover-buttons {
  position: absolute;
  bottom: 15px;
  right: 15px;
  display: flex;
  gap: 10px;
  opacity: 0;
  transform: translateY(20px);
  transition: var(--transition-medium);
}

.MovieBox:hover .hover-buttons {
  opacity: 1;
  transform: translateY(0);
}

.MovieBox .circle-btn {
  width: 35px;
  height: 35px;
  border-radius: var(--radius-round);
  background-color: rgba(255, 255, 255, 0.9);
  color: var(--purple-light);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0;
  transition: var(--transition-fast);
}

.MovieBox .circle-btn:hover {
  background-color: var(--purple-light);
  color: var(--white);
}

.MovieBox .movie-rating {
  position: absolute;
  top: 15px;
  right: 15px;
  background-color: rgba(156, 39, 176, 0.9);
  color: var(--white);
  padding: 5px 10px;
  border-radius: 20px;
  font-size: 13px;
  font-weight: 600;
  display: flex;
  align-items: center;
  z-index: 2;
}

.MovieBox .movie-rating i {
  color: #ffeb3b;
  margin-right: 5px;
}

/* Animation for page transitions */
.animate-on-scroll {
  opacity: 0;
  transform: translateY(30px);
  transition: var(--transition-slow);
}

.animate-on-scroll.is-visible {
  opacity: 1;
  transform: translateY(0);
}

.section-animated {
  opacity: 0;
  transform: translateY(30px);
  transition: var(--transition-slow);
}

.section-visible {
  opacity: 1;
  transform: translateY(0);
}

/* Control buttons for sliders */
.control-btn button {
  background: rgba(255, 255, 255, 0.9);
  border: 2px solid var(--purple-lightest);
  width: 50px;
  height: 50px;
  border-radius: var(--radius-round);
  cursor: pointer;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  transition: var(--transition-fast);
  display: flex;
  align-items: center;
  justify-content: center;
}

.control-btn button:hover {
  background: var(--purple-light);
  border-color: var(--white);
}

.control-btn .next {
  position: absolute;
  top: 50%;
  right: 2%;
  transform: translateY(-50%);
  z-index: 10;
}

.control-btn .prev {
  position: absolute;
  top: 50%;
  left: 2%;
  z-index: 10;
  transform: translateY(-50%);
}

.control-btn i {
  color: var(--purple-main);
  font-size: 18px;
  transition: var(--transition-fast);
}

.control-btn button:hover i {
  color: var(--white);
}

/* Heading styles */
.heading h1 {
  font-weight: 700;
  margin: 30px 0;
  color: var(--purple-dark);
  position: relative;
  display: inline-block;
  padding-bottom: 15px;
  font-size: 36px;
}

.heading h1::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 80px;
  height: 4px;
  background: linear-gradient(to right, var(--purple-main), var(--purple-lightest));
  border-radius: 2px;
}

.heading a {
  color: var(--purple-light);
  font-weight: 500;
  transition: var(--transition-fast);
  display: flex;
  align-items: center;
}

.heading a:hover {
  color: var(--purple-dark);
}

.heading a i {
  margin-left: 5px;
  transition: transform 0.3s ease;
}

.heading a:hover i {
  transform: translateX(5px);
}

/* Loading animations */
.page-loader {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--white);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.spinner {
  width: 70px;
  height: 70px;
  border: 6px solid rgba(156, 39, 176, 0.3);
  border-radius: 50%;
  border-top-color: var(--purple-light);
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.page-loader h2 {
  margin-top: 20px;
  color: var(--purple-dark);
  font-size: 32px;
  font-weight: 700;
  letter-spacing: 2px;
}

.page-loader p {
  color: var(--purple-light);
  margin-top: 10px;
}

/* Pulse animation for trending items */
@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 var(--shadow-medium);
  }
  70% {
    box-shadow: 0 0 0 10px rgba(156, 39, 176, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(156, 39, 176, 0);
  }
}

.trending-badge {
  animation: pulse 2s infinite;
  background: var(--gradient-main);
  color: var(--white);
  padding: 8px 15px;
  border-radius: 20px;
  font-size: 14px;
  font-weight: 600;
  display: inline-flex;
  align-items: center;
}

.trending-badge i {
  margin-right: 8px;
  color: #ffeb3b;
}

/* Custom dots for sliders */
.custom-dots {
  bottom: -30px;
}

.custom-dots li {
  margin: 0 5px;
}

.custom-dots li button {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background-color: rgba(156, 39, 176, 0.2);
  padding: 0;
  box-shadow: none;
}

.custom-dots li.slick-active button {
  background-color: var(--purple-light);
  transform: scale(1.2);
}

.custom-dots li button:before {
  display: none;
}

/* Footer styling */
.site-footer {
  background: linear-gradient(to right, var(--purple-dark), var(--purple-main));
  color: var(--white);
  padding: 60px 0 20px;
  margin-top: 60px;
}

.footer-content {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.footer-brand {
  flex: 0 0 25%;
  margin-bottom: 30px;
}

.footer-brand h3 {
  font-size: 28px;
  margin-bottom: 15px;
  font-weight: 700;
}

.footer-brand p {
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.6;
}

.footer-links {
  flex: 0 0 50%;
  display: flex;
  justify-content: space-between;
  margin-bottom: 30px;
}

.footer-links-column {
  flex: 0 0 30%;
}

.footer-links-column h4 {
  color: var(--white);
  font-size: 18px;
  margin-bottom: 20px;
  position: relative;
  padding-bottom: 10px;
}

.footer-links-column h4::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 40px;
  height: 3px;
  background-color: var(--purple-lightest);
}

.footer-links-column ul li {
  margin-bottom: 10px;
}

.footer-links-column ul li a {
  color: rgba(255, 255, 255, 0.8);
  transition: var(--transition-fast);
}

.footer-links-column ul li a:hover {
  color: var(--white);
  padding-left: 5px;
}

.social-links {
  flex: 0 0 25%;
  display: flex;
  justify-content: flex-end;
  gap: 15px;
}

.social-links a {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.1);
  color: var(--white);
  font-size: 18px;
  transition: var(--transition-fast);
}

.social-links a:hover {
  background-color: var(--white);
  color: var(--purple-main);
  transform: translateY(-5px);
}

.copyright {
  text-align: center;
  margin-top: 40px;
  padding-top: 20px;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  color: rgba(255, 255, 255, 0.7);
  font-size: 14px;
}

/* Navbar/Header Styling */
.header {
  background-color: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  padding: 15px 0;
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
}

.logo {
  display: flex;
  align-items: center;
}

.logo h2 {
  color: var(--purple-dark);
  font-weight: 700;
  font-size: 24px;
  margin-left: 10px;
}

.logo span {
  color: var(--purple-light);
}

/* Mobile Responsive */
@media only screen and (max-width: 1024px) {
  .container {
    max-width: 95%;
  }
  
  .footer-content {
    padding: 0 30px;
  }
}

@media only screen and (max-width: 768px) {
  .heading h1 {
    font-size: 28px;
  }
  
  .row {
    width: 100%;
  }
  
  .MovieBox {
    height: 280px;
  }
  
  .footer-brand, .footer-links, .social-links {
    flex: 0 0 100%;
  }
  
  .footer-links {
    margin: 20px 0;
  }
  
  .social-links {
    justify-content: center;
  }
  
  .footer-content {
    flex-direction: column;
  }
}

@media only screen and (max-width: 576px) {
  .container {
    padding: 0 10px;
  }
  
  .heading h1 {
    font-size: 24px;
  }
  
  .heading h1::after {
    width: 60px;
  }
  
  .MovieBox {
    height: 250px;
    margin: 10px 0;
  }
  
  .MovieBox .text {
    padding: 15px;
  }
  
  .MovieBox h3 {
    font-size: 16px;
  }
  
  .MovieBox .movie-info {
    flex-direction: column;
    align-items: flex-start;
    gap: 5px;
  }
  
  .control-btn button {
    width: 40px;
    height: 40px;
  }
  
  .footer-links {
    flex-direction: column;
    gap: 30px;
  }
}

/* Sayfa arka planını tamamen mor yapmak için, header hariç */
html, body {
  background-color: #1a0733 !important; /* Koyu mor arkaplan - !important ile zorla uygula */
  color: #fff;
  min-height: 100vh;
}

/* HTML ve body'nin tüm yüksekliği doldurmasını sağla */
html {
  height: 100%;
}

/* Ana içerik alanı arka planı */
.main-content, 
.main-wrapper,
.app-container,
#root {
  background-color: #1a0733 !important;
  min-height: 100vh;
}

/* Tüm bölümlerin arka planı */
.content-section, 
.animate-on-scroll,
.upcomr,
.trending,
.section-animated {
  background: linear-gradient(135deg, #2d0854 0%, #4a148c 100%) !important;
}

/* Slider dot'ları için container */
.slick-dots {
  background: transparent !important;
}

/* Footer */
.site-footer, 
.footer-content {
  background: linear-gradient(to right, #2d0854, #4a148c) !important;
}

/* Header için stil yok - kendi stilinde kalacak */

/* MovieBox kartları */
.MovieBox {
  background-color: #2d0854 !important;
}

.MovieBox .text {
  background-color: #2d0854 !important;
  color: white !important;
}

/* Kaybolmuş olabilecek diğer elementler */
.margin, 
.footer {
  background-color: #1a0733 !important;
}

/* Tüm siyah arka planlı elementleri kontrol et (header hariç) */
body > *:not(.header) [style*="background-color: black"],
body > *:not(.header) [style*="background-color: #000"],
body > *:not(.header) [style*="background: black"],
body > *:not(.header) [style*="background: #000"] {
  background-color: #1a0733 !important;
  background: #1a0733 !important;
}

/* Sayfa dip kısmı */
html::after {
  content: "";
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 100vh;
  background-color: #1a0733;
  z-index: -9999;
}

/* Add these styles to your App.css to ensure proper theming */

/* Global background color enforcement */
body, #root, .App {
  background-color: #1a0733 !important;
  color: #fff !important;
}

/* Ensure privacy and FAQ pages maintain correct styling */
.faq-content, 
.privacy-content,
.privacy-hero,
.faq-hero {
  background-color: #1a0733 !important;
  color: #fff !important;
}

/* Ensure all text in these sections is visible */
.privacy-section p,
.privacy-section li,
.privacy-section h2,
.privacy-section h3,
.faq-category h2,
.accordion-header h3,
.accordion-content p,
.contact-support h2,
.contact-support p {
  color: var(--white) !important;
}

/* Fix accordion animation */
.accordion-item.active .accordion-content {
  display: block !important;
}

/* Fix support options in FAQ */
.support-option {
  color: var(--white) !important;
}

.support-option p {
  color: rgba(255, 255, 255, 0.7) !important;
}

/* Fix mobile styling */
@media only screen and (max-width: 768px) {
  .privacy-wrapper,
  .faq-wrapper,
  .contact-support {
    width: 90% !important;
    padding: 20px !important;
  }
  
  .accordion-header {
    padding: 15px !important;
  }
  
  .accordion-content.show {
    padding-bottom: 15px !important;
  }
}

/* Fix font awesome icons if needed */
.fas {
  font-family: "Font Awesome 5 Free" !important;
  font-weight: 900;
}
--- END OF FILE netflix-clone/src/App.css ---

--- START OF FILE netflix-clone/src/App.js ---
import "./App.css";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { Header } from "./components/header/Header";
import { HomePages } from "./home/HomePages";
import { Footer } from "./components/footer/Footer";
import { SinglePage } from "./components/watch/SinglePage";
import Movies from "./components/movies/Movies";
import Series from "./components/series/Series";
import MyList from "./components/mylist/MyList";
import Pricing from "./components/pricing/Pricing";
import Profile from "./components/profile/Profile";
import Account from "./components/account/Account";
import Contact from "./components/contact/Contact";
import Notifications from "./components/notifications/Notifications";
import Privacy from "./components/privacy/Privacy";
import FAQ from "./components/faq/FAQ";
import Categories from "./components/categories/Categories";
import CategoryList from "./components/categories/CategoryList";
import Login from "./components/login/Login";

// Layout bileşeni - header ve footer içeren normal layout
const MainLayout = ({ children }) => {
  return (
    <>
      <Header />
      {children}
      <Footer />
    </>
  );
};

function App() {
  return (
    <Router>
      <Routes>
        {/* Login sayfası için özel route - header ve footer olmadan */}
        <Route path="/login" element={<Login />} />

        {/* Header ve Footer içeren diğer tüm sayfalar */}
        <Route
          path="/"
          element={
            <MainLayout>
              <HomePages />
            </MainLayout>
          }
        />
        <Route
          path="/singlePage/:source/:id"
          element={
            <MainLayout>
              <SinglePage />
            </MainLayout>
          }
        />
        <Route
          path="/movies"
          element={
            <MainLayout>
              <Movies />
            </MainLayout>
          }
        />
        <Route
          path="/series"
          element={
            <MainLayout>
              <Series />
            </MainLayout>
          }
        />
        <Route
          path="/mylist"
          element={
            <MainLayout>
              <MyList />
            </MainLayout>
          }
        />
        <Route
          path="/pricing"
          element={
            <MainLayout>
              <Pricing />
            </MainLayout>
          }
        />
        <Route
          path="/profile"
          element={
            <MainLayout>
              <Profile />
            </MainLayout>
          }
        />
        <Route
          path="/account"
          element={
            <MainLayout>
              <Account />
            </MainLayout>
          }
        />
        <Route
          path="/contact"
          element={
            <MainLayout>
              <Contact />
            </MainLayout>
          }
        />
        <Route
          path="/notifications"
          element={
            <MainLayout>
              <Notifications />
            </MainLayout>
          }
        />
        <Route
          path="/privacy"
          element={
            <MainLayout>
              <Privacy />
            </MainLayout>
          }
        />
        <Route
          path="/faq"
          element={
            <MainLayout>
              <FAQ />
            </MainLayout>
          }
        />
        <Route
          path="/category"
          element={
            <MainLayout>
              <CategoryList />
            </MainLayout>
          }
        />
        <Route
          path="/category/:categoryName"
          element={
            <MainLayout>
              <Categories />
            </MainLayout>
          }
        />
      </Routes>
    </Router>
  );
}

export default App;

--- END OF FILE netflix-clone/src/App.js ---

--- START OF FILE netflix-clone/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--- END OF FILE netflix-clone/src/App.test.js ---

--- START OF FILE netflix-clone/src/components/Upcomming/Ucard.css ---
.movie-card {
  width: 100%;
  height: 380px;
  position: relative;
  border-radius: 15px;
  overflow: hidden;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  margin: 15px 0;
  background-color: #1a0733;
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.movie-card:hover {
  transform: translateY(-10px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
}

.movie-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.movie-card img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.6s ease;
}

.movie-card:hover img {
  transform: scale(1.08);
}

/* Overlay with gradient */
.movie-card-inner::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    to top,
    rgba(26, 7, 51, 1) 0%,
    rgba(26, 7, 51, 0.8) 30%,
    rgba(26, 7, 51, 0.4) 60%,
    rgba(26, 7, 51, 0.1) 80%,
    rgba(26, 7, 51, 0) 100%
  );
  opacity: 0.8;
  transition: opacity 0.3s ease;
}

.movie-card:hover .movie-card-inner::after {
  opacity: 0.9;
}

/* Movie info container */
.movie-info {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 25px;
  color: #fff;
  z-index: 2;
  transform: translateY(0);
  transition: transform 0.4s ease;
}

.movie-card:hover .movie-info {
  transform: translateY(-5px);
}

.movie-title {
  font-weight: 600;
  margin-bottom: 12px;
  color: #fff;
  font-size: 20px;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  transition: color 0.3s ease;
}

.movie-card:hover .movie-title {
  color: var(--purple-lightest);
}

.movie-meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 18px;
  font-size: 14px;
  color: rgba(255, 255, 255, 0.7);
}

.movie-time {
  display: flex;
  align-items: center;
}

.movie-time i {
  margin-right: 6px;
  color: var(--purple-light);
}

.genre-tags {
  display: flex;
  gap: 8px;
}

.genre-tag {
  padding: 4px 12px;
  background-color: rgba(156, 39, 176, 0.3);
  color: #fff;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
  transition: all 0.3s ease;
}

.movie-card:hover .genre-tag {
  background-color: rgba(156, 39, 176, 0.5);
}

/* Watch button */
.watch-btn {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 12px 15px;
  background: linear-gradient(to right, var(--purple-light), var(--purple-dark));
  color: #fff;
  border-radius: 30px;
  font-weight: 600;
  font-size: 15px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 5px 15px rgba(156, 39, 176, 0.3);
  position: relative;
  overflow: hidden;
}

.watch-btn::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.2) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transition: all 0.6s ease;
}

.movie-card:hover .watch-btn::before {
  left: 100%;
}

.watch-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 20px rgba(156, 39, 176, 0.5);
}

.watch-btn i {
  margin-right: 8px;
  font-size: 14px;
}

/* Rating badge */
.rating-badge {
  position: absolute;
  top: 15px;
  right: 15px;
  background: linear-gradient(to right, var(--purple-main), var(--purple-dark));
  color: #fff;
  padding: 5px 12px;
  border-radius: 20px;
  font-size: 13px;
  font-weight: 600;
  display: flex;
  align-items: center;
  z-index: 3;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
  transform: translateY(0);
  transition: all 0.3s ease;
}

.movie-card:hover .rating-badge {
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.rating-badge i {
  color: #ffeb3b;
  margin-right: 5px;
  font-size: 12px;
}

/* Action buttons */
.action-buttons {
  position: absolute;
  top: 15px;
  left: 15px;
  display: flex;
  gap: 10px;
  z-index: 3;
  opacity: 0;
  transform: translateY(10px);
  transition: all 0.3s ease 0.1s;
}

.movie-card:hover .action-buttons {
  opacity: 1;
  transform: translateY(0);
}

.action-btn {
  width: 38px;
  height: 38px;
  border-radius: 50%;
  background-color: rgba(156, 39, 176, 0.2);
  backdrop-filter: blur(5px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: #fff;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
}

.action-btn:hover {
  background-color: var(--purple-main);
  transform: scale(1.1);
}

.action-btn i {
  font-size: 15px;
}

/* Quality badge */
.quality-badge {
  position: absolute;
  top: 15px;
  left: 50%;
  transform: translateX(-50%) translateY(-40px);
  background-color: rgba(0, 0, 0, 0.6);
  color: #fff;
  padding: 4px 12px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
  z-index: 3;
  transition: all 0.3s ease;
  opacity: 0;
}

.movie-card:hover .quality-badge {
  transform: translateX(-50%) translateY(0);
  opacity: 1;
}

/* Play icon overlay */
.play-icon-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0.8);
  width: 60px;
  height: 60px;
  background: rgba(156, 39, 176, 0.2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 3;
  opacity: 0;
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.play-icon-overlay i {
  color: #fff;
  font-size: 24px;
  margin-left: 5px; /* Offset for the play icon */
}

.movie-card:hover .play-icon-overlay {
  transform: translate(-50%, -50%) scale(1);
  opacity: 1;
  background: linear-gradient(to right, var(--purple-main), var(--purple-dark));
  box-shadow: 0 0 30px rgba(156, 39, 176, 0.5);
}

/* Responsive styles */
@media only screen and (max-width: 768px) {
  .movie-card {
    height: 350px;
  }
  
  .movie-title {
    font-size: 18px;
  }
  
  .movie-meta {
    flex-direction: column;
    align-items: flex-start;
    gap: 5px;
  }
}

@media only screen and (max-width: 576px) {
  .movie-card {
    height: 320px;
  }
  
  .movie-info {
    padding: 15px;
  }
  
  .movie-title {
    font-size: 16px;
    margin-bottom: 8px;
  }
  
  .watch-btn {
    padding: 10px;
  }
}
--- END OF FILE netflix-clone/src/components/Upcomming/Ucard.css ---

--- START OF FILE netflix-clone/src/components/Upcomming/Ucard.jsx ---
import React from "react";
import { Link } from "react-router-dom";
import "./Ucard.css";

export const Ucard = ({ item,  isHovered }) => {
  // Destructure item props with default values to prevent errors
  const { id, cover, name, time, rating, genres, quality = "HD", source } = item || {};

  // Parse genres, handle missing or empty genre data
  const genresList = genres ? genres.split(", ") : [];

  return (
    <div className={`movie-card ${isHovered ? "hovered" : ""}`}>
      <div className="movie-card-inner">
        {/* Movie poster image */}
        <img src={cover} alt={name} />

        {/* Movie info container */}
        <div className="movie-info">
          <h3 className="movie-title">{name}</h3>

          <div className="movie-meta">
            {time && (
              <div className="movie-time">
                <i className="fa fa-clock-o"></i>
                <span>{time}</span>
              </div>
            )}

            {genresList.length > 0 && (
              <div className="genre-tags">
                {genresList.slice(0, 2).map((genre, i) => (
                  <span key={i} className="genre-tag">
                    {genre}
                  </span>
                ))}
              </div>
            )}
          </div>

          {/* Use source/id format for link */}
          <Link to={`/singlePage/${source}/${id}`}>
            <button className="watch-btn">
              <i className="fa fa-play"></i>
              WATCH NOW
            </button>
          </Link>
        </div>

        {/* Rating badge */}
        {rating && (
          <div className="rating-badge">
            <i className="fa fa-star"></i>
            <span>{rating}</span>
          </div>
        )}

        {/* Action buttons */}
        <div className="action-buttons">
          <button className="action-btn" aria-label="Add to favorites">
            <i className="fa fa-heart"></i>
          </button>
          <button className="action-btn" aria-label="Add to watchlist">
            <i className="fa fa-plus"></i>
          </button>
          <button className="action-btn" aria-label="More information">
            <i className="fa fa-info"></i>
          </button>
        </div>

        {/* Quality badge */}
        <div className="quality-badge">{quality}</div>

        {/* Play button overlay */}
        <div className="play-icon-overlay">
          <i className="fa fa-play"></i>
        </div>
      </div>
    </div>
  );
};
--- END OF FILE netflix-clone/src/components/Upcomming/Ucard.jsx ---

--- START OF FILE netflix-clone/src/components/Upcomming/Upcomming.jsx ---
import React, { useState, useEffect } from "react";
import { Ucard } from "./Ucard";
import { Link } from "react-router-dom";
import Slider from "react-slick";
import "./upcomming.css";

const SampleNextArrow = (props) => {
  const { onClick } = props;
  return (
    <div className="next-arrow" onClick={onClick}>
      <button className="arrow-btn" aria-label="Next slide">
        <i className="fa fa-chevron-right"></i>
      </button>
    </div>
  );
};

const SamplePrevArrow = (props) => {
  const { onClick } = props;
  return (
    <div className="prev-arrow" onClick={onClick}>
      <button className="arrow-btn" aria-label="Previous slide">
        <i className="fa fa-chevron-left"></i>
      </button>
    </div>
  );
};

export const Upcomming = ({ items, title }) => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const sectionId = `section-${title.replace(/\s+/g, "-").toLowerCase()}`;
    const section = document.getElementById(sectionId);

    if (section) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              setIsVisible(true);
              section.classList.add("is-visible");
              observer.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.2 }
      );

      observer.observe(section);

      return () => {
        observer.unobserve(section);
      };
    }
  }, [title]);

  const settings = {
    dots: true,
    infinite: true,
    speed: 700,
    slidesToShow: 4,
    slidesToScroll: 1,
    nextArrow: <SampleNextArrow />,
    prevArrow: <SamplePrevArrow />,
    autoplay: true,
    autoplaySpeed: 5000,
    pauseOnHover: true,
    cssEase: "cubic-bezier(0.7, 0, 0.3, 1)",
    dotsClass: "slick-dots custom-dots",
    responsive: [
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 800,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 576,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
          arrows: false,
        },
      },
    ],
  };

  const sectionId = `section-${title.replace(/\s+/g, "-").toLowerCase()}`;

  return (
    <section
      id={sectionId}
      className={`upcomming-section ${isVisible ? "is-visible" : ""}`}
    >
      {/* Animated light effects */}
      <div className="light-effect"></div>
      <div className="light-effect"></div>
      <div className="light-effect"></div>

      <div className="upcomming-container">
        <div className="upcomming-header">
          <h1 className="upcomming-title">{title}</h1>
          <Link to="/" className="view-all-btn">
            View All <i className="fa fa-angle-right"></i>
          </Link>
        </div>

        <Slider {...settings}>
          {items.map((item) => (
            <div key={item.id}>
              <Ucard item={item} />
            </div>
          ))}
        </Slider>
      </div>
    </section>
  );
};

--- END OF FILE netflix-clone/src/components/Upcomming/Upcomming.jsx ---

--- START OF FILE netflix-clone/src/components/Upcomming/upcomming.css ---
.upcomming-section {
  padding: 70px 0;
  margin: 50px 0;
  position: relative;
  background: linear-gradient(135deg, #2d0854 0%, #4a148c 100%);
  border-radius: 20px;
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
  opacity: 0;
  transform: translateY(30px);
  transition: all 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  overflow: hidden;
}

.upcomming-section.is-visible {
  opacity: 1;
  transform: translateY(0);
}

.upcomming-section::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="0" y="0"></rect><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="50" y="50"></rect></svg>');
  background-size: 30px;
  opacity: 0.3;
}

.upcomming-container {
  max-width: 90%;
  margin: auto;
  padding: 0 15px;
  position: relative;
  z-index: 2;
}

.upcomming-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 50px;
  flex-wrap: wrap;
}

.upcomming-title {
  font-size: 38px;
  font-weight: 700;
  color: var(--white);
  position: relative;
  padding-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.upcomming-title::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 80px;
  height: 4px;
  background: linear-gradient(to right, var(--purple-lightest), var(--white));
  border-radius: 2px;
}

.view-all-btn {
  display: inline-flex;
  align-items: center;
  color: var(--white);
  font-weight: 600;
  padding: 12px 25px;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 30px;
  transition: all 0.3s ease;
  border: 1px solid rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(5px);
}

.view-all-btn:hover {
  background-color: rgba(255, 255, 255, 0.2);
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.view-all-btn i {
  margin-left: 8px;
  transition: transform 0.3s ease;
}

.view-all-btn:hover i {
  transform: translateX(5px);
}

/* Override slick styles */
.slick-track {
  display: flex !important;
  margin: 20px 0;
}

.slick-slide {
  height: inherit !important;
  padding: 0 10px;
}

.slick-slide > div {
  height: 100%;
}

.upcomming-section .slick-dots {
  bottom: -35px;
}

.upcomming-section .custom-dots li button {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.2);
}

.upcomming-section .custom-dots li.slick-active button {
  background-color: var(--white);
  transform: scale(1.2);
}

.upcomming-section .custom-dots li button:before {
  display: none;
}

/* Custom arrows */
.upcomming-section .arrow-btn {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(5px);
}

.upcomming-section .arrow-btn:hover {
  background-color: rgba(255, 255, 255, 0.2);
  transform: scale(1.1);
}

.upcomming-section .arrow-btn i {
  color: var(--white);
  font-size: 18px;
}

.upcomming-section .next-arrow {
  position: absolute;
  top: 50%;
  right: 2%;
  transform: translateY(-50%);
  z-index: 10;
}

.upcomming-section .prev-arrow {
  position: absolute;
  top: 50%;
  left: 2%;
  z-index: 10;
  transform: translateY(-50%);
}

/* Animated background light effect */
.upcomming-section .light-effect {
  position: absolute;
  width: 150px;
  height: 150px;
  border-radius: 50%;
  background: linear-gradient(to right, var(--purple-lightest), var(--purple-light));
  opacity: 0.1;
  filter: blur(60px);
  animation: float 8s ease-in-out infinite;
}

.upcomming-section .light-effect:nth-child(1) {
  top: -50px;
  left: 10%;
  animation-delay: 0s;
}

.upcomming-section .light-effect:nth-child(2) {
  bottom: 30px;
  right: 15%;
  width: 200px;
  height: 200px;
  animation-delay: 2s;
}

.upcomming-section .light-effect:nth-child(3) {
  bottom: -30px;
  left: 30%;
  width: 100px;
  height: 100px;
  animation-delay: 4s;
}

@keyframes float {
  0% {
    transform: translatey(0px);
  }
  50% {
    transform: translatey(-20px);
  }
  100% {
    transform: translatey(0px);
  }
}

/* Responsive styles */
@media only screen and (max-width: 1024px) {
  .upcomming-section {
    padding: 60px 0;
  }
  
  .upcomming-title {
    font-size: 32px;
  }
}

@media only screen and (max-width: 768px) {
  .upcomming-section {
    padding: 50px 0;
    margin: 40px 0;
  }
  
  .upcomming-title {
    font-size: 28px;
    margin-bottom: 15px;
  }
  
  .upcomming-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 15px;
    margin-bottom: 30px;
  }
  
  .view-all-btn {
    padding: 10px 20px;
  }
}

@media only screen and (max-width: 576px) {
  .upcomming-section {
    padding: 40px 0;
    margin: 30px 0;
  }
  
  .upcomming-title {
    font-size: 24px;
  }
  
  .upcomming-section .prev-arrow,
  .upcomming-section .next-arrow {
    display: none;
  }
}
--- END OF FILE netflix-clone/src/components/Upcomming/upcomming.css ---

--- START OF FILE netflix-clone/src/components/account/Account.css ---
/* Account page styles */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

:root {
  --primary-purple: #7b2cbf;
  --primary-purple-light: #9d4edd;
  --primary-purple-dark: #5a189a;
  --primary-gradient: linear-gradient(to right, #5a189a, #7b2cbf, #9d4edd);
  --white: #ffffff;
  --off-white: #f8f9fa;
  --light-gray: #e9ecef;
  --medium-gray: #adb5bd;
  --dark-gray: #495057;
  --text-dark: #212529;
  --background-dark: #120425;
  --background-gradient: linear-gradient(to bottom, #0a0118, #1a0733);
  --card-bg: rgba(255, 255, 255, 0.05);
  --box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
  --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  --glow-purple: 0 0 15px rgba(157, 78, 221, 0.5);
  --border-color: rgba(156, 39, 176, 0.2);
  --success-color: #28a745;
  --danger-color: #dc3545;
  --warning-color: #ffc107;
  --info-color: #17a2b8;
}

.account-page {
  padding: 100px 0 60px;
  background: var(--background-gradient);
  min-height: 100vh;
  color: var(--white);
}

.account-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.account-header {
  margin-bottom: 50px;
  text-align: center;
}

.account-header h1 {
  font-size: 36px;
  font-weight: 700;
  margin-bottom: 20px;
  background: linear-gradient(to right, #9d4edd, #e0aaff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.account-header p {
  font-size: 16px;
  font-weight: 300;
  color: var(--medium-gray);
  max-width: 700px;
  margin: 0 auto;
}

.account-content {
  display: grid;
  grid-template-columns: 280px 1fr;
  gap: 30px;
}

/* Sidebar Navigation */
.account-sidebar {
  background: var(--card-bg);
  border-radius: 15px;
  padding: 30px;
  backdrop-filter: blur(10px);
  border: 1px solid var(--border-color);
  box-shadow: var(--card-shadow);
  height: fit-content;
}

.account-nav {
  margin-top: 10px;
}

.account-nav ul {
  list-style: none;
  padding: 0;
}

.account-nav li {
  margin-bottom: 15px;
}

.account-nav a {
  display: flex;
  align-items: center;
  padding: 12px 15px;
  color: var(--white);
  text-decoration: none;
  border-radius: 10px;
  transition: all 0.3s ease;
  font-weight: 500;
}

.account-nav a:hover {
  background: rgba(156, 39, 176, 0.1);
  color: var(--primary-purple-light);
  transform: translateX(5px);
}

.account-nav a.active {
  background: rgba(156, 39, 176, 0.2);
  color: var(--primary-purple-light);
  border-left: 3px solid var(--primary-purple-light);
}

.account-nav i {
  margin-right: 12px;
  width: 20px;
  font-size: 18px;
}

/* Main Section */
.account-main {
  background: var(--card-bg);
  border-radius: 15px;
  padding: 30px;
  backdrop-filter: blur(10px);
  border: 1px solid var(--border-color);
  box-shadow: var(--card-shadow);
}

.section-title {
  font-size: 24px;
  font-weight: 600;
  margin-bottom: 25px;
  padding-bottom: 15px;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  align-items: center;
}

.section-title i {
  margin-right: 12px;
  color: var(--primary-purple-light);
}

/* Form Styles */
.form-group {
  margin-bottom: 25px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: var(--off-white);
}

.form-control {
  width: 100%;
  padding: 12px 15px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  color: var(--white);
  font-size: 15px;
  transition: all 0.3s ease;
}

.form-control:focus {
  outline: none;
  border-color: var(--primary-purple-light);
  box-shadow: 0 0 0 3px rgba(157, 78, 221, 0.2);
  background: rgba(255, 255, 255, 0.08);
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.form-hint {
  margin-top: 6px;
  font-size: 13px;
  color: var(--medium-gray);
}

.form-action {
  display: flex;
  justify-content: flex-end;
  margin-top: 30px;
}

.btn {
  padding: 12px 25px;
  font-size: 15px;
  font-weight: 500;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-primary {
  background: var(--primary-gradient);
  color: var(--white);
}

.btn-primary:hover {
  background: linear-gradient(to right, #4a148c, #7b1fa2, #9c27b0);
  transform: translateY(-3px);
  box-shadow: var(--glow-purple);
}

.btn-secondary {
  background: rgba(255, 255, 255, 0.1);
  color: var(--off-white);
  margin-right: 10px;
}

.btn-secondary:hover {
  background: rgba(255, 255, 255, 0.15);
  transform: translateY(-3px);
}

.btn-danger {
  background: rgba(220, 53, 69, 0.1);
  color: #ff6b6b;
}

.btn-danger:hover {
  background: rgba(220, 53, 69, 0.2);
  transform: translateY(-3px);
}

/* Profile Picture Upload */
.profile-upload {
  display: flex;
  align-items: center;
  margin-bottom: 30px;
}

.profile-img {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  overflow: hidden;
  margin-right: 30px;
  border: 3px solid var(--primary-purple-light);
  box-shadow: var(--glow-purple);
}

.profile-img img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.upload-controls {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.upload-btn {
  padding: 10px 15px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px dashed var(--border-color);
  border-radius: 8px;
  color: var(--off-white);
  font-size: 14px;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: center;
}

.upload-btn:hover {
  background: rgba(255, 255, 255, 0.15);
}

.upload-btn i {
  margin-right: 8px;
}

.remove-btn {
  padding: 8px 15px;
  background: rgba(220, 53, 69, 0.1);
  border: none;
  border-radius: 8px;
  color: #ff6b6b;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: center;
}

.remove-btn:hover {
  background: rgba(220, 53, 69, 0.2);
}

.remove-btn i {
  margin-right: 8px;
}

/* Password Section */
.password-meter {
  margin-top: 10px;
  height: 6px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 3px;
  overflow: hidden;
}

.password-strength {
  height: 100%;
  transition: all 0.3s ease;
}

.strength-weak {
  width: 33%;
  background-color: var(--danger-color);
}

.strength-medium {
  width: 66%;
  background-color: var(--warning-color);
}

.strength-strong {
  width: 100%;
  background-color: var(--success-color);
}

.password-feedback {
  margin-top: 6px;
  font-size: 13px;
  display: flex;
  justify-content: space-between;
}

.password-label {
  color: var(--medium-gray);
}

.password-status {
  font-weight: 500;
}

.status-weak {
  color: var(--danger-color);
}

.status-medium {
  color: var(--warning-color);
}

.status-strong {
  color: var(--success-color);
}

/* Subscription Section */
.subscription-card {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 12px;
  padding: 25px;
  margin-bottom: 30px;
  border: 1px solid var(--border-color);
}

.subscription-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.subscription-header h3 {
  font-size: 20px;
  font-weight: 600;
  color: var(--primary-purple-light);
}

.subscription-badge {
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 13px;
  font-weight: 500;
}

.badge-active {
  background-color: rgba(40, 167, 69, 0.2);
  color: #4cd964;
}

.badge-expired {
  background-color: rgba(220, 53, 69, 0.2);
  color: #ff6b6b;
}

.subscription-details {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 25px;
}

.subscription-item {
  display: flex;
  flex-direction: column;
}

.subscription-label {
  font-size: 14px;
  color: var(--medium-gray);
  margin-bottom: 5px;
}

.subscription-value {
  font-size: 16px;
  font-weight: 500;
}

.subscription-features {
  margin-top: 20px;
}

.feature-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 15px;
  margin-top: 15px;
}

.feature-item {
  display: flex;
  align-items: center;
  font-size: 14px;
}

.feature-item i {
  margin-right: 10px;
  color: var(--success-color);
  font-size: 16px;
}

.payment-method {
  display: flex;
  align-items: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.03);
  border-radius: 8px;
  margin-bottom: 20px;
}

.payment-icon {
  font-size: 20px;
  margin-right: 15px;
  color: var(--primary-purple-light);
}

.payment-details {
  flex: 1;
}

.payment-details h4 {
  font-size: 16px;
  margin-bottom: 5px;
}

.payment-info {
  font-size: 14px;
  color: var(--medium-gray);
}

.payment-actions {
  display: flex;
  gap: 10px;
}

.payment-actions button {
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  font-weight: 500;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
}

.payment-actions .edit-btn {
  background: rgba(255, 255, 255, 0.1);
  color: var(--off-white);
}

.payment-actions .edit-btn:hover {
  background: rgba(255, 255, 255, 0.15);
}

.payment-actions .remove-btn {
  background: rgba(220, 53, 69, 0.1);
  color: #ff6b6b;
}

.payment-actions .remove-btn:hover {
  background: rgba(220, 53, 69, 0.2);
}

/* Preferences Section */
.preference-group {
  margin-bottom: 20px;
}

.preference-title {
  font-size: 18px;
  font-weight: 500;
  margin-bottom: 15px;
}

.toggle-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 0;
  border-bottom: 1px solid var(--border-color);
}

.toggle-label {
  font-size: 15px;
}

.toggle-description {
  font-size: 13px;
  color: var(--medium-gray);
  margin-top: 3px;
}

.toggle-switch {
  position: relative;
  display: inline-block;
  width: 50px;
  height: 26px;
}

.toggle-switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.toggle-slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 255, 255, 0.1);
  transition: .4s;
  border-radius: 34px;
}

.toggle-slider:before {
  position: absolute;
  content: "";
  height: 18px;
  width: 18px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: .4s;
  border-radius: 50%;
}

input:checked + .toggle-slider {
  background-color: var(--primary-purple);
}

input:focus + .toggle-slider {
  box-shadow: 0 0 1px var(--primary-purple);
}

input:checked + .toggle-slider:before {
  transform: translateX(24px);
}

/* Danger Zone */
.danger-zone {
  margin-top: 40px;
  background: rgba(220, 53, 69, 0.05);
  border: 1px solid rgba(220, 53, 69, 0.2);
  border-radius: 12px;
  padding: 25px;
}

.danger-zone h3 {
  color: #ff6b6b;
  font-size: 20px;
  margin-bottom: 15px;
}

.danger-actions {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
}

.danger-btn {
  background-color: rgba(220, 53, 69, 0.1);
  color: #ff6b6b;
  padding: 10px 20px;
  border-radius: 8px;
  border: 1px solid rgba(220, 53, 69, 0.2);
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.danger-btn:hover {
  background-color: rgba(220, 53, 69, 0.2);
}

.danger-btn i {
  margin-right: 8px;
}

/* Devices Section */
.device-list {
  margin-top: 20px;
}

.device-item {
  display: flex;
  align-items: center;
  padding: 15px;
  background: rgba(255, 255, 255, 0.03);
  border-radius: 8px;
  margin-bottom: 15px;
}

.device-icon {
  background: rgba(255, 255, 255, 0.1);
  width: 50px;
  height: 50px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 15px;
}

.device-icon i {
  font-size: 24px;
  color: var(--primary-purple-light);
}

.device-details {
  flex: 1;
}

.device-name {
  font-size: 16px;
  font-weight: 500;
  margin-bottom: 5px;
  display: flex;
  align-items: center;
}

.device-name .current {
  margin-left: 10px;
  font-size: 12px;
  background: rgba(40, 167, 69, 0.2);
  color: #4cd964;
  padding: 2px 8px;
  border-radius: 12px;
}

.device-meta {
  font-size: 13px;
  color: var(--medium-gray);
  display: flex;
  gap: 15px;
}

.device-action {
  margin-left: 10px;
}

.signout-btn {
  background: rgba(220, 53, 69, 0.1);
  color: #ff6b6b;
  border: none;
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 13px;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
}

.signout-btn:hover {
  background: rgba(220, 53, 69, 0.2);
}

.signout-btn i {
  margin-right: 5px;
}

/* Responsive */
@media (max-width: 992px) {
  .account-content {
    grid-template-columns: 250px 1fr;
    gap: 20px;
  }
}

@media (max-width: 768px) {
  .account-content {
    grid-template-columns: 1fr;
  }

  .account-sidebar {
    margin-bottom: 20px;
  }

  .form-row {
    grid-template-columns: 1fr;
    gap: 10px;
  }

  .profile-upload {
    flex-direction: column;
    align-items: flex-start;
  }

  .profile-img {
    margin-right: 0;
    margin-bottom: 20px;
  }

  .subscription-details {
    grid-template-columns: 1fr;
    gap: 15px;
  }

  .feature-list {
    grid-template-columns: 1fr;
  }

  .payment-method {
    flex-direction: column;
    align-items: flex-start;
  }

  .payment-icon {
    margin-bottom: 10px;
  }

  .payment-actions {
    margin-top: 15px;
  }
}

@media (max-width: 576px) {
  .account-page {
    padding: 80px 0 40px;
  }

  .account-header h1 {
    font-size: 28px;
  }

  .account-main {
    padding: 20px;
  }

  .danger-actions {
    flex-direction: column;
    gap: 10px;
  }

  .danger-btn {
    width: 100%;
  }
}
--- END OF FILE netflix-clone/src/components/account/Account.css ---

--- START OF FILE netflix-clone/src/components/account/Account.jsx ---
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import "./Account.css";

const Account = () => {
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState("personal");
  const [passwordStrength, setPasswordStrength] = useState("weak");

  // Personal Info state
  const [personalInfo, setPersonalInfo] = useState({
    firstName: "John",
    lastName: "Doe",
    email: "john.doe@example.com",
    phone: "+1 (555) 123-4567",
    birthdate: "1990-01-15",
    country: "United States",
  });

  // Password change state
  const [passwordInfo, setPasswordInfo] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  // Notification preferences state
  const [notificationPrefs, setNotificationPrefs] = useState({
    emailNotifications: true,
    newReleases: true,
    recommendations: true,
    accountActivity: true,
    marketingEmails: false,
  });

  // Playback preferences state
  const [playbackPrefs, setPlaybackPrefs] = useState({
    autoplay: true,
    hdStreaming: true,
    dataUsage: false,
    subtitles: true,
  });

  // Connected devices
  const [devices, setDevices] = useState([
    {
      id: 1,
      name: "Windows PC",
      type: "desktop",
      location: "New York, US",
      lastActive: "Now",
      isCurrent: true,
    },
    {
      id: 2,
      name: "iPhone 13",
      type: "mobile",
      location: "New York, US",
      lastActive: "2 days ago",
      isCurrent: false,
    },
    {
      id: 3,
      name: "Samsung Smart TV",
      type: "tv",
      location: "New York, US",
      lastActive: "1 week ago",
      isCurrent: false,
    },
  ]);

  // Handle form input changes
  const handlePersonalInfoChange = (e) => {
    const { name, value } = e.target;
    setPersonalInfo({
      ...personalInfo,
      [name]: value,
    });
  };

  const handlePasswordChange = (e) => {
    const { name, value } = e.target;
    setPasswordInfo({
      ...passwordInfo,
      [name]: value,
    });

    // Simple password strength checker
    if (name === "newPassword") {
      if (value.length < 8) {
        setPasswordStrength("weak");
      } else if (
        value.length >= 8 &&
        (value.match(/[A-Z]/) ||
          value.match(/[0-9]/) ||
          value.match(/[^A-Za-z0-9]/))
      ) {
        setPasswordStrength("medium");
      } else if (
        value.length >= 10 &&
        value.match(/[A-Z]/) &&
        value.match(/[0-9]/) &&
        value.match(/[^A-Za-z0-9]/)
      ) {
        setPasswordStrength("strong");
      }
    }
  };

  // Toggle notification preferences
  const toggleNotification = (setting) => {
    setNotificationPrefs({
      ...notificationPrefs,
      [setting]: !notificationPrefs[setting],
    });
  };

  // Toggle playback preferences
  const togglePlayback = (setting) => {
    setPlaybackPrefs({
      ...playbackPrefs,
      [setting]: !playbackPrefs[setting],
    });
  };

  // Sign out specific device
  const handleSignOutDevice = (deviceId) => {
    setDevices(devices.filter((device) => device.id !== deviceId));
  };

  // Handle save profile info
  const handleSaveProfile = (e) => {
    e.preventDefault();
    // In a real application, you would send this data to your backend
    alert("Profile information saved successfully!");
  };

  // Handle password update
  const handleUpdatePassword = (e) => {
    e.preventDefault();

    if (passwordInfo.newPassword !== passwordInfo.confirmPassword) {
      alert("New passwords do not match!");
      return;
    }

    // In a real application, you would send this data to your backend
    alert("Password updated successfully!");

    // Reset password fields
    setPasswordInfo({
      currentPassword: "",
      newPassword: "",
      confirmPassword: "",
    });
  };

  // Handle account deletion
  const handleDeleteAccount = () => {
    const confirmed = window.confirm(
      "Are you sure you want to delete your account? This action cannot be undone."
    );

    if (confirmed) {
      // In a real application, you would call your backend API
      alert("Account deleted successfully.");
      navigate("/");
    }
  };

  return (
    <div className="account-page">
      <div className="account-container">
        <div className="account-header">
          <h1>Account Settings</h1>
          <p>
            Manage your personal information, security settings, subscription
            details, and preferences
          </p>
        </div>

        <div className="account-content">
          {/* Sidebar Navigation */}
          <div className="account-sidebar">
            <div className="account-nav">
              <ul>
                <li>
                  <a
                    href="#personal"
                    className={activeTab === "personal" ? "active" : ""}
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveTab("personal");
                    }}
                  >
                    <i className="fas fa-user"></i>
                    Personal Information
                  </a>
                </li>
                <li>
                  <a
                    href="#security"
                    className={activeTab === "security" ? "active" : ""}
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveTab("security");
                    }}
                  >
                    <i className="fas fa-lock"></i>
                    Security
                  </a>
                </li>
                <li>
                  <a
                    href="#subscription"
                    className={activeTab === "subscription" ? "active" : ""}
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveTab("subscription");
                    }}
                  >
                    <i className="fas fa-credit-card"></i>
                    Subscription
                  </a>
                </li>
                <li>
                  <a
                    href="#preferences"
                    className={activeTab === "preferences" ? "active" : ""}
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveTab("preferences");
                    }}
                  >
                    <i className="fas fa-sliders-h"></i>
                    Preferences
                  </a>
                </li>
                <li>
                  <a
                    href="#devices"
                    className={activeTab === "devices" ? "active" : ""}
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveTab("devices");
                    }}
                  >
                    <i className="fas fa-laptop"></i>
                    Devices
                  </a>
                </li>
              </ul>
            </div>
          </div>

          {/* Main Content */}
          <div className="account-main">
            {/* Personal Information */}
            {activeTab === "personal" && (
              <div>
                <h2 className="section-title">
                  <i className="fas fa-user"></i> Personal Information
                </h2>

                <div className="profile-upload">
                  <div className="profile-img">
                    <img src="./images/avatar.png" alt="Profile" />
                  </div>
                  <div className="upload-controls">
                    <label className="upload-btn">
                      <i className="fas fa-upload"></i> Upload New Photo
                      <input
                        type="file"
                        style={{ display: "none" }}
                        accept="image/*"
                      />
                    </label>
                    <button className="remove-btn">
                      <i className="fas fa-trash-alt"></i> Remove Photo
                    </button>
                  </div>
                </div>

                <form onSubmit={handleSaveProfile}>
                  <div className="form-row">
                    <div className="form-group">
                      <label htmlFor="firstName">First Name</label>
                      <input
                        type="text"
                        id="firstName"
                        name="firstName"
                        className="form-control"
                        value={personalInfo.firstName}
                        onChange={handlePersonalInfoChange}
                        required
                      />
                    </div>
                    <div className="form-group">
                      <label htmlFor="lastName">Last Name</label>
                      <input
                        type="text"
                        id="lastName"
                        name="lastName"
                        className="form-control"
                        value={personalInfo.lastName}
                        onChange={handlePersonalInfoChange}
                        required
                      />
                    </div>
                  </div>

                  <div className="form-row">
                    <div className="form-group">
                      <label htmlFor="email">Email Address</label>
                      <input
                        type="email"
                        id="email"
                        name="email"
                        className="form-control"
                        value={personalInfo.email}
                        onChange={handlePersonalInfoChange}
                        required
                      />
                    </div>
                    <div className="form-group">
                      <label htmlFor="phone">Phone Number</label>
                      <input
                        type="tel"
                        id="phone"
                        name="phone"
                        className="form-control"
                        value={personalInfo.phone}
                        onChange={handlePersonalInfoChange}
                      />
                    </div>
                  </div>

                  <div className="form-row">
                    <div className="form-group">
                      <label htmlFor="birthdate">Date of Birth</label>
                      <input
                        type="date"
                        id="birthdate"
                        name="birthdate"
                        className="form-control"
                        value={personalInfo.birthdate}
                        onChange={handlePersonalInfoChange}
                      />
                    </div>
                    <div className="form-group">
                      <label htmlFor="country">Country</label>
                      <input
                        type="text"
                        id="country"
                        name="country"
                        className="form-control"
                        value={personalInfo.country}
                        onChange={handlePersonalInfoChange}
                      />
                    </div>
                  </div>

                  <div className="form-action">
                    <button type="submit" className="btn btn-primary">
                      Save Changes
                    </button>
                  </div>
                </form>
              </div>
            )}

            {/* Security Settings */}
            {activeTab === "security" && (
              <div>
                <h2 className="section-title">
                  <i className="fas fa-lock"></i> Security Settings
                </h2>

                <form onSubmit={handleUpdatePassword}>
                  <div className="form-group">
                    <label htmlFor="currentPassword">Current Password</label>
                    <input
                      type="password"
                      id="currentPassword"
                      name="currentPassword"
                      className="form-control"
                      value={passwordInfo.currentPassword}
                      onChange={handlePasswordChange}
                      required
                    />
                  </div>

                  <div className="form-group">
                    <label htmlFor="newPassword">New Password</label>
                    <input
                      type="password"
                      id="newPassword"
                      name="newPassword"
                      className="form-control"
                      value={passwordInfo.newPassword}
                      onChange={handlePasswordChange}
                      required
                    />
                    <div className="password-meter">
                      <div
                        className={`password-strength strength-${passwordStrength}`}
                      ></div>
                    </div>
                    <div className="password-feedback">
                      <span className="password-label">Password Strength:</span>
                      <span
                        className={`password-status status-${passwordStrength}`}
                      >
                        {passwordStrength.charAt(0).toUpperCase() +
                          passwordStrength.slice(1)}
                      </span>
                    </div>
                  </div>

                  <div className="form-group">
                    <label htmlFor="confirmPassword">
                      Confirm New Password
                    </label>
                    <input
                      type="password"
                      id="confirmPassword"
                      name="confirmPassword"
                      className="form-control"
                      value={passwordInfo.confirmPassword}
                      onChange={handlePasswordChange}
                      required
                    />
                  </div>

                  <div className="form-action">
                    <button type="submit" className="btn btn-primary">
                      Update Password
                    </button>
                  </div>
                </form>

                <div className="danger-zone">
                  <h3>Danger Zone</h3>
                  <div className="danger-actions">
                    <button
                      className="danger-btn"
                      onClick={handleDeleteAccount}
                    >
                      <i className="fas fa-trash-alt"></i> Delete Account
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Subscription */}
            {activeTab === "subscription" && (
              <div>
                <h2 className="section-title">
                  <i className="fas fa-credit-card"></i> Subscription
                </h2>

                <div className="subscription-card">
                  <div className="subscription-header">
                    <h3>Premium Plan</h3>
                    <span className="subscription-badge badge-active">
                      Active
                    </span>
                  </div>

                  <div className="subscription-details">
                    <div className="subscription-item">
                      <span className="subscription-label">Billing Cycle</span>
                      <span className="subscription-value">Monthly</span>
                    </div>
                    <div className="subscription-item">
                      <span className="subscription-label">
                        Next Billing Date
                      </span>
                      <span className="subscription-value">May 15, 2025</span>
                    </div>
                    <div className="subscription-item">
                      <span className="subscription-label">Amount</span>
                      <span className="subscription-value">$14.99/month</span>
                    </div>
                    <div className="subscription-item">
                      <span className="subscription-label">Status</span>
                      <span className="subscription-value">Active</span>
                    </div>
                  </div>

                  <div className="subscription-features">
                    <h4>Your Plan Includes:</h4>
                    <div className="feature-list">
                      <div className="feature-item">
                        <i className="fas fa-check-circle"></i> Unlimited Access
                      </div>
                      <div className="feature-item">
                        <i className="fas fa-check-circle"></i> Ad-Free
                        Experience
                      </div>
                      <div className="feature-item">
                        <i className="fas fa-check-circle"></i> HD Streaming
                      </div>
                      <div className="feature-item">
                        <i className="fas fa-check-circle"></i> Offline
                        Downloads
                      </div>
                      <div className="feature-item">
                        <i className="fas fa-check-circle"></i> Multiple Devices
                      </div>
                      <div className="feature-item">
                        <i className="fas fa-check-circle"></i> Premium Support
                      </div>
                    </div>
                  </div>
                </div>

                <h3 className="section-title">Payment Method</h3>

                <div className="payment-method">
                  <div className="payment-icon">
                    <i className="fab fa-cc-visa"></i>
                  </div>
                  <div className="payment-details">
                    <h4>VISA ending in 4242</h4>
                    <div className="payment-info">Expires 12/2026</div>
                  </div>
                  <div className="payment-actions">
                    <button className="edit-btn">
                      <i className="fas fa-edit"></i> Edit
                    </button>
                    <button className="remove-btn">
                      <i className="fas fa-trash-alt"></i> Remove
                    </button>
                  </div>
                </div>

                <div className="form-action">
                  <button className="btn btn-secondary">
                    Cancel Subscription
                  </button>
                  <button className="btn btn-primary">Upgrade Plan</button>
                </div>
              </div>
            )}

            {/* Preferences */}
            {activeTab === "preferences" && (
              <div>
                <h2 className="section-title">
                  <i className="fas fa-sliders-h"></i> Preferences
                </h2>

                <div className="preference-group">
                  <h3 className="preference-title">Notification Settings</h3>

                  <div className="toggle-row">
                    <div>
                      <div className="toggle-label">Email Notifications</div>
                      <div className="toggle-description">
                        Receive emails about your account activity
                      </div>
                    </div>
                    <label className="toggle-switch">
                      <input
                        type="checkbox"
                        checked={notificationPrefs.emailNotifications}
                        onChange={() =>
                          toggleNotification("emailNotifications")
                        }
                      />
                      <span className="toggle-slider"></span>
                    </label>
                  </div>

                  <div className="toggle-row">
                    <div>
                      <div className="toggle-label">New Releases</div>
                      <div className="toggle-description">
                        Be notified about new content releases
                      </div>
                    </div>
                    <label className="toggle-switch">
                      <input
                        type="checkbox"
                        checked={notificationPrefs.newReleases}
                        onChange={() => toggleNotification("newReleases")}
                      />
                      <span className="toggle-slider"></span>
                    </label>
                  </div>

                  <div className="toggle-row">
                    <div>
                      <div className="toggle-label">
                        Personalized Recommendations
                      </div>
                      <div className="toggle-description">
                        Receive customized content suggestions
                      </div>
                    </div>
                    <label className="toggle-switch">
                      <input
                        type="checkbox"
                        checked={notificationPrefs.recommendations}
                        onChange={() => toggleNotification("recommendations")}
                      />
                      <span className="toggle-slider"></span>
                    </label>
                  </div>

                  <div className="toggle-row">
                    <div>
                      <div className="toggle-label">Account Activity</div>
                      <div className="toggle-description">
                        Get notified about important account events
                      </div>
                    </div>
                    <label className="toggle-switch">
                      <input
                        type="checkbox"
                        checked={notificationPrefs.accountActivity}
                        onChange={() => toggleNotification("accountActivity")}
                      />
                      <span className="toggle-slider"></span>
                    </label>
                  </div>

                  <div className="toggle-row">
                    <div>
                      <div className="toggle-label">Marketing Emails</div>
                      <div className="toggle-description">
                        Receive promotional offers and updates
                      </div>
                    </div>
                    <label className="toggle-switch">
                      <input
                        type="checkbox"
                        checked={notificationPrefs.marketingEmails}
                        onChange={() => toggleNotification("marketingEmails")}
                      />
                      <span className="toggle-slider"></span>
                    </label>
                  </div>
                </div>

                <div className="preference-group">
                  <h3 className="preference-title">Playback Settings</h3>

                  <div className="toggle-row">
                    <div>
                      <div className="toggle-label">Autoplay</div>
                      <div className="toggle-description">
                        Automatically play next episode or recommended content
                      </div>
                    </div>
                    <label className="toggle-switch">
                      <input
                        type="checkbox"
                        checked={playbackPrefs.autoplay}
                        onChange={() => togglePlayback("autoplay")}
                      />
                      <span className="toggle-slider"></span>
                    </label>
                  </div>

                  <div className="toggle-row">
                    <div>
                      <div className="toggle-label">HD Streaming</div>
                      <div className="toggle-description">
                        Stream content in high definition when available
                      </div>
                    </div>
                    <label className="toggle-switch">
                      <input
                        type="checkbox"
                        checked={playbackPrefs.hdStreaming}
                        onChange={() => togglePlayback("hdStreaming")}
                      />
                      <span className="toggle-slider"></span>
                    </label>
                  </div>

                  <div className="toggle-row">
                    <div>
                      <div className="toggle-label">Data Saver</div>
                      <div className="toggle-description">
                        Reduce data usage while streaming
                      </div>
                    </div>
                    <label className="toggle-switch">
                      <input
                        type="checkbox"
                        checked={playbackPrefs.dataUsage}
                        onChange={() => togglePlayback("dataUsage")}
                      />
                      <span className="toggle-slider"></span>
                    </label>
                  </div>

                  <div className="toggle-row">
                    <div>
                      <div className="toggle-label">Subtitles</div>
                      <div className="toggle-description">
                        Show subtitles by default when available
                      </div>
                    </div>
                    <label className="toggle-switch">
                      <input
                        type="checkbox"
                        checked={playbackPrefs.subtitles}
                        onChange={() => togglePlayback("subtitles")}
                      />
                      <span className="toggle-slider"></span>
                    </label>
                  </div>
                </div>

                <div className="form-action">
                  <button className="btn btn-primary">Save Preferences</button>
                </div>
              </div>
            )}

            {/* Devices */}
            {activeTab === "devices" && (
              <div>
                <h2 className="section-title">
                  <i className="fas fa-laptop"></i> Connected Devices
                </h2>

                <div className="device-list">
                  {devices.map((device) => (
                    <div className="device-item" key={device.id}>
                      <div className="device-icon">
                        <i
                          className={`fas fa-${
                            device.type === "desktop"
                              ? "desktop"
                              : device.type === "mobile"
                              ? "mobile-alt"
                              : device.type === "tv"
                              ? "tv"
                              : "tablet"
                          }`}
                        ></i>
                      </div>
                      <div className="device-details">
                        <div className="device-name">
                          {device.name}
                          {device.isCurrent && (
                            <span className="current">Current Device</span>
                          )}
                        </div>
                        <div className="device-meta">
                          <span>{device.location}</span>
                          <span>Last active: {device.lastActive}</span>
                        </div>
                      </div>
                      {!device.isCurrent && (
                        <div className="device-action">
                          <button
                            className="signout-btn"
                            onClick={() => handleSignOutDevice(device.id)}
                          >
                            <i className="fas fa-sign-out-alt"></i> Sign Out
                          </button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>

                <div className="form-action">
                  <button className="btn btn-danger">
                    Sign Out All Devices
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Account;

--- END OF FILE netflix-clone/src/components/account/Account.jsx ---

--- START OF FILE netflix-clone/src/components/categories/Categories.css ---
/* Categories Page Styles */
.category-page {
  min-height: 100vh;
  background-color: #0d0617;
  color: #ffffff;
}

/* Hero Section */
.category-hero {
  position: relative;
  height: 45vh;
  min-height: 300px;
  max-height: 500px;
  background: var(--primary-gradient);
  background-size: cover;
  background-position: center;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 40px;
  overflow: hidden;
}

.category-hero::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /* Fixed path: Using a gradient instead of an image */
  background: linear-gradient(135deg, #5a189a, #7b2cbf, #9d4edd);
  background-size: 400% 400%;
  opacity: 0.3;
  z-index: 1;
  animation: gradient-shift 30s infinite alternate ease-in-out;
}

@keyframes gradient-shift {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

@keyframes slow-pan {
  0% {
    transform: scale(1.05) translate(0, 0);
  }
  100% {
    transform: scale(1.15) translate(-2%, -2%);
  }
}

.category-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    180deg,
    rgba(13, 6, 23, 0.7) 0%,
    rgba(13, 6, 23, 0.9) 100%
  );
  z-index: 2;
}

.category-info {
  position: relative;
  z-index: 3;
  text-align: center;
  padding: 0 20px;
  max-width: 800px;
}

.category-icon {
  font-size: 3rem;
  margin-bottom: 20px;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: rgba(157, 78, 221, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 20px;
  box-shadow: 0 0 30px rgba(157, 78, 221, 0.5);
  color: #9d4edd;
}

.category-icon i {
  text-shadow: 0 0 10px rgba(157, 78, 221, 0.8);
}

.category-info h1 {
  font-size: 2.8rem;
  font-weight: 700;
  margin-bottom: 15px;
  background: linear-gradient(to right, #ffffff, #9d4edd);
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  animation: shine 3s infinite;
}

@keyframes shine {
  0% {
    background-position: -200px;
  }
  100% {
    background-position: 200px;
  }
}

.category-info p {
  font-size: 1.2rem;
  opacity: 0.8;
  max-width: 600px;
  margin: 0 auto;
}

/* Container */
.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Loading State */
.loading-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 60px 0;
  text-align: center;
}

.loading-spinner {
  width: 50px;
  height: 50px;
  border: 4px solid rgba(157, 78, 221, 0.2);
  border-top: 4px solid #9d4edd;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 20px;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.loading-container p {
  font-size: 1.2rem;
  color: rgba(255, 255, 255, 0.7);
}

/* Results Header */
.results-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 15px;
  border-bottom: 1px solid rgba(157, 78, 221, 0.3);
}

.results-header h2 {
  font-size: 1.6rem;
  font-weight: 600;
}

.results-header h2 span {
  color: #9d4edd;
  font-weight: 700;
}

.filter-options select {
  background-color: rgba(157, 78, 221, 0.1);
  border: 1px solid rgba(157, 78, 221, 0.3);
  color: #ffffff;
  padding: 8px 15px;
  border-radius: 20px;
  font-size: 0.9rem;
  cursor: pointer;
  outline: none;
  transition: all 0.3s ease;
}

.filter-options select:hover {
  background-color: rgba(157, 78, 221, 0.2);
  border-color: rgba(157, 78, 221, 0.5);
}

.filter-options select:focus {
  box-shadow: 0 0 0 2px rgba(157, 78, 221, 0.3);
}

/* Movie Grid */
.movie-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  gap: 25px;
  margin-bottom: 60px;
}

.movie-card {
  transition: all 0.3s ease;
  border-radius: 10px;
  background: rgba(30, 15, 50, 0.6);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.movie-card:hover {
  transform: translateY(-8px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(157, 78, 221, 0.3);
}

.movie-card a {
  text-decoration: none;
  color: inherit;
}

.movie-poster {
  position: relative;
  height: 340px;
  overflow: hidden;
  width: 100%;
}

.movie-poster img {
  width: 100%;
  transition: all 0.5s ease;
}

.movie-card:hover .movie-poster img {
  transform: scale(1.08);
  filter: brightness(0.7);
}

.movie-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to top, rgba(10, 4, 20, 0.8) 0%, transparent 60%);
  opacity: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.movie-card:hover .movie-overlay {
  opacity: 1;
}

.movie-actions {
  display: flex;
  gap: 15px;
}

.movie-actions button {
  width: 45px;
  height: 45px;
  border-radius: 50%;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  transform: translateY(20px);
  opacity: 0;
}

.movie-card:hover .movie-actions button {
  transform: translateY(0);
  opacity: 1;
}

.play-btn {
  background: #9d4edd;
  color: white;
}

.play-btn:hover {
  background: #7b2cbf;
  transform: scale(1.1) !important;
}

.add-btn {
  background: rgba(255, 255, 255, 0.2);
  color: white;
  backdrop-filter: blur(5px);
}

.add-btn:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: scale(1.1) !important;
}

.movie-actions .play-btn {
  transition-delay: 0.1s;
}

.movie-actions .add-btn {
  transition-delay: 0.2s;
}

.movie-info {
  padding: 15px;
}

.movie-info h3 {
  font-size: 1.1rem;
  font-weight: 600;
  margin-bottom: 8px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.movie-meta {
  display: flex;
  align-items: center;
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.7);
}

.rating {
  display: flex;
  align-items: center;
  margin-right: 12px;
  color: #ffba08;
}

.rating i {
  margin-right: 5px;
  font-size: 0.8rem;
}

/* Empty Category */
.empty-category {
  text-align: center;
  padding: 60px 0;
  max-width: 600px;
  margin: 0 auto;
}

.empty-icon {
  font-size: 4rem;
  color: rgba(157, 78, 221, 0.4);
  margin-bottom: 20px;
}

.empty-category h2 {
  font-size: 1.8rem;
  margin-bottom: 15px;
}

.empty-category p {
  color: rgba(255, 255, 255, 0.7);
  margin-bottom: 25px;
}

.browse-btn {
  display: inline-block;
  background: linear-gradient(to right, #7b2cbf, #9d4edd);
  color: white;
  padding: 12px 25px;
  border-radius: 25px;
  text-decoration: none;
  font-weight: 500;
  transition: all 0.3s ease;
  box-shadow: 0 5px 15px rgba(123, 44, 191, 0.3);
}

.browse-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 20px rgba(123, 44, 191, 0.4);
}

/* Recommendations Section */
.category-recommendations {
  margin: 60px 0;
  padding-top: 40px;
  border-top: 1px solid rgba(157, 78, 221, 0.2);
}

.category-recommendations h2 {
  font-size: 1.8rem;
  margin-bottom: 25px;
  position: relative;
  padding-left: 15px;
}

.category-recommendations h2::before {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 4px;
  background: linear-gradient(to bottom, #7b2cbf, #9d4edd);
  border-radius: 2px;
}

.recommendations-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
}

.recommendation-card {
  transition: all 0.3s ease;
  border-radius: 8px;
  overflow: hidden;
}

.recommendation-card:hover {
  transform: translateY(-5px);
}

.recommendation-poster {
  position: relative;
  height: 280px;
  border-radius: 8px;
  overflow: hidden;
}

.recommendation-poster img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: all 0.3s ease;
}

.recommendation-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to top, rgba(10, 4, 20, 0.7) 0%, transparent 70%);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: all 0.3s ease;
}

.recommendation-card:hover .recommendation-overlay {
  opacity: 1;
}

.recommendation-card:hover .recommendation-poster img {
  transform: scale(1.08);
}

.play-icon {
  width: 40px;
  height: 40px;
  background: rgba(157, 78, 221, 0.8);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  transform: translateY(20px);
  transition: all 0.3s ease;
}

.recommendation-card:hover .play-icon {
  transform: translateY(0);
}

.recommendation-info {
  padding: 12px 5px;
}

.recommendation-info h4 {
  font-size: 1rem;
  font-weight: 500;
  margin-bottom: 5px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.recommendation-info .time {
  font-size: 0.85rem;
  color: rgba(255, 255, 255, 0.7);
}

/* Responsive Styles */
@media (max-width: 1024px) {
  .movie-grid {
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  }

  .movie-poster {
    height: 280px;
  }
}

@media (max-width: 768px) {
  .category-hero {
    height: 40vh;
  }

  .category-info h1 {
    font-size: 2.2rem;
  }

  .results-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 15px;
  }

  .movie-grid {
    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
    gap: 15px;
  }

  .movie-poster {
    height: 220px;
  }

  .recommendations-grid {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  }

  .recommendation-poster {
    height: 200px;
  }
}

@media (max-width: 480px) {
  .category-hero {
    height: 35vh;
  }

  .category-icon {
    width: 80px;
    height: 80px;
    font-size: 2.2rem;
  }

  .category-info h1 {
    font-size: 1.8rem;
  }

  .category-info p {
    font-size: 1rem;
  }

  .movie-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
  }

  .movie-poster {
    height: 200px;
  }

  .movie-info h3 {
    font-size: 0.95rem;
  }

  .recommendations-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* Add these styles to your Categories.css file */

/* Styling for missing movie posters */
.no-poster {
  width: 100%;
  height: 100%;
  background: linear-gradient(
    135deg,
    rgba(90, 24, 154, 0.7),
    rgba(157, 78, 221, 0.5)
  );
  display: flex;
  align-items: center;
  justify-content: center;
}

.no-poster i {
  font-size: 3rem;
  color: rgba(255, 255, 255, 0.8);
  opacity: 0.7;
  transition: all 0.3s ease;
}

.movie-card:hover .no-poster i {
  transform: scale(1.1);
  color: white;
  opacity: 1;
}

--- END OF FILE netflix-clone/src/components/categories/Categories.css ---

--- START OF FILE netflix-clone/src/components/categories/Categories.jsx ---
import React, { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import "./Categories.css";
import {
  homeData,
  trending,
  latest,
  upcome,
  recommended,
  documentaries,
  animation,
} from "../../dummyData";

const Categories = () => {
  const { categoryName } = useParams();
  const [movies, setMovies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [categoryTitle, setCategoryTitle] = useState("");
  const [categoryIcon, setCategoryIcon] = useState("");
  const [sortMethod, setSortMethod] = useState("popular");

  // All available categories
  const categoryIcons = {
    action: "fa-bomb",
    comedy: "fa-laugh",
    drama: "fa-theater-masks",
    scifi: "fa-robot",
    romance: "fa-heart",
    documentary: "fa-film",
    cartoon: "fa-dragon",
    thriller: "fa-skull",
    crime: "fa-fingerprint",
    adventure: "fa-mountain",
  };

  // Format category name for display
  const formatCategoryName = (name) => {
    return name.charAt(0).toUpperCase() + name.slice(1);
  };

  // Fix image paths
  const fixImagePath = (path) => {
    if (!path) return null;

    // If path already starts with http or / (for public folder), return as is
    if (path.startsWith("http") || path.startsWith("/")) {
      return path;
    }

    // Remove "../" from the beginning to get correct public path
    return path.replace(/^\.\.\//, "/");
  };

  // Prepare data with source information
  const prepareData = (sourceName, data) => {
    return data.map((item) => ({
      ...item,
      source: sourceName,
      genres: item.genres || formatSourceToGenre(sourceName),
      rating: item.rating || 4.5,
      cover: fixImagePath(item.cover),
    }));
  };

  // Convert source name to genre name for items without genres
  const formatSourceToGenre = (source) => {
    switch (source) {
      case "documentaries":
        return "Documentary";
      case "animation":
        return "Animation";
      case "latest":
        return "Latest";
      case "trending":
        return "Trending";
      case "upcome":
        return "Upcoming";
      case "recommended":
        return "Recommended";
      default:
        return "Drama";
    }
  };

  // Handle sort change
  const handleSortChange = (e) => {
    setSortMethod(e.target.value);

    // Sort movies based on selected method
    let sortedMovies = [...movies];

    switch (e.target.value) {
      case "rating":
        sortedMovies.sort((a, b) => (b.rating || 0) - (a.rating || 0));
        break;
      case "recent":
        // Assuming newer movies have higher IDs
        sortedMovies.sort((a, b) => b.id - a.id);
        break;
      default: // popular
        // Keep original order which is assumed to be by popularity
        break;
    }

    setMovies(sortedMovies);
  };

  useEffect(() => {
    setLoading(true);
    setSortMethod("popular"); // Reset sort method on category change

    // Prepare all data sources with source information
    const preparedData = {
      homeData: prepareData("homeData", homeData),
      trending: prepareData("trending", trending),
      latest: prepareData("latest", latest),
      upcome: prepareData("upcome", upcome),
      recommended: prepareData("recommended", recommended),
      documentaries: prepareData("documentaries", documentaries),
      animation: prepareData("animation", animation),
    };

    // Combine all movie data
    const allMovies = [
      ...preparedData.homeData,
      ...preparedData.trending,
      ...preparedData.latest,
      ...preparedData.upcome,
      ...preparedData.recommended,
      ...preparedData.documentaries,
      ...preparedData.animation,
    ];

    // Filter movies by category (case insensitive)
    const categoryLower = categoryName.toLowerCase();
    let filtered;

    // Special handling for specific categories
    if (categoryLower === "documentary") {
      filtered = preparedData.documentaries;
    } else if (categoryLower === "cartoon" || categoryLower === "animation") {
      filtered = preparedData.animation;
    } else {
      // Filter by genre
      filtered = allMovies.filter((movie) => {
        if (!movie.genres) return false;
        return movie.genres.toLowerCase().includes(categoryLower);
      });
    }

    // Set category title and icon
    setCategoryTitle(formatCategoryName(categoryName));
    setCategoryIcon(categoryIcons[categoryLower] || "fa-film");

    // Set filtered movies
    setMovies(filtered);
    setLoading(false);
  }, [categoryName]);

  return (
    <div className="category-page">
      <div className="category-hero">
        <div className="category-overlay"></div>
        <div className="category-info">
          <div className="category-icon">
            <i className={`fas ${categoryIcon}`}></i>
          </div>
          <h1>{categoryTitle} Movies & Shows</h1>
          <p>Explore our collection of {categoryTitle.toLowerCase()} content</p>
        </div>
      </div>

      <div className="container">
        {loading ? (
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>Loading {categoryTitle} content...</p>
          </div>
        ) : (
          <>
            <div className="category-results">
              <div className="results-header">
                <h2>
                  <span>{movies.length}</span>{" "}
                  {movies.length === 1 ? "title" : "titles"} found
                </h2>
                <div className="filter-options">
                  <select value={sortMethod} onChange={handleSortChange}>
                    <option value="popular">Most Popular</option>
                    <option value="recent">Recently Added</option>
                    <option value="rating">Highest Rated</option>
                  </select>
                </div>
              </div>

              {movies.length > 0 ? (
                <div className="movie-grid">
                  {movies.map((movie) => (
                    <div
                      className="movie-card"
                      key={`${movie.id}-${movie.name}`}
                    >
                      {/* Use source/id format for links */}
                      <Link to={`/singlePage/${movie.source}/${movie.id}`}>
                        <div className="movie-poster">
                          {movie.cover ? (
                            <img src={movie.cover} alt={movie.name} />
                          ) : (
                            <div className="no-poster">
                              <i className="fas fa-film"></i>
                            </div>
                          )}
                          <div className="movie-overlay">
                            <div className="movie-actions">
                              <button className="play-btn">
                                <i className="fas fa-play"></i>
                              </button>
                              <button className="add-btn">
                                <i className="fas fa-plus"></i>
                              </button>
                            </div>
                          </div>
                        </div>
                        <div className="movie-info">
                          <h3>{movie.name}</h3>
                          <div className="movie-meta">
                            {movie.rating && (
                              <span className="rating">
                                <i className="fas fa-star"></i> {movie.rating}
                              </span>
                            )}
                            <span className="time">{movie.time}</span>
                          </div>
                        </div>
                      </Link>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="empty-category">
                  <div className="empty-icon">
                    <i className="fas fa-film"></i>
                  </div>
                  <h2>No {categoryTitle} content found</h2>
                  <p>
                    We couldn't find any {categoryTitle.toLowerCase()} movies or
                    shows in our database.
                  </p>
                  <Link to="/" className="browse-btn">
                    Browse All Content
                  </Link>
                </div>
              )}
            </div>

            {movies.length > 0 && (
              <div className="category-recommendations">
                <h2>You might also like</h2>
                <div className="recommendations-grid">
                  {recommended.slice(0, 4).map((movie) => (
                    <div
                      className="recommendation-card"
                      key={`rec-${movie.id}`}
                    >
                      {/* Updated Link to include source/id format */}
                      <Link to={`/singlePage/recommended/${movie.id}`}>
                        <div className="recommendation-poster">
                          <img
                            src={fixImagePath(movie.cover)}
                            alt={movie.name}
                          />
                          <div className="recommendation-overlay">
                            <span className="play-icon">
                              <i className="fas fa-play"></i>
                            </span>
                          </div>
                        </div>
                        <div className="recommendation-info">
                          <h4>{movie.name}</h4>
                          <span className="time">{movie.time}</span>
                        </div>
                      </Link>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default Categories;

--- END OF FILE netflix-clone/src/components/categories/Categories.jsx ---

--- START OF FILE netflix-clone/src/components/categories/CategoryList.css ---
/* CategoryList.css */
.category-list-page {
  min-height: 100vh;
  background-color: #0d0617;
  color: #ffffff;
}

/* Hero Banner */
.category-hero-banner {
  position: relative;
  height: 40vh;
  min-height: 300px;
  /* Fixed path: Using a gradient background instead of an image */
  background: linear-gradient(135deg, #5a189a, #7b2cbf, #9d4edd);
  background-size: 400% 400%;
  animation: gradient-animation 15s ease infinite;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 50px;
  overflow: hidden;
}

@keyframes gradient-animation {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.category-hero-banner .overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to bottom, rgba(13, 6, 23, 0.8), rgba(13, 6, 23, 0.95));
  z-index: 1;
}

.hero-content {
  position: relative;
  z-index: 2;
  text-align: center;
  max-width: 800px;
  padding: 0 20px;
}

.hero-content h1 {
  font-size: 3.5rem;
  font-weight: 700;
  margin-bottom: 15px;
  background: linear-gradient(to right, #ffffff, #9d4edd);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}

.hero-content p {
  font-size: 1.2rem;
  opacity: 0.8;
}

/* Container */
.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Category List Intro */
.category-list-intro {
  text-align: center;
  max-width: 800px;
  margin: 0 auto 50px;
}

.category-list-intro h2 {
  font-size: 2.2rem;
  margin-bottom: 15px;
  position: relative;
  display: inline-block;
}

.category-list-intro h2::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 80px;
  height: 3px;
  background: linear-gradient(to right, #7b2cbf, #9d4edd);
  border-radius: 3px;
}

.category-list-intro p {
  font-size: 1.1rem;
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.6;
}

/* Categories Grid */
.categories-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 25px;
  margin-bottom: 70px;
}

.category-card {
  display: flex;
  align-items: center;
  background-color: rgba(30, 15, 50, 0.5);
  border-radius: 12px;
  overflow: hidden;
  text-decoration: none;
  color: inherit;
  transition: all 0.3s ease;
  border: 1px solid rgba(157, 78, 221, 0.2);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  position: relative;
}

.category-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 5px;
  height: 100%;
  background-color: var(--category-color, #9d4edd);
  opacity: 0.7;
  transition: all 0.3s ease;
}

.category-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  background-color: rgba(40, 20, 65, 0.7);
  border-color: var(--category-color, rgba(157, 78, 221, 0.4));
}

.category-card:hover::before {
  width: 7px;
  opacity: 1;
}

.category-icon {
  width: 80px;
  min-width: 80px;
  height: 80px;
  background-color: rgba(0, 0, 0, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 15px;
  border-radius: 12px;
  font-size: 2rem;
  color: var(--category-color, #9d4edd);
  transition: all 0.3s ease;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
  background: radial-gradient(circle at center, rgba(255, 255, 255, 0.1), transparent);
}

.category-card:hover .category-icon {
  transform: scale(1.05);
  color: white;
  background-color: var(--category-color, rgba(157, 78, 221, 0.8));
  box-shadow: 0 0 20px var(--category-color, rgba(157, 78, 221, 0.4));
}

.category-content {
  padding: 20px 15px 20px 0;
  flex: 1;
}

.category-content h3 {
  font-size: 1.3rem;
  font-weight: 600;
  margin-bottom: 8px;
  transition: all 0.3s ease;
}

.category-card:hover .category-content h3 {
  color: var(--category-color, #9d4edd);
}

.category-content p {
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.7);
  margin-bottom: 12px;
  line-height: 1.4;
}

.category-meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 0.85rem;
}

.category-count {
  color: rgba(255, 255, 255, 0.6);
  padding: 3px 10px;
  border-radius: 20px;
  background: rgba(0, 0, 0, 0.2);
}

.category-explore {
  color: var(--category-color, #9d4edd);
  font-weight: 500;
  display: flex;
  align-items: center;
  opacity: 0.8;
  transition: all 0.3s ease;
}

.category-explore i {
  font-size: 0.7rem;
  margin-left: 5px;
  transition: transform 0.3s ease;
}

.category-card:hover .category-explore {
  opacity: 1;
}

.category-card:hover .category-explore i {
  transform: translateX(3px);
}

/* Featured Collections */
.categories-featured {
  margin-bottom: 70px;
}

.categories-featured h2 {
  font-size: 2rem;
  margin-bottom: 30px;
  position: relative;
  padding-left: 15px;
}

.categories-featured h2::before {
  content: '';
  position: absolute;
  left: 0;
  top: 10px;
  height: 60%;
  width: 4px;
  background: linear-gradient(to bottom, #7b2cbf, #9d4edd);
  border-radius: 2px;
}

.featured-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: auto auto;
  gap: 25px;
}

.featured-card {
  position: relative;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
  transition: all 0.3s ease;
  height: 260px;
}

.featured-card.large {
  grid-column: 1 / 2;
  grid-row: 1 / 3;
  height: auto;
}

.featured-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.4);
}

.featured-img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /* Using background color instead of images for placeholders */
  background-color: rgba(90, 24, 154, 0.3);
}

.featured-img img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: all 0.5s ease;
  /* Hide images since we don't have them */
  opacity: 0;
}

.featured-card:hover .featured-img img {
  transform: scale(1.05);
  filter: brightness(0.7);
}

.featured-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to top, rgba(10, 4, 20, 0.9) 0%, rgba(10, 4, 20, 0.6) 50%, rgba(10, 4, 20, 0.3) 100%);
  z-index: 1;
}

.featured-content {
  position: relative;
  z-index: 2;
  padding: 25px;
  display: flex;
  flex-direction: column;
  height: 100%;
  justify-content: flex-end;
}

.featured-tag {
  display: inline-block;
  background-color: rgba(157, 78, 221, 0.8);
  color: white;
  padding: 5px 12px;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 500;
  margin-bottom: 15px;
  align-self: flex-start;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.featured-content h3 {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 10px;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.featured-card.large .featured-content h3 {
  font-size: 2rem;
}

.featured-content p {
  color: rgba(255, 255, 255, 0.8);
  margin-bottom: 20px;
  font-size: 1rem;
  line-height: 1.5;
  max-width: 90%;
}

.featured-btn {
  display: inline-block;
  background: rgba(157, 78, 221, 0.2);
  border: 1px solid rgba(157, 78, 221, 0.5);
  color: white;
  padding: 8px 18px;
  border-radius: 25px;
  text-decoration: none;
  font-weight: 500;
  font-size: 0.9rem;
  transition: all 0.3s ease;
  align-self: flex-start;
  backdrop-filter: blur(5px);
}

.featured-btn:hover {
  background: rgba(157, 78, 221, 0.8);
  transform: translateY(-2px);
}

/* Use different background colors for each featured card */
.featured-card:nth-child(1) .featured-img {
  background: linear-gradient(45deg, #7b2cbf, #9d4edd);
}

.featured-card:nth-child(2) .featured-img {
  background: linear-gradient(45deg, #5a189a, #7b2cbf);
}

.featured-card:nth-child(3) .featured-img {
  background: linear-gradient(45deg, #3c096c, #5a189a);
}

/* Responsive Styles */
@media (max-width: 1024px) {
  .categories-grid {
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  }
  
  .featured-grid {
    display: flex;
    flex-direction: column;
  }
  
  .featured-card {
    height: 300px;
  }
  
  .featured-card.large {
    height: 400px;
  }
}

@media (max-width: 768px) {
  .category-hero-banner {
    height: 35vh;
  }
  
  .hero-content h1 {
    font-size: 2.7rem;
  }
  
  .category-list-intro h2 {
    font-size: 1.8rem;
  }
  
  .categories-grid {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
  }
}

@media (max-width: 576px) {
  .hero-content h1 {
    font-size: 2.2rem;
  }
  
  .hero-content p {
    font-size: 1rem;
  }
  
  .category-list-intro h2 {
    font-size: 1.6rem;
  }
  
  .categories-grid {
    grid-template-columns: 1fr;
  }
  
  .category-icon {
    width: 70px;
    min-width: 70px;
    height: 70px;
    font-size: 1.7rem;
  }
  
  .category-content h3 {
    font-size: 1.2rem;
  }
  
  .category-content p {
    font-size: 0.85rem;
  }
  
  .featured-card.large .featured-content h3 {
    font-size: 1.6rem;
  }
  
  .featured-content p {
    font-size: 0.9rem;
  }
}

/* Add to your CategoryList.css */

/* Additional styling for featured cards with dynamic colors */
.featured-card {
  --featured-color: var(--primary-purple);
}

.featured-img {
  background: linear-gradient(45deg, var(--featured-color), transparent) !important;
}

.featured-btn {
  background: rgba(157, 78, 221, 0.2);
  border: 1px solid var(--featured-color, rgba(157, 78, 221, 0.5));
}

.featured-btn:hover {
  background: var(--featured-color, rgba(157, 78, 221, 0.8));
}

.featured-tag {
  background-color: var(--featured-color, rgba(157, 78, 221, 0.8));
}

/* Ensure proper spacing in featured grid */
.featured-grid {
  grid-template-columns: repeat(2, 1fr);
  gap: 25px;
}

.featured-card.large {
  grid-column: 1 / 2;
  grid-row: 1 / 3;
  height: auto;
}
--- END OF FILE netflix-clone/src/components/categories/CategoryList.css ---

--- START OF FILE netflix-clone/src/components/categories/CategoryList.jsx ---
import React from "react";
import { Link } from "react-router-dom";
import "./CategoryList.css";

const CategoryList = () => {
  // Category list with icons and descriptions
  const categories = [
    {
      id: 1,
      name: "Action",
      icon: "fa-bomb",
      desc: "High-energy films with thrilling sequences and dynamic characters",
      color: "#c2185b",
      count: 42,
    },
    {
      id: 2,
      name: "Comedy",
      icon: "fa-laugh",
      desc: "Lighthearted films designed to make you laugh and smile",
      color: "#00b0ff",
      count: 38,
    },
    {
      id: 3,
      name: "Drama",
      icon: "fa-theater-masks",
      desc: "Character-driven narratives that explore emotional themes",
      color: "#ff9800",
      count: 56,
    },
    {
      id: 4,
      name: "SciFi",
      icon: "fa-robot",
      desc: "Futuristic stories exploring advanced technology and space",
      color: "#00bfa5",
      count: 27,
    },
    {
      id: 5,
      name: "Romance",
      icon: "fa-heart",
      desc: "Stories centered around love relationships and emotional connections",
      color: "#e91e63",
      count: 34,
    },
    {
      id: 6,
      name: "Documentary",
      icon: "fa-film",
      desc: "Non-fiction films documenting real events and people",
      color: "#8bc34a",
      count: 15,
    },
    {
      id: 7,
      name: "Cartoon",
      icon: "fa-dragon",
      desc: "Animated films and shows for all ages",
      color: "#f44336",
      count: 29,
    },
    {
      id: 8,
      name: "Thriller",
      icon: "fa-skull",
      desc: "Suspenseful narratives that keep viewers on the edge of their seats",
      color: "#6200ea",
      count: 31,
    },
    {
      id: 9,
      name: "Crime",
      icon: "fa-fingerprint",
      desc: "Stories revolving around criminal activities and investigations",
      color: "#424242",
      count: 24,
    },
    {
      id: 10,
      name: "Adventure",
      icon: "fa-mountain",
      desc: "Exciting journeys and explorations of new worlds and experiences",
      color: "#ff6d00",
      count: 36,
    },
  ];

  // Featured collection data
  const featuredCollections = [
    {
      id: 1,
      name: "Best Action Movies of 2024",
      description:
        "Our handpicked selection of the most thrilling action films this year",
      category: "action",
      color: "#c2185b",
    },
    {
      id: 2,
      name: "Comedy Classics",
      description: "The funniest and most memorable comedy films of all time",
      category: "comedy",
      color: "#00b0ff",
    },
    {
      id: 3,
      name: "Award-Winning Dramas",
      description:
        "Critically acclaimed dramatic films that captured hearts worldwide",
      category: "drama",
      color: "#ff9800",
    },
  ];

  return (
    <div className="category-list-page">
      <div className="category-hero-banner">
        <div className="overlay"></div>
        <div className="hero-content">
          <h1>Categories</h1>
          <p>Explore our vast collection of movies and shows by genre</p>
        </div>
      </div>

      <div className="container">
        <div className="category-list-intro">
          <h2>Browse by Genre</h2>
          <p>
            Discover movies and shows tailored to your taste. From
            heart-pounding action to side-splitting comedy, we've categorized
            our content to help you find exactly what you're in the mood for.
          </p>
        </div>

        <div className="categories-grid">
          {categories.map((category) => (
            <Link
              to={`/category/${category.name.toLowerCase()}`}
              className="category-card"
              key={category.id}
              style={{ "--category-color": category.color }}
            >
              <div className="category-icon">
                <i className={`fas ${category.icon}`}></i>
              </div>
              <div className="category-content">
                <h3>{category.name}</h3>
                <p>{category.desc}</p>
                <div className="category-meta">
                  <span className="category-count">
                    {category.count} titles
                  </span>
                  <span className="category-explore">
                    Explore <i className="fas fa-chevron-right"></i>
                  </span>
                </div>
              </div>
            </Link>
          ))}
        </div>

        <div className="categories-featured">
          <h2>Featured Collections</h2>
          <div className="featured-grid">
            {featuredCollections.map((collection, index) => (
              <div
                key={collection.id}
                className={`featured-card ${index === 0 ? "large" : ""}`}
                style={{ "--featured-color": collection.color }}
              >
                <div
                  className="featured-img"
                  style={{
                    background: `linear-gradient(45deg, ${collection.color}99, ${collection.color}66)`,
                  }}
                >
                  <div className="featured-overlay"></div>
                </div>
                <div className="featured-content">
                  <span className="featured-tag">Collection</span>
                  <h3>{collection.name}</h3>
                  {index === 0 && <p>{collection.description}</p>}
                  <Link
                    to={`/category/${collection.category}`}
                    className="featured-btn"
                  >
                    View Collection
                  </Link>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CategoryList;

--- END OF FILE netflix-clone/src/components/categories/CategoryList.jsx ---

--- START OF FILE netflix-clone/src/components/contact/Contact.css ---
/* Contact.css */
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap");

:root {
  --primary-purple: #7b2cbf;
  --primary-purple-light: #9d4edd;
  --primary-purple-dark: #5a189a;
  --primary-gradient: linear-gradient(to right, #5a189a, #7b2cbf, #9d4edd);
  --white: #ffffff;
  --light-gray: #f8f9fa;
  --medium-gray: #e9ecef;
  --dark-gray: #495057;
  --text-dark: #212529;
  --header-height: 70px;
  --transition-speed: 0.3s;
  --box-shadow: 0 4px 12px rgba(90, 24, 154, 0.15);
  --glow-purple: 0 0 15px rgba(157, 78, 221, 0.5);
}

.contact-page {
  background-color: #0c0617;
  color: var(--white);
  font-family: "Poppins", sans-serif;
  padding-bottom: 60px;
  margin-top: var(--header-height);
}

/* Contact Header with Background */
.contact-header {
  position: relative;
  height: 240px;
  background: linear-gradient(rgba(12, 6, 23, 0.7), rgba(12, 6, 23, 0.8)), url('//contact-bg.png');
  background-size: cover;
  background-position: center;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.contact-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--primary-gradient);
  opacity: 0.3;
  z-index: 0;
}

.contact-header::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 4px;
  background: var(--primary-gradient);
  z-index: 1;
}

.contact-header-content {
  position: relative;
  z-index: 1;
}

.contact-header h1 {
  font-size: 42px;
  font-weight: 700;
  margin: 0 0 10px;
  letter-spacing: 1px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
  background: var(--primary-gradient);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}

.contact-header p {
  font-size: 18px;
  font-weight: 300;
  opacity: 0.9;
  margin: 0;
}

/* Main Contact Container */
.contact-container {
  max-width: 1200px;
  margin: 40px auto;
  display: grid;
  grid-template-columns: 1fr 1.5fr;
  gap: 40px;
  padding: 0 20px;
}

/* Contact Information Section */
.contact-info {
  background: rgba(28, 10, 47, 0.6);
  border-radius: 10px;
  padding: 30px;
  border: 1px solid rgba(157, 78, 221, 0.2);
  box-shadow: var(--box-shadow);
}

.contact-info-header h2 {
  font-size: 28px;
  font-weight: 600;
  margin: 0 0 15px;
  color: var(--primary-purple-light);
}

.contact-info-header p {
  font-size: 15px;
  line-height: 1.6;
  margin: 0 0 30px;
  opacity: 0.9;
}

.contact-methods {
  display: flex;
  flex-direction: column;
  gap: 25px;
  margin-bottom: 30px;
}

.contact-method {
  display: flex;
  align-items: flex-start;
}

.contact-icon {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: var(--primary-gradient);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 15px;
  box-shadow: var(--box-shadow);
  flex-shrink: 0;
}

.contact-icon i {
  font-size: 22px;
  color: var(--white);
}

.contact-details h3 {
  font-size: 18px;
  font-weight: 500;
  margin: 0 0 5px;
  color: var(--primary-purple-light);
}

.contact-details p {
  font-size: 14px;
  margin: 0;
  line-height: 1.5;
  opacity: 0.9;
}

.chat-button {
  background: var(--primary-gradient);
  color: var(--white);
  border: none;
  padding: 8px 15px;
  border-radius: 30px;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  margin-top: 10px;
  transition: all 0.3s ease;
  box-shadow: var(--box-shadow);
}

.chat-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 15px rgba(90, 24, 154, 0.25);
}

.social-media h3 {
  font-size: 18px;
  font-weight: 500;
  margin: 0 0 15px;
  color: var(--primary-purple-light);
}

.social-icons {
  display: flex;
  gap: 12px;
}

.social-icon {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: rgba(157, 78, 221, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--primary-purple-light);
  font-size: 18px;
  transition: all 0.3s ease;
  border: 1px solid rgba(157, 78, 221, 0.3);
}

.social-icon:hover {
  background: var(--primary-gradient);
  color: var(--white);
  transform: translateY(-3px);
  box-shadow: var(--glow-purple);
}

/* Contact Form Section */
.contact-form-container {
  background: rgba(28, 10, 47, 0.6);
  border-radius: 10px;
  padding: 30px;
  border: 1px solid rgba(157, 78, 221, 0.2);
  box-shadow: var(--box-shadow);
}

.contact-form-header h2 {
  font-size: 28px;
  font-weight: 600;
  margin: 0 0 15px;
  color: var(--primary-purple-light);
}

.contact-form-header p {
  font-size: 15px;
  line-height: 1.6;
  margin: 0 0 30px;
  opacity: 0.9;
}

.contact-form {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.form-group {
  margin-bottom: 5px;
}

.form-group:nth-child(5) {
  grid-column: span 2;
}

.form-group label {
  display: block;
  font-size: 14px;
  font-weight: 500;
  margin-bottom: 8px;
  color: var(--primary-purple-light);
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 12px 15px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(157, 78, 221, 0.3);
  border-radius: 8px;
  color: var(--white);
  font-family: "Poppins", sans-serif;
  font-size: 14px;
  transition: all 0.3s ease;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: var(--primary-purple-light);
  background-color: rgba(157, 78, 221, 0.1);
  box-shadow: 0 0 0 2px rgba(157, 78, 221, 0.2);
}

.form-group input::placeholder,
.form-group textarea::placeholder {
  color: rgba(255, 255, 255, 0.5);
}

.form-group input.error,
.form-group select.error,
.form-group textarea.error {
  border-color: #e74c3c;
}

.error-message {
  display: block;
  color: #e74c3c;
  font-size: 12px;
  margin-top: 5px;
}

.form-actions {
  grid-column: span 2;
  margin-top: 10px;
}

.submit-button {
  background: var(--primary-gradient);
  color: var(--white);
  border: none;
  padding: 14px 30px;
  border-radius: 30px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: var(--box-shadow);
  width: 100%;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.submit-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 15px rgba(90, 24, 154, 0.3);
}

.form-note {
  grid-column: span 2;
  font-size: 13px;
  opacity: 0.7;
  margin-top: 20px;
  text-align: center;
}

.form-note i {
  margin-right: 5px;
  color: var(--primary-purple-light);
}

/* Form Submit Message */
.form-submit-message {
  display: flex;
  align-items: center;
  padding: 15px 20px;
  border-radius: 8px;
  margin-bottom: 25px;
  animation: fadeIn 0.5s ease;
}

.form-submit-message.success {
  background-color: rgba(46, 204, 113, 0.15);
  border: 1px solid rgba(46, 204, 113, 0.3);
}

.form-submit-message.error {
  background-color: rgba(231, 76, 60, 0.15);
  border: 1px solid rgba(231, 76, 60, 0.3);
}

.form-submit-message i {
  font-size: 20px;
  margin-right: 10px;
}

.form-submit-message.success i {
  color: #2ecc71;
}

.form-submit-message.error i {
  color: #e74c3c;
}

.form-submit-message p {
  margin: 0;
  font-size: 14px;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* FAQ Section */
.faq-section {
  max-width: 1200px;
  margin: 60px auto 20px;
  padding: 0 20px;
}

.faq-header {
  text-align: center;
  margin-bottom: 40px;
}

.faq-header h2 {
  font-size: 32px;
  font-weight: 600;
  margin: 0 0 10px;
  color: var(--primary-purple-light);
}

.faq-header p {
  font-size: 16px;
  opacity: 0.9;
  margin: 0;
}

.faq-items {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 25px;
}

.faq-item {
  background: rgba(28, 10, 47, 0.6);
  border-radius: 10px;
  padding: 25px;
  border: 1px solid rgba(157, 78, 221, 0.2);
  transition: all 0.3s ease;
}

.faq-item:hover {
  border-color: var(--primary-purple-light);
  box-shadow: var(--box-shadow);
  transform: translateY(-3px);
}

.faq-item h3 {
  font-size: 18px;
  font-weight: 500;
  margin: 0 0 12px;
  color: var(--primary-purple-light);
}

.faq-item p {
  font-size: 14px;
  line-height: 1.6;
  margin: 0;
  opacity: 0.9;
}

.faq-more {
  text-align: center;
  margin-top: 35px;
}

.faq-more a {
  color: var(--primary-purple-light);
  font-size: 16px;
  font-weight: 500;
  text-decoration: none;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;
}

.faq-more a i {
  margin-left: 5px;
  transition: transform 0.3s ease;
}

.faq-more a:hover {
  color: var(--white);
}

.faq-more a:hover i {
  transform: translateX(5px);
}

/* Responsive Styles */
@media (max-width: 992px) {
  .contact-container {
    grid-template-columns: 1fr;
  }
  
  .faq-items {
    grid-template-columns: 1fr;
  }
  
  .contact-header {
    height: 200px;
  }
  
  .contact-header h1 {
    font-size: 36px;
  }
}

@media (max-width: 768px) {
  .contact-form {
    grid-template-columns: 1fr;
  }
  
  .form-group:nth-child(5) {
    grid-column: span 1;
  }
  
  .form-actions {
    grid-column: span 1;
  }
  
  .form-note {
    grid-column: span 1;
  }
  
  .contact-header {
    height: 180px;
  }
  
  .contact-header h1 {
    font-size: 32px;
  }
  
  .contact-header p {
    font-size: 16px;
  }
}

@media (max-width: 480px) {
  .contact-methods {
    gap: 20px;
  }
  
  .contact-icon {
    width: 40px;
    height: 40px;
  }
  
  .contact-icon i {
    font-size: 18px;
  }
  
  .contact-details h3 {
    font-size: 16px;
  }
  
  .contact-details p {
    font-size: 13px;
  }
  
  .contact-header h1 {
    font-size: 28px;
  }
  
  .contact-header {
    height: 160px;
  }
  
  .social-icon {
    width: 35px;
    height: 35px;
    font-size: 16px;
  }
}
--- END OF FILE netflix-clone/src/components/contact/Contact.css ---

--- START OF FILE netflix-clone/src/components/contact/Contact.jsx ---
import React, { useState } from "react";
import "./Contact.css";

const Contact = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    subject: "",
    message: "",
    category: "feedback",
  });

  const [formErrors, setFormErrors] = useState({});
  const [submitStatus, setSubmitStatus] = useState({
    submitted: false,
    success: false,
    message: "",
  });

  const validateForm = () => {
    const errors = {};

    if (!formData.name.trim()) {
      errors.name = "Name is required";
    }

    if (!formData.email.trim()) {
      errors.email = "Email is required";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = "Please enter a valid email address";
    }

    if (!formData.subject.trim()) {
      errors.subject = "Subject is required";
    }

    if (!formData.message.trim()) {
      errors.message = "Message is required";
    } else if (formData.message.trim().length < 10) {
      errors.message = "Message must be at least 10 characters";
    }

    return errors;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });

    // Clear error for this field when user starts typing
    if (formErrors[name]) {
      setFormErrors({
        ...formErrors,
        [name]: "",
      });
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const errors = validateForm();

    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    // Simulate form submission
    setSubmitStatus({
      submitted: true,
      success: true,
      message:
        "Thank you for your message! Our team will get back to you shortly.",
    });

    // In a real application, you would send the data to your backend here
    console.log("Form submitted with data:", formData);

    // Reset form after successful submission
    setFormData({
      name: "",
      email: "",
      subject: "",
      message: "",
      category: "feedback",
    });

    // Reset submission status after 5 seconds
    setTimeout(() => {
      setSubmitStatus({
        submitted: false,
        success: false,
        message: "",
      });
    }, 5000);
  };

  return (
    <div className="contact-page">
      <div className="contact-header">
        <div className="contact-header-content">
          <h1>Contact Us</h1>
          <p>We're here to help and listen to your feedback</p>
        </div>
      </div>

      <div className="contact-container">
        <div className="contact-info">
          <div className="contact-info-header">
            <h2>Get in Touch</h2>
            <p>
              Have questions or feedback? Our team is ready to assist you with
              any inquiries about our streaming service.
            </p>
          </div>

          <div className="contact-methods">
            <div className="contact-method">
              <div className="contact-icon">
                <i className="fas fa-envelope"></i>
              </div>
              <div className="contact-details">
                <h3>Email Us</h3>
                <p>support@purplestream.com</p>
                <p>For business inquiries: business@purplestream.com</p>
              </div>
            </div>

            <div className="contact-method">
              <div className="contact-icon">
                <i className="fas fa-phone-alt"></i>
              </div>
              <div className="contact-details">
                <h3>Call Us</h3>
                <p>+1 (555) 123-4567</p>
                <p>Mon-Fri: 9:00 AM - 8:00 PM</p>
              </div>
            </div>

            <div className="contact-method">
              <div className="contact-icon">
                <i className="fas fa-comments"></i>
              </div>
              <div className="contact-details">
                <h3>Live Chat</h3>
                <p>Available 24/7</p>
                <button className="chat-button">Start Chat</button>
              </div>
            </div>
          </div>

          <div className="social-media">
            <h3>Follow Us</h3>
            <div className="social-icons">
              <a href="#" className="social-icon">
                <i className="fab fa-facebook-f"></i>
              </a>
              <a href="#" className="social-icon">
                <i className="fab fa-twitter"></i>
              </a>
              <a href="#" className="social-icon">
                <i className="fab fa-instagram"></i>
              </a>
              <a href="#" className="social-icon">
                <i className="fab fa-youtube"></i>
              </a>
              <a href="#" className="social-icon">
                <i className="fab fa-discord"></i>
              </a>
            </div>
          </div>
        </div>

        <div className="contact-form-container">
          <div className="contact-form-header">
            <h2>Send Us a Message</h2>
            <p>We'd love to hear from you. Please fill out the form below.</p>
          </div>

          {submitStatus.submitted && (
            <div
              className={`form-submit-message ${
                submitStatus.success ? "success" : "error"
              }`}
            >
              <i
                className={
                  submitStatus.success
                    ? "fas fa-check-circle"
                    : "fas fa-exclamation-circle"
                }
              ></i>
              <p>{submitStatus.message}</p>
            </div>
          )}

          <form className="contact-form" onSubmit={handleSubmit}>
            <div className="form-group">
              <label htmlFor="name">Full Name</label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                placeholder="Your Name"
                className={formErrors.name ? "error" : ""}
              />
              {formErrors.name && (
                <span className="error-message">{formErrors.name}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="email">Email Address</label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                placeholder="your.email@example.com"
                className={formErrors.email ? "error" : ""}
              />
              {formErrors.email && (
                <span className="error-message">{formErrors.email}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="category">Category</label>
              <select
                id="category"
                name="category"
                value={formData.category}
                onChange={handleChange}
              >
                <option value="feedback">General Feedback</option>
                <option value="technical">Technical Support</option>
                <option value="billing">Billing Issues</option>
                <option value="content">Content Request</option>
                <option value="complaint">Complaint</option>
                <option value="other">Other</option>
              </select>
            </div>

            <div className="form-group">
              <label htmlFor="subject">Subject</label>
              <input
                type="text"
                id="subject"
                name="subject"
                value={formData.subject}
                onChange={handleChange}
                placeholder="How can we help you?"
                className={formErrors.subject ? "error" : ""}
              />
              {formErrors.subject && (
                <span className="error-message">{formErrors.subject}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="message">Your Message</label>
              <textarea
                id="message"
                name="message"
                value={formData.message}
                onChange={handleChange}
                placeholder="Please provide as much detail as possible..."
                rows="6"
                className={formErrors.message ? "error" : ""}
              ></textarea>
              {formErrors.message && (
                <span className="error-message">{formErrors.message}</span>
              )}
            </div>

            <div className="form-actions">
              <button type="submit" className="submit-button">
                Send Message
              </button>
            </div>
          </form>

          <div className="form-note">
            <p>
              <i className="fas fa-lock"></i> Your information is secure and
              will only be used to respond to your inquiry.
            </p>
          </div>
        </div>
      </div>

      <div className="faq-section">
        <div className="faq-header">
          <h2>Frequently Asked Questions</h2>
          <p>Find quick answers to common questions</p>
        </div>

        <div className="faq-items">
          <div className="faq-item">
            <h3>How can I reset my password?</h3>
            <p>
              You can reset your password by clicking on the "Forgot Password"
              link on the login page, or through your Account settings.
            </p>
          </div>

          <div className="faq-item">
            <h3>Why am I experiencing buffering issues?</h3>
            <p>
              Buffering can occur due to internet connection problems, device
              limitations, or high traffic on our servers. Try refreshing the
              page or checking your internet connection.
            </p>
          </div>

          <div className="faq-item">
            <h3>How do I update my payment method?</h3>
            <p>
              You can update your payment information in the "Account" section
              under "Billing Information".
            </p>
          </div>

          <div className="faq-item">
            <h3>Can I download content to watch offline?</h3>
            <p>
              Yes! Premium and Plus subscribers can download content for offline
              viewing on mobile devices through our app.
            </p>
          </div>
        </div>

        <div className="faq-more">
          <a href="/faq">
            View all FAQs <i className="fas fa-arrow-right"></i>
          </a>
        </div>
      </div>
    </div>
  );
};

export default Contact;

--- END OF FILE netflix-clone/src/components/contact/Contact.jsx ---

--- START OF FILE netflix-clone/src/components/faq/FAQ.css ---
.faq-hero {
  background: linear-gradient(135deg, var(--purple-dark) 0%, var(--purple-main) 100%);
  padding: 100px 0 60px;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.faq-hero::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="none"><path d="M0,0 L100,0 L100,100 Z" fill="rgba(255,255,255,0.05)"/></svg>');
  background-size: cover;
}

.faq-hero-content {
  position: relative;
  z-index: 2;
}

.faq-hero h1 {
  color: var(--white);
  font-size: 48px;
  font-weight: 700;
  margin-bottom: 20px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
}

.faq-hero p {
  color: var(--white);
  font-size: 18px;
  max-width: 700px;
  margin: 0 auto;
  opacity: 0.9;
}

.faq-content {
  background-color: #1a0733 !important;
  padding: 60px 0;
}

.faq-search {
  margin-bottom: 40px;
}

.search-container {
  max-width: 800px;
  margin: 0 auto;
  position: relative;
  display: flex;
  align-items: center;
  background: rgba(255, 255, 255, 0.1);
  border-radius: var(--radius-large);
  padding: 0 20px;
  transition: all 0.3s ease;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.search-container:focus-within {
  box-shadow: 0 0 0 3px rgba(156, 39, 176, 0.3);
  background: rgba(255, 255, 255, 0.15);
  border-color: var(--purple-light);
}

.search-icon {
  color: var(--purple-lightest);
  font-size: 18px;
  margin-right: 15px;
}

.search-input {
  flex: 1;
  background: transparent;
  border: none;
  color: var(--white);
  font-size: 16px;
  padding: 16px 0;
  outline: none;
}

.search-input::placeholder {
  color: rgba(255, 255, 255, 0.6);
}

.search-button {
  margin-left: 10px;
  padding: 10px 25px;
  border-radius: var(--radius-medium);
  box-shadow: none;
}

.faq-navigation {
  margin-bottom: 50px;
  text-align: center;
}

.faq-navigation h2 {
  color: var(--white);
  font-size: 24px;
  margin-bottom: 20px;
  font-weight: 500;
}

.category-tabs {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 15px;
  margin-top: 20px;
}

.category-tab {
  background: rgba(255, 255, 255, 0.1);
  color: var(--white);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: var(--radius-large);
  padding: 12px 25px;
  font-size: 15px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: none;
}

.category-tab:hover {
  background: rgba(156, 39, 176, 0.5);
  transform: translateY(-3px);
  border-color: var(--purple-light);
}

.category-tab.active {
  background: var(--gradient-main);
  border-color: transparent;
}

.faq-wrapper {
  max-width: 900px;
  margin: 0 auto;
}

.faq-category {
  margin-bottom: 50px;
}

.faq-category h2 {
  color: var(--purple-lightest);
  font-size: 28px;
  font-weight: 600;
  margin-bottom: 30px;
  position: relative;
  padding-bottom: 15px;
}

.faq-category h2::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 60px;
  height: 3px;
  background: linear-gradient(to right, var(--purple-main), var(--purple-lightest));
  border-radius: 2px;
}

.accordion {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.accordion-item {
  background: rgba(45, 8, 84, 0.7) !important;
  border-radius: var(--radius-medium);
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
  border: 1px solid rgba(255, 255, 255, 0.05);
}

.accordion-item:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
}

.accordion-item.active {
  background: rgba(156, 39, 176, 0.2);
  border-color: rgba(156, 39, 176, 0.3);
}

.accordion-header {
  padding: 20px 25px;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: all 0.3s ease;
}

.accordion-header h3 {
  color: var(--white);
  font-size: 18px;
  font-weight: 500;
  margin: 0;
  transition: all 0.3s ease;
}

.accordion-item.active .accordion-header h3 {
  color: var(--purple-lightest);
}

.accordion-icon {
  background: rgba(255, 255, 255, 0.1);
  width: 30px;
  height: 30px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.accordion-icon i {
  color: var(--white);
  font-size: 12px;
  transition: all 0.3s ease;
}

.accordion-item.active .accordion-icon {
  background: var(--purple-light);
  transform: rotate(180deg);
}

.accordion-content {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.6s ease;
  padding: 0 25px;
  opacity: 0;
}

.accordion-content.show {
  max-height: 1000px; /* Increased to handle longer content */
  padding-bottom: 25px;
  opacity: 1;
  transition: max-height 0.6s ease, opacity 0.3s ease 0.2s;
}

.accordion-content p {
  color: rgba(255, 255, 255, 0.8) !important;
  font-size: 16px;
  line-height: 1.8;
  margin: 0;
}

.contact-support {
  text-align: center;
  margin-top: 70px;
  padding: 50px 30px;
  background: rgba(45, 8, 84, 0.7) !important;
  border-radius: var(--radius-medium);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.contact-support h2 {
  color: var(--white);
  font-size: 28px;
  font-weight: 600;
  margin-bottom: 15px;
}

.contact-support p {
  color: rgba(255, 255, 255, 0.8);
  max-width: 600px;
  margin: 0 auto 40px;
  font-size: 16px;
}

.support-options {
  display: flex;
  justify-content: center;
  gap: 30px;
  flex-wrap: wrap;
}

.support-option {
  background: rgba(255, 255, 255, 0.05);
  border-radius: var(--radius-medium);
  padding: 30px 20px;
  width: 220px;
  text-align: center;
  transition: all 0.3s ease;
  border: 1px solid rgba(255, 255, 255, 0.05);
  cursor: pointer;
}

.support-option:hover {
  transform: translateY(-10px);
  background: rgba(156, 39, 176, 0.2);
  border-color: var(--purple-light);
}

.support-icon {
  width: 60px;
  height: 60px;
  background: var(--gradient-main);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 20px;
  box-shadow: 0 5px 15px rgba(156, 39, 176, 0.3);
}

.support-icon i {
  color: var(--white);
  font-size: 24px;
}

.support-option h3 {
  color: var(--white);
  font-size: 18px;
  font-weight: 500;
  margin-bottom: 10px;
}

.support-option p {
  color: rgba(255, 255, 255, 0.7);
  font-size: 14px;
  margin: 0;
}

/* Animation classes */
.section-animated {
  opacity: 0;
  transform: translateY(30px);
  transition: var(--transition-slow);
}

.section-visible {
  opacity: 1;
  transform: translateY(0);
}

/* Responsive styles */
@media only screen and (max-width: 1024px) {
  .faq-wrapper {
    max-width: 90%;
  }
  
  .faq-hero h1 {
    font-size: 40px;
  }
}

@media only screen and (max-width: 768px) {
  .faq-hero {
    padding: 80px 0 40px;
  }
  
  .faq-hero h1 {
    font-size: 36px;
  }
  
  .search-container {
    flex-direction: column;
    padding: 15px;
  }
  
  .search-icon {
    display: none;
  }
  
  .search-input {
    width: 100%;
    text-align: center;
    padding: 10px 0;
  }
  
  .search-button {
    width: 100%;
    margin: 10px 0 0;
  }
  
  .category-tab {
    font-size: 14px;
    padding: 10px 20px;
  }
  
  .accordion-header {
    padding: 15px 20px;
  }
  
  .accordion-header h3 {
    font-size: 16px;
  }
  
  .accordion-content {
    padding: 0 20px;
  }
  
  .accordion-content.show {
    padding-bottom: 20px;
  }
  
  .support-options {
    gap: 20px;
  }
  
  .support-option {
    width: 100%;
    max-width: 220px;
  }
}

@media only screen and (max-width: 576px) {
  .faq-hero {
    padding: 60px 0 30px;
  }
  
  .faq-hero h1 {
    font-size: 30px;
  }
  
  .faq-hero p {
    font-size: 16px;
  }
  
  .faq-category h2 {
    font-size: 24px;
  }
  
  .accordion-header h3 {
    font-size: 15px;
  }
  
  .accordion-content p {
    font-size: 14px;
  }
  
  .contact-support {
    padding: 30px 20px;
  }
  
  .contact-support h2 {
    font-size: 24px;
  }
  
  .support-options {
    flex-direction: column;
    align-items: center;
  }
  
  .support-option {
    width: 100%;
    max-width: 100%;
  }
}
--- END OF FILE netflix-clone/src/components/faq/FAQ.css ---

--- START OF FILE netflix-clone/src/components/faq/FAQ.jsx ---
import React, { useEffect, useState } from "react";
import "./FAQ.css";

const FAQ = () => {
  const [activeIndex, setActiveIndex] = useState(null);
  const [activeCategory, setActiveCategory] = useState(null);

  useEffect(() => {
    window.scrollTo(0, 0);

    // Animation for section visibility
    const sections = document.querySelectorAll(".section-animated");

    // First make sections visible with a small delay for initial rendering
    setTimeout(() => {
      sections.forEach((section, index) => {
        setTimeout(() => {
          section.classList.add("section-visible");
        }, index * 100); // Stagger the animations
      });
    }, 300);

    // Also use IntersectionObserver for scrolling animations
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("section-visible");
          }
        });
      },
      { threshold: 0.1 }
    );

    sections.forEach((section) => {
      observer.observe(section);
    });

    return () => {
      sections.forEach((section) => {
        observer.unobserve(section);
      });
    };
  }, []);

  const toggleAccordion = (index) => {
    // Close any open accordion first for smoother transition
    if (activeIndex !== null && activeIndex !== index) {
      setActiveIndex(null);
      // Small timeout to allow for closing animation before opening the new one
      setTimeout(() => {
        setActiveIndex(index);
      }, 100);
    } else {
      setActiveIndex(activeIndex === index ? null : index);
    }
  };

  const faqData = [
    {
      category: "Subscription & Billing",
      questions: [
        {
          question: "What subscription plans do you offer?",
          answer:
            "We offer three subscription tiers: Basic (SD streaming on 1 device), Standard (HD streaming on 2 devices), and Premium (4K streaming on up to 4 devices simultaneously). Visit our Pricing page for current rates and special offers.",
        },
        {
          question: "How will I be billed?",
          answer:
            "Your subscription fee will be charged to your selected payment method on the same day each month. You can view your billing date and payment history in your Account settings.",
        },
        {
          question: "Can I cancel my subscription anytime?",
          answer:
            "Yes! You can cancel your subscription at any time through your Account settings. Your access will continue until the end of your current billing period, and you won't be charged again.",
        },
        {
          question: "Do you offer a free trial?",
          answer:
            "Yes, new members can enjoy a 14-day free trial. You'll need to provide payment details when signing up, but you won't be charged unless you continue after the trial period.",
        },
      ],
    },
    {
      category: "Streaming & Content",
      questions: [
        {
          question: "What devices can I watch on?",
          answer:
            "You can stream our content on smart TVs, game consoles, streaming media players (like Roku, Apple TV, and Chromecast), smartphones, tablets, computers, and laptops with a compatible browser.",
        },
        {
          question: "Can I download movies to watch offline?",
          answer:
            "Yes, with our Standard and Premium plans, you can download select movies and shows to watch offline on the mobile app. Look for the download icon on titles that support this feature.",
        },
        {
          question: "How often do you add new movies?",
          answer:
            "We update our library weekly with new releases, classics, and exclusive content. Follow our social media channels for announcements about upcoming titles.",
        },
        {
          question: "What video quality do you offer?",
          answer:
            "Depending on your subscription plan and internet connection, you can stream in SD (480p), HD (720p and 1080p), and 4K Ultra HD with HDR. You can adjust quality settings in your account preferences.",
        },
      ],
    },
    {
      category: "Account Management",
      questions: [
        {
          question: "How do I reset my password?",
          answer:
            "Click the 'Forgot Password' link on the login page, enter your email address, and follow the instructions sent to your email to create a new password.",
        },
        {
          question: "Can I share my account with family?",
          answer:
            "Yes, our Standard and Premium plans allow multiple simultaneous streams and user profiles. Each profile gets personalized recommendations and viewing history, but all profiles share the same account credentials.",
        },
        {
          question: "How do I update my payment information?",
          answer:
            "Go to Account > Billing Details to update your payment method, billing address, or other payment information.",
        },
        {
          question: "Can I change my email address?",
          answer:
            "Yes, you can update your email address in Account > Personal Information. For security, you'll need to verify the change through a confirmation link sent to your new email.",
        },
      ],
    },
    {
      category: "Technical Support",
      questions: [
        {
          question: "What internet speed do I need for streaming?",
          answer:
            "We recommend at least 5 Mbps for HD streaming and 25 Mbps for 4K streaming. You can check your connection speed in the app settings or through our website.",
        },
        {
          question: "What should I do if I'm experiencing buffering?",
          answer:
            "First, check your internet connection speed. Try closing other applications using bandwidth, connect to a wired network instead of Wi-Fi if possible, or lower the video quality in your settings. If problems persist, try restarting your device or router.",
        },
        {
          question: "The app is crashing. What should I do?",
          answer:
            "Make sure your app is updated to the latest version. Try closing and reopening the app, or restart your device. If the issue continues, try uninstalling and reinstalling the app.",
        },
        {
          question: "How do I enable or disable subtitles?",
          answer:
            "While watching a video, click or tap on the screen and select the subtitle icon. You can choose from available languages or turn subtitles off. You can also set default subtitle preferences in your account settings.",
        },
      ],
    },
    {
      category: "Content & Recommendations",
      questions: [
        {
          question: "How does your recommendation system work?",
          answer:
            "Our recommendation system analyzes your viewing history, ratings, searches, and preferences to suggest content you might enjoy. The more you watch and interact with the platform, the more personalized your recommendations become.",
        },
        {
          question: "Can I request specific movies to be added?",
          answer:
            "Yes! We welcome your suggestions. You can submit content requests through the 'Request a Title' feature in the app or website, or contact our Customer Support team.",
        },
        {
          question: "How do I rate movies and shows?",
          answer:
            "After watching content, you can rate it by selecting the star rating on the title's details page. Your ratings help us improve your recommendations.",
        },
        {
          question: "How do I add titles to My List?",
          answer:
            "Click or tap the '+' button on any title card or details page to add it to your list. You can access your list anytime from the main navigation menu.",
        },
      ],
    },
  ];

  return (
    <>
      <section className="faq-hero">
        <div className="container">
          <div className="faq-hero-content">
            <h1>Frequently Asked Questions</h1>
            <p>Find answers to common questions about our streaming service</p>
          </div>
        </div>
      </section>

      <section className="faq-content">
        <div className="container">
          <div className="faq-search section-animated">
            <div className="search-container">
              <i className="fas fa-search search-icon"></i>
              <input
                type="text"
                placeholder="Search frequently asked questions..."
                className="search-input"
              />
              <button className="search-button">Search</button>
            </div>
          </div>

          <div className="faq-navigation section-animated">
            <h2>Browse by Category</h2>
            <div className="category-tabs">
              <button
                className={`category-tab ${
                  activeCategory === null ? "active" : ""
                }`}
                onClick={() => setActiveCategory(null)}
              >
                All Categories
              </button>
              {faqData.map((category, index) => (
                <button
                  key={index}
                  className={`category-tab ${
                    activeCategory === index ? "active" : ""
                  }`}
                  onClick={() => setActiveCategory(index)}
                >
                  {category.category}
                </button>
              ))}
            </div>
          </div>

          <div className="faq-wrapper">
            {faqData
              .filter(
                (_, categoryIndex) =>
                  activeCategory === null || activeCategory === categoryIndex
              )
              .map((category, categoryIndex) => {
                // Adjust the categoryIndex to match the original array when filtering
                const originalIndex =
                  activeCategory === null ? categoryIndex : activeCategory;

                return (
                  <div
                    key={originalIndex}
                    className="faq-category section-animated"
                  >
                    <h2>{category.category}</h2>
                    <div className="accordion">
                      {category.questions.map((item, questionIndex) => (
                        <div
                          key={questionIndex}
                          className={`accordion-item ${
                            activeIndex === `${originalIndex}-${questionIndex}`
                              ? "active"
                              : ""
                          }`}
                        >
                          <div
                            className="accordion-header"
                            onClick={() =>
                              toggleAccordion(
                                `${originalIndex}-${questionIndex}`
                              )
                            }
                          >
                            <h3>{item.question}</h3>
                            <div className="accordion-icon">
                              <i
                                className={`fas ${
                                  activeIndex ===
                                  `${originalIndex}-${questionIndex}`
                                    ? "fa-minus"
                                    : "fa-plus"
                                }`}
                              ></i>
                            </div>
                          </div>
                          <div
                            className={`accordion-content ${
                              activeIndex ===
                              `${originalIndex}-${questionIndex}`
                                ? "show"
                                : ""
                            }`}
                          >
                            <p>{item.answer}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                );
              })}
          </div>

          <div className="contact-support section-animated">
            <h2>Still Have Questions?</h2>
            <p>
              Our customer support team is here to help with any questions not
              answered here.
            </p>
            <div className="support-options">
              <a href="/contact" className="support-option">
                <div className="support-icon">
                  <i className="fas fa-envelope"></i>
                </div>
                <h3>Email Support</h3>
                <p>Get a response within 24 hours</p>
              </a>
              <div className="support-option">
                <div className="support-icon">
                  <i className="fas fa-comments"></i>
                </div>
                <h3>Live Chat</h3>
                <p>Available 9am-10pm daily</p>
              </div>
              <div className="support-option">
                <div className="support-icon">
                  <i className="fas fa-phone-alt"></i>
                </div>
                <h3>Phone Support</h3>
                <p>Call us at 1-800-MOVIES</p>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export default FAQ;

--- END OF FILE netflix-clone/src/components/faq/FAQ.jsx ---

--- START OF FILE netflix-clone/src/components/footer/Footer.jsx ---
import React from "react";
import "./footer.css";

export const Footer = () => {
  return (
    <>
      <footer className="site-footer">
        <div className="container">
          <div className="footer-content">
            <div className="footer-brand">
              <h3>By Rustemzade</h3>
              <p>Premium viewing experience with the best movies and series.</p>
            </div>

            <div className="footer-links">
              <div className="footer-links-column">
                <h4>Explore</h4>
                <ul>
                  <li>
                    <a href="/">Home</a>
                  </li>
                  <li>
                    <a href="/movies">Movies</a>
                  </li>
                  <li>
                    <a href="/series">TV Shows</a>
                  </li>
                  <li>
                    <a href="/categories">Categories</a>
                  </li>
                </ul>
              </div>

              <div className="footer-links-column">
                <h4>Help</h4>
                <ul>
                  <li>
                    <a href="/account">My Account</a>
                  </li>
                  <li>
                    <a href="/faq">FAQ</a>
                  </li>
                  <li>
                    <a href="/contact">Contact Us</a>
                  </li>
                </ul>
              </div>

              <div className="footer-links-column">
                <h4>Legal</h4>
                <ul>
                  <li>
                    <a href="/privacy">Privacy Policy</a>
                  </li>
                </ul>
              </div>
            </div>

            <div className="app-download">
              <h4>Download Our App</h4>
              <div className="store-buttons">
                <a href="#" className="store-button app-store">
                  <i className="fab fa-apple"></i>
                  <div className="store-button-text">
                    <span className="small-text">Download on the</span>
                    <span className="big-text">App Store</span>
                  </div>
                </a>
                <a href="#" className="store-button play-store">
                  <i className="fab fa-google-play"></i>
                  <div className="store-button-text">
                    <span className="small-text">Get it on</span>
                    <span className="big-text">Google Play</span>
                  </div>
                </a>
              </div>
            </div>
          </div>

          <div className="social-and-copyright">
            <div className="social-links">
              <a href="#" aria-label="Facebook">
                <i className="fab fa-facebook-f"></i>
              </a>
              <a href="#" aria-label="Twitter">
                <i className="fab fa-twitter"></i>
              </a>
              <a href="#" aria-label="Instagram">
                <i className="fab fa-instagram"></i>
              </a>
              <a href="#" aria-label="YouTube">
                <i className="fab fa-youtube"></i>
              </a>
            </div>

            <div className="copyright">
              <p>
                &copy; 2025 By Rustemzade. All rights reserved. All videos and
                shows on this platform are trademarks of, and all related images
                and content are the property of, PurpleFlix Inc.
              </p>
            </div>
          </div>
        </div>
      </footer>
    </>
  );
};

--- END OF FILE netflix-clone/src/components/footer/Footer.jsx ---

--- START OF FILE netflix-clone/src/components/footer/footer.css ---
.site-footer {
  background: linear-gradient(to right, #4a148c, #7b1fa2);
  color: #ffffff;
  padding: 60px 0 30px;
  margin-top: 80px;
  position: relative;
}

.site-footer::before {
  content: "";
  position: absolute;
  top: -20px;
  left: 0;
  right: 0;
  height: 20px;
  background: linear-gradient(135deg, transparent 20px, #4a148c 0),
              linear-gradient(225deg, transparent 20px, #4a148c 0);
  background-size: 50% 100%;
  background-repeat: no-repeat;
  background-position: top left, top right;
}

.footer-content {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  margin-bottom: 40px;
}

.footer-brand {
  flex: 0 0 25%;
  margin-bottom: 30px;
}

.footer-brand h3 {
  font-size: 28px;
  margin-bottom: 15px;
  font-weight: 700;
  color: #ffffff;
  position: relative;
  display: inline-block;
}

.footer-brand h3::after {
  content: "";
  position: absolute;
  bottom: -8px;
  left: 0;
  width: 40px;
  height: 3px;
  background-color: #e1bee7;
  border-radius: 2px;
}

.footer-brand p {
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.6;
  font-size: 15px;
}

.footer-links {
  flex: 0 0 45%;
  display: flex;
  justify-content: space-between;
}

.footer-links-column {
  flex: 0 0 30%;
}

.footer-links-column h4 {
  color: #ffffff;
  font-size: 18px;
  margin-bottom: 20px;
  position: relative;
  padding-bottom: 10px;
  font-weight: 600;
}

.footer-links-column h4::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 30px;
  height: 2px;
  background-color: #e1bee7;
}

.footer-links-column ul li {
  margin-bottom: 12px;
}

.footer-links-column ul li a {
  color: rgba(255, 255, 255, 0.8);
  transition: all 0.3s ease;
  font-size: 15px;
}

.footer-links-column ul li a:hover {
  color: #ffffff;
  padding-left: 5px;
  text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
}

.app-download {
  flex: 0 0 25%;
}

.app-download h4 {
  color: #ffffff;
  font-size: 18px;
  margin-bottom: 20px;
  position: relative;
  padding-bottom: 10px;
  font-weight: 600;
}

.app-download h4::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 30px;
  height: 2px;
  background-color: #e1bee7;
}

.store-buttons {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.store-button {
  display: flex;
  align-items: center;
  background-color: rgba(255, 255, 255, 0.15);
  border-radius: 8px;
  padding: 10px 15px;
  transition: all 0.3s ease;
}

.store-button:hover {
  background-color: rgba(255, 255, 255, 0.25);
  transform: translateY(-3px);
}

.store-button i {
  font-size: 24px;
  margin-right: 12px;
  color: #ffffff;
}

.store-button-text {
  display: flex;
  flex-direction: column;
}

.store-button-text .small-text {
  font-size: 11px;
  color: rgba(255, 255, 255, 0.8);
}

.store-button-text .big-text {
  font-size: 16px;
  font-weight: 600;
  color: #ffffff;
}

.social-and-copyright {
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  padding-top: 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.social-links {
  display: flex;
  justify-content: center;
  gap: 15px;
  margin-bottom: 20px;
}

.social-links a {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.1);
  color: #ffffff;
  transition: all 0.3s ease;
}

.social-links a:hover {
  background-color: #ffffff;
  color: #7b1fa2;
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.copyright {
  text-align: center;
  color: rgba(255, 255, 255, 0.7);
  font-size: 13px;
  max-width: 800px;
  margin: 0 auto;
  line-height: 1.6;
}

/* Responsive design */
@media only screen and (max-width: 1024px) {
  .footer-brand,
  .footer-links,
  .app-download {
    flex: 0 0 100%;
  }
  
  .footer-links {
    margin: 30px 0;
  }
}

@media only screen and (max-width: 768px) {
  .site-footer {
    padding: 40px 0 20px;
  }
  
  .footer-content {
    flex-direction: column;
  }
  
  .footer-links {
    flex-wrap: wrap;
  }
  
  .footer-links-column {
    flex: 0 0 100%;
    margin-bottom: 30px;
  }
  
  .store-buttons {
    flex-direction: row;
    gap: 10px;
  }
  
  .store-button {
    flex: 1;
  }
  
  .footer-brand h3 {
    font-size: 24px;
  }
}

@media only screen and (max-width: 576px) {
  .site-footer {
    padding: 30px 0 20px;
  }
  
  .store-buttons {
    flex-direction: column;
  }
  
  .social-links {
    flex-wrap: wrap;
    gap: 10px;
  }
  
  .social-links a {
    width: 35px;
    height: 35px;
    font-size: 14px;
  }
  
  .copyright {
    font-size: 12px;
  }
}
--- END OF FILE netflix-clone/src/components/footer/footer.css ---

--- START OF FILE netflix-clone/src/components/header/Header.jsx ---
import React, { useState, useEffect, useRef } from "react";
import { Link, useNavigate, useLocation } from "react-router-dom";
import "./header.css";
import {
  homeData,
  trending,
  latest,
  upcome,
  recommended,
  documentaries,
  animation,
} from "../../dummyData";

export const Header = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const searchInputRef = useRef(null);
  const notificationRef = useRef(null);

  const [menuOpen, setMenuOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const [searchActive, setSearchActive] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [showResults, setShowResults] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const [noSearchResults, setNoSearchResults] = useState(false);

  // Tüm veri kaynakları
  const allSources = {
    homeData,
    trending,
    latest,
    upcome,
    recommended,
    documentaries,
    animation,
  };

  // Kesin kaynak tespit fonksiyonu
  const getExactSource = (item) => {
    for (const [sourceName, sourceItems] of Object.entries(allSources)) {
      // İsim ve ID eşleşmesi
      const found = sourceItems.find(
        (i) => i.id === item.id && i.name === item.name
      );
      if (found) return sourceName;
    }
    // Sadece ID eşleşmesi
    for (const [sourceName, sourceItems] of Object.entries(allSources)) {
      if (sourceItems.some((i) => i.id === item.id)) return sourceName;
    }
    return "homeData"; // Varsayılan
  };

  // Bildirimler için örnek veri
  const [notifications, setNotifications] = useState([
    {
      id: 1,
      type: "new_content",
      title: "New Release: Inception 2",
      message: "The long-awaited sequel is now streaming!",
      time: "Just now",
      read: false,
      image: "/images/covers/inception2.jpg",
    },
    {
      id: 2,
      type: "recommendation",
      title: "Recommended for you",
      message: "Based on your watch history: The Matrix Resurrections",
      time: "2 hours ago",
      read: false,
      image: "/images/covers/matrix.jpg",
    },
    {
      id: 3,
      type: "account",
      title: "Account Update",
      message: "Your subscription will renew in 3 days",
      time: "Yesterday",
      read: true,
      image: null,
    },
  ]);

  // Tüm filmleri ve kaynak bilgilerini birleştir
  const allMovies = [
    ...homeData.map((item) => ({ ...item, source: "homeData" })),
    ...trending.map((item) => ({ ...item, source: "trending" })),
    ...latest.map((item) => ({ ...item, source: "latest" })),
    ...upcome.map((item) => ({ ...item, source: "upcome" })),
    ...recommended.map((item) => ({ ...item, source: "recommended" })),
    ...documentaries.map((item) => ({ ...item, source: "documentaries" })),
    ...animation.map((item) => ({ ...item, source: "animation" })),
  ];

  // Check if we're on the home page
  const isHomePage = location.pathname === "/";

  // Handle scroll effect for transparent to solid header
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 50) {
        setScrolled(true);
      } else {
        setScrolled(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  // Focus search input when search becomes active
  useEffect(() => {
    if (searchActive && searchInputRef.current) {
      searchInputRef.current.focus();
    }
  }, [searchActive]);

  // Close mobile menu when route changes
  useEffect(() => {
    setMenuOpen(false);
  }, [location.pathname]);

  // Check if a menu item is active
  const isActive = (path) => {
    if (path !== "/" && location.pathname.startsWith(path)) return true;
    return false;
  };

  // Categories for dropdown menu
  const categories = [
    { name: "Action", icon: "fa-bomb" },
    { name: "Comedy", icon: "fa-laugh" },
    { name: "Drama", icon: "fa-theater-masks" },
    { name: "SciFi", icon: "fa-robot" },
    { name: "Romance", icon: "fa-heart" },
    { name: "Documentary", icon: "fa-film" },
    { name: "Cartoon", icon: "fa-dragon" },
    { name: "Thriller", icon: "fa-skull" },
    { name: "Crime", icon: "fa-fingerprint" },
    { name: "Adventure", icon: "fa-mountain" },
  ];

  // Handle search functionality
  const handleSearch = (e) => {
    const query = e.target.value;
    setSearchQuery(query);

    if (query.trim() === "") {
      setSearchResults([]);
      setShowResults(false);
      setNoSearchResults(false);
      return;
    }

    // Search in all movie fields
    const filteredResults = allMovies.filter(
      (movie) =>
        (movie.name &&
          movie.name.toLowerCase().includes(query.toLowerCase())) ||
        (movie.desc &&
          movie.desc.toLowerCase().includes(query.toLowerCase())) ||
        (movie.starring &&
          movie.starring.toLowerCase().includes(query.toLowerCase())) ||
        (movie.genres &&
          movie.genres.toLowerCase().includes(query.toLowerCase())) ||
        (movie.tags && movie.tags.toLowerCase().includes(query.toLowerCase()))
    );

    setSearchResults(filteredResults);
    setShowResults(true);
    setNoSearchResults(filteredResults.length === 0);
  };

  // Toggle search bar
  const toggleSearch = () => {
    setSearchActive(!searchActive);
    if (!searchActive) {
      setTimeout(() => {
        if (searchInputRef.current) {
          searchInputRef.current.focus();
        }
      }, 300);
    } else {
      setSearchQuery("");
      setShowResults(false);
      setNoSearchResults(false);
    }
  };

  // Handle click on search result
  const handleResultClick = (movie) => {
    setShowResults(false);
    setSearchActive(false);
    setSearchQuery("");

    // Ensure we have the correct source information
    const source = movie.source || getExactSource(movie);

    // Navigate to movie details page using source/id format
    navigate(`/singlePage/${source}/${movie.id}`);
  };

  // Close search results when clicking outside
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (
        !e.target.closest(".search-bar") &&
        !e.target.closest(".search-results")
      ) {
        setShowResults(false);
      }
    };

    document.addEventListener("click", handleClickOutside);
    return () => document.removeEventListener("click", handleClickOutside);
  }, []);

  // Toggle notification dropdown
  const toggleNotifications = () => {
    setShowNotifications(!showNotifications);

    // When opening notifications, close search
    if (!showNotifications) {
      setSearchActive(false);
      setSearchQuery("");
      setShowResults(false);
      setNoSearchResults(false);
    }
  };

  // Mark notification as read
  const markAsRead = (notificationId) => {
    setNotifications((prev) =>
      prev.map((notification) =>
        notification.id === notificationId
          ? { ...notification, read: true }
          : notification
      )
    );
  };

  // Mark all notifications as read
  const markAllAsRead = () => {
    setNotifications((prev) =>
      prev.map((notification) => ({ ...notification, read: true }))
    );
  };

  // Close notifications when clicking outside
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (
        notificationRef.current &&
        !notificationRef.current.contains(e.target) &&
        !e.target.closest(".notification-btn")
      ) {
        setShowNotifications(false);
      }
    };

    document.addEventListener("click", handleClickOutside);
    return () => document.removeEventListener("click", handleClickOutside);
  }, []);

  // Get unread notifications count
  const unreadCount = notifications.filter(
    (notification) => !notification.read
  ).length;

  // Handle notification click
  const handleNotificationClick = (notificationId, notificationType) => {
    // Mark notification as read
    markAsRead(notificationId);

    // Navigate based on notification type
    switch (notificationType) {
      case "new_content":
        navigate("/newReleases");
        break;
      case "recommendation":
        navigate("/recommended");
        break;
      case "account":
        navigate("/account");
        break;
      default:
        navigate("/notifications");
    }

    // Close notification dropdown
    setShowNotifications(false);
  };

  // Toggle mobile menu
  const toggleMenu = () => {
    setMenuOpen(!menuOpen);
    // When opening menu, close search
    if (!menuOpen) {
      setSearchActive(false);
      setSearchQuery("");
      setShowResults(false);
      setNoSearchResults(false);
      setShowNotifications(false);
    }
  };

  // Bildirim türüne göre ikon getirme
  const getNotificationIcon = (type) => {
    switch (type) {
      case "new_content":
        return <i className="fas fa-film"></i>;
      case "recommendation":
        return <i className="fas fa-thumbs-up"></i>;
      case "account":
        return <i className="fas fa-user-shield"></i>;
      default:
        return <i className="fas fa-bell"></i>;
    }
  };

  // Handle view all search results
  const handleViewAllResults = () => {
    setShowResults(false);
    setSearchActive(false);
    navigate(`/search?q=${searchQuery}`);
  };

  // Clear search input
  const clearSearch = () => {
    setSearchQuery("");
    setSearchResults([]);
    setShowResults(false);
    setNoSearchResults(false);
    if (searchInputRef.current) {
      searchInputRef.current.focus();
    }
  };

  return (
    <header className={scrolled ? "header scrolled" : "header"}>
      <div className="header-container">
        <div className="header-left">
          <Link to="/" className={`logo ${isHomePage ? "active" : ""}`}>
            <img src="/images/logo.png" alt="PurpleStream" />
          </Link>

          <nav className={menuOpen ? "nav-menu active" : "nav-menu"}>
            <ul>
              <li className={isActive("/series") ? "active" : ""}>
                <Link to="/series">TV Shows</Link>
              </li>
              <li className={isActive("/movies") ? "active" : ""}>
                <Link to="/movies">Movies</Link>
              </li>
              <li
                className={`dropdown ${isActive("/category") ? "active" : ""}`}
              >
                <span>Categories</span>
                <div className="dropdown-content">
                  <Link to="/category" className="view-all-categories">
                    <i className="fas fa-th-large"></i>
                    Browse All Categories
                  </Link>
                  <div className="dropdown-divider"></div>
                  {categories.map((category, index) => (
                    <Link
                      key={index}
                      to={`/category/${category.name.toLowerCase()}`}
                    >
                      <i className={`fas ${category.icon}`}></i>
                      {category.name}
                    </Link>
                  ))}
                </div>
              </li>
              <li className={isActive("/pricing") ? "active" : ""}>
                <Link to="/pricing">Pricing</Link>
              </li>
              <li className={isActive("/mylist") ? "active" : ""}>
              
              </li>
            </ul>
          </nav>
        </div>

        <div className="header-right">
          <div className={`search-bar ${searchActive ? "active" : ""}`}>
            <button
              className="search-icon"
              onClick={toggleSearch}
              aria-label="Search"
            >
              <i className="fas fa-search"></i>
            </button>
            <input
              type="text"
              placeholder="Search titles, people, genres..."
              value={searchQuery}
              onChange={handleSearch}
              ref={searchInputRef}
              onFocus={() => {
                if (searchQuery.trim() !== "" && searchResults.length > 0)
                  setShowResults(true);
              }}
            />

            {searchActive && searchQuery && (
              <button
                className="clear-search"
                onClick={clearSearch}
                aria-label="Clear search"
              >
                <i className="fas fa-times"></i>
              </button>
            )}

            {showResults && (
              <div className="search-results">
                <div className="search-results-header">
                  <span>Search Results</span>
                  <button onClick={() => setShowResults(false)}>
                    <i className="fas fa-times"></i>
                  </button>
                </div>

                {noSearchResults ? (
                  <div className="empty-search-results">
                    <i className="fas fa-search"></i>
                    <p>No results found for "{searchQuery}"</p>
                  </div>
                ) : (
                  <>
                    <ul>
                      {searchResults.slice(0, 5).map((movie) => (
                        <li
                          key={`${movie.id}-${movie.name}`}
                          onClick={() => handleResultClick(movie)}
                        >
                          <div className="search-result-item">
                            <div className="movie-poster">
                              <img src={movie.cover} alt={movie.name} />
                            </div>
                            <div className="movie-info">
                              <h4>{movie.name}</h4>
                              <div className="movie-meta">
                                {movie.rating && (
                                  <span className="rating">{movie.rating}</span>
                                )}
                                <span className="time">{movie.time}</span>
                              </div>
                              {movie.genres && (
                                <span className="genres">{movie.genres}</span>
                              )}
                            </div>
                          </div>
                        </li>
                      ))}
                    </ul>
                    {searchResults.length > 5 && (
                      <div className="view-all">
                        <a onClick={handleViewAllResults}>
                          View all {searchResults.length} results
                        </a>
                      </div>
                    )}
                  </>
                )}
              </div>
            )}
          </div>

          <div className="user-controls">
            <div className="notification-container">
              <button
                className="notification-btn"
                aria-label="Notifications"
                onClick={toggleNotifications}
              >
                <i className="fas fa-bell"></i>
                {unreadCount > 0 && (
                  <span className="notification-badge">{unreadCount}</span>
                )}
              </button>

              {showNotifications && (
                <div className="notifications-dropdown" ref={notificationRef}>
                  <div className="notifications-dropdown-header">
                    <h3>Notifications</h3>
                    {unreadCount > 0 && (
                      <button className="mark-all-read" onClick={markAllAsRead}>
                        Mark all as read
                      </button>
                    )}
                  </div>
                  {notifications.length > 0 ? (
                    <div className="notifications-list">
                      {notifications.map((notification) => (
                        <div
                          key={notification.id}
                          className={`notification-item ${
                            notification.read ? "read" : "unread"
                          }`}
                          onClick={() =>
                            handleNotificationClick(
                              notification.id,
                              notification.type
                            )
                          }
                        >
                          <div className="notification-item-avatar">
                            {notification.image ? (
                              <img src={notification.image} alt="" />
                            ) : (
                              <div className="notification-icon">
                                {getNotificationIcon(notification.type)}
                              </div>
                            )}
                          </div>
                          <div className="notification-content">
                            <div className="notification-title">
                              <h4>{notification.title}</h4>
                              <span className="notification-time">
                                {notification.time}
                              </span>
                            </div>
                            <p>{notification.message}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="empty-notifications">
                      <i className="fas fa-check-circle"></i>
                      <p>No new notifications</p>
                    </div>
                  )}
                  <div className="notifications-footer">
                    <Link to="/notifications" className="view-all-link">
                      <span>View All Notifications</span>
                      <i className="fas fa-arrow-right"></i>
                    </Link>
                  </div>
                </div>
              )}
            </div>

            <div className="profile-dropdown">
              <button className="profile-btn">
                <img src="/images/avatar.png" alt="Profile" />
                <i className="fas fa-caret-down"></i>
              </button>
              <div className="profile-dropdown-content">
                <Link to="/profile">
                  <i className="fas fa-user"></i>Profile
                </Link>
                <Link to="/account">
                  <i className="fas fa-cog"></i>Account
                </Link>
                <Link to="/logout">
                  <i className="fas fa-sign-out-alt"></i>Sign Out
                </Link>
              </div>
            </div>
          </div>

          <button
            className={`menu-toggle ${menuOpen ? "active" : ""}`}
            onClick={toggleMenu}
            aria-label="Toggle navigation menu"
          >
            <span></span>
            <span></span>
            <span></span>
            <span></span>
          </button>
        </div>
      </div>
    </header>
  );
};

--- END OF FILE netflix-clone/src/components/header/Header.jsx ---

--- START OF FILE netflix-clone/src/components/header/header.css ---
/* Professional Header CSS for PurpleStream */
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap");

:root {
  --primary-purple: #7b2cbf;
  --primary-purple-light: #9d4edd;
  --primary-purple-dark: #5a189a;
  --primary-gradient: linear-gradient(to right, #5a189a, #7b2cbf, #9d4edd);
  --white: #ffffff;
  --light-gray: #f8f9fa;
  --medium-gray: #e9ecef;
  --dark-gray: #495057;
  --text-dark: #212529;
  --header-height: 70px;
  --transition-speed: 0.3s;
  --box-shadow: 0 4px 12px rgba(90, 24, 154, 0.15);
  --glow-purple: 0 0 15px rgba(157, 78, 221, 0.5);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
}

a {
  text-decoration: none;
  color: inherit;
}

ul {
  list-style: none;
}

/* Main Header Styles */
.header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: var(--header-height);
  background: rgba(18, 6, 32, 0.95);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  z-index: 1000;
  transition: all var(--transition-speed) ease;
  color: var(--white);
  border-bottom: 1px solid rgba(157, 78, 221, 0.2);
}

.header.scrolled {
  background: rgba(18, 6, 32, 0.98);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
}

.header-container {
  max-width: 1800px;
  margin: 0 auto;
  padding: 0 4%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

/* Logo Section */
.logo {
  height: 100%;
  display: flex;
  align-items: center;
  position: relative;
}

.logo img {
  height: 115px;
  margin-right: 5px;
  transition: transform 0.3s ease;
}

.logo:hover img {
  transform: scale(1.05);
  filter: drop-shadow(var(--glow-purple));
}

.logo::after {
  content: "";
  position: absolute;
  bottom: 19px;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--primary-gradient);
  transform: scaleX(0);
  transform-origin: right;
  transition: transform 0.4s ease;
  opacity: 0.8;
}

.logo:hover::after {
  transform: scaleX(1);
  transform-origin: left;
}

/* Left Section with Navigation */
.header-left {
  display: flex;
  align-items: center;
  height: 100%;
}

.nav-menu ul {
  display: flex;
  height: 100%;
}

.nav-menu li {
  position: relative;
  display: flex;
  align-items: center;
  margin: 0 15px;
  font-size: 15px;
  font-weight: 500;
  letter-spacing: 0.4px;
  transition: all 0.2s ease;
  opacity: 0.85;
}

.nav-menu li:hover {
  opacity: 1;
  color: var(--primary-purple-light);
}

.nav-menu li a {
  position: relative;
  padding: 8px 0;
}

.nav-menu li a::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 2px;
  background: var(--primary-gradient);
  transition: width 0.3s cubic-bezier(0.58, 0.3, 0.005, 1);
}

.nav-menu li:hover a::after {
  width: 100%;
}

/* Active Menu Item */
.nav-menu li.active {
  opacity: 1;
  color: var(--primary-purple-light);
}

.nav-menu li.active a::after {
  width: 100%;
}

/* Dropdown Menu */
.dropdown {
  position: relative;
  cursor: pointer;
}

.dropdown span {
  display: flex;
  align-items: center;
  padding: 8px 0;
}

.dropdown span::after {
  content: "▼";
  font-size: 8px;
  margin-left: 5px;
  color: var(--primary-purple-light);
  transition: transform 0.3s ease;
}

.dropdown:hover span::after {
  transform: translateY(2px);
}

.dropdown-content {
  position: absolute;
  top: 100%;
  left: -20px;
  background: rgba(28, 10, 47, 0.95);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  min-width: 220px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  border-radius: 8px;
  border: 1px solid rgba(157, 78, 221, 0.2);
  border-top: 3px solid var(--primary-purple);
  opacity: 0;
  visibility: hidden;
  transform: translateY(10px);
  transition: all 0.3s cubic-bezier(0.2, 1, 0.2, 1);
  z-index: 2;
  overflow: hidden;
}

.dropdown:hover .dropdown-content {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.dropdown-content a {
  display: block;
  padding: 14px 20px;
  font-size: 14px;
  transition: all 0.2s;
  color: var(--white);
  opacity: 0.8;
  position: relative;
  overflow: hidden;
}

.dropdown-content a::before {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 3px;
  background: var(--primary-gradient);
  transform: scaleY(0);
  transition: transform 0.25s ease;
}

.dropdown-content a:hover {
  background-color: rgba(157, 78, 221, 0.15);
  color: var(--primary-purple-light);
  opacity: 1;
  padding-left: 25px;
}

.dropdown-content a:hover::before {
  transform: scaleY(1);
}

/* Right Section with Search and User Controls */
.header-right {
  display: flex;
  align-items: center;
  height: 100%;
}

/* Enhanced Search Bar Styles */
.search-bar {
  position: relative;
  display: flex;
  align-items: center;
  margin-right: 20px;
  overflow: visible;
  height: 40px;
}

.search-bar input {
  width: 0;
  height: 40px;
  padding: 10px 15px 10px 42px;
  background: rgba(43, 15, 70, 0.4);
  border: 1px solid rgba(157, 78, 221, 0.2);
  color: var(--white);
  font-size: 14px;
  border-radius: 20px;
  opacity: 0;
  transition: all 0.4s cubic-bezier(0.2, 0.8, 0.2, 1);
  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);
}

.search-bar.active input {
  width: 260px;
  opacity: 1;
  border-color: rgba(157, 78, 221, 0.4);
  box-shadow: 0 0 0 1px rgba(157, 78, 221, 0.1), 
              inset 0 2px 8px rgba(0, 0, 0, 0.3);
  animation: glow-search 1.5s ease-in-out infinite alternate;
}

@keyframes glow-search {
  from {
    box-shadow: 0 0 0 1px rgba(157, 78, 221, 0.1), 
                inset 0 2px 8px rgba(0, 0, 0, 0.3);
  }
  to {
    box-shadow: 0 0 5px 1px rgba(157, 78, 221, 0.2), 
                inset 0 2px 8px rgba(0, 0, 0, 0.3);
  }
}

.search-bar input:focus {
  outline: none;
  border-color: var(--primary-purple);
  background: rgba(43, 15, 70, 0.5);
}

.search-bar input::placeholder {
  color: rgba(255, 255, 255, 0.6);
  font-weight: 300;
  transition: opacity 0.3s ease;
}

.search-bar input:focus::placeholder {
  opacity: 0.7;
}

.search-icon {
  position: absolute;
  left: 0;
  background: transparent;
  border: none;
  color: var(--white);
  font-size: 16px;
  cursor: pointer;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2;
  transition: all 0.3s ease;
  border-radius: 50%;
}

.search-bar.active .search-icon {
  color: var(--primary-purple-light);
  text-shadow: 0 0 10px rgba(157, 78, 221, 0.4);
}

.search-icon:hover {
  background-color: rgba(157, 78, 221, 0.1);
  color: var(--primary-purple-light);
}

/* Clear search button */
.clear-search {
  position: absolute;
  right: 10px;
  background: transparent;
  border: none;
  color: rgba(255, 255, 255, 0.6);
  font-size: 14px;
  cursor: pointer;
  width: 28px;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2;
  transition: all 0.2s ease;
  border-radius: 50%;
  opacity: 0.7;
}

.clear-search:hover {
  background-color: rgba(157, 78, 221, 0.2);
  color: var(--white);
  opacity: 1;
}

/* Search Results Panel */
.search-results {
  position: absolute;
  top: calc(100% + 10px);
  left: 0;
  width: 360px;
  max-height: 500px;
  background: rgba(23, 8, 38, 0.97);
  backdrop-filter: blur(15px);
  -webkit-backdrop-filter: blur(15px);
  border-radius: 12px;
  border: 1px solid rgba(157, 78, 221, 0.3);
  margin-top: 5px;
  z-index: 1000;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(157, 78, 221, 0.2);
  overflow: hidden;
  animation: search-results-appear 0.3s cubic-bezier(0.2, 0.8, 0.2, 1);
  transform-origin: top center;
}

@keyframes search-results-appear {
  0% {
    opacity: 0;
    transform: translateY(-10px) scale(0.97);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

/* Dropdown arrow indicator */
.search-results::before {
  content: '';
  position: absolute;
  top: -8px;
  left: 40px;
  width: 16px;
  height: 16px;
  background: rgba(23, 8, 38, 0.97);
  transform: rotate(45deg);
  border-left: 1px solid rgba(157, 78, 221, 0.3);
  border-top: 1px solid rgba(157, 78, 221, 0.3);
  z-index: -1;
}

.search-results-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 20px;
  border-bottom: 1px solid rgba(157, 78, 221, 0.2);
  background: linear-gradient(to right, rgba(90, 24, 154, 0.4), rgba(157, 78, 221, 0.2));
}

.search-results-header span {
  font-weight: 600;
  font-size: 16px;
  color: var(--white);
  letter-spacing: 0.5px;
  display: flex;
  align-items: center;
}

.search-results-header span::before {
  content: '';
  display: inline-block;
  width: 8px;
  height: 8px;
  background: var(--primary-gradient);
  border-radius: 50%;
  margin-right: 10px;
}

.search-results-header button {
  background: transparent;
  border: none;
  color: var(--white);
  opacity: 0.7;
  cursor: pointer;
  font-size: 14px;
  padding: 6px;
  border-radius: 50%;
  width: 28px;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.search-results-header button:hover {
  opacity: 1;
  background-color: rgba(157, 78, 221, 0.2);
  color: var(--primary-purple-light);
}

.search-results ul {
  max-height: 360px;
  overflow-y: auto;
  padding: 8px 0;
  margin: 0;
}

.search-results ul::-webkit-scrollbar {
  width: 6px;
}

.search-results ul::-webkit-scrollbar-thumb {
  background-color: rgba(157, 78, 221, 0.4);
  border-radius: 3px;
}

.search-results ul::-webkit-scrollbar-track {
  background-color: rgba(0, 0, 0, 0.1);
}

.search-results li {
  padding: 0;
  margin: 2px 5px;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;
}

.search-results li:hover {
  background-color: rgba(157, 78, 221, 0.15);
}

.search-results li::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 1px;
  background: linear-gradient(to right, transparent, rgba(157, 78, 221, 0.2), transparent);
}

.search-results li:last-child::after {
  display: none;
}

.search-result-item {
  display: flex;
  padding: 12px 15px;
}

.movie-poster {
  width: 80px;
  min-width: 80px;
  height: 45px;
  overflow: hidden;
  margin-right: 15px;
  border-radius: 6px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.4);
  transition: all 0.3s ease;
  border: 1px solid rgba(157, 78, 221, 0.2);
}

.search-results li:hover .movie-poster {
  transform: scale(1.05);
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(157, 78, 221, 0.3);
}

.movie-poster img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: all 0.3s ease;
}

.search-results li:hover .movie-poster img {
  filter: brightness(1.1);
}

.movie-info {
  display: flex;
  flex-direction: column;
  flex: 1;
  min-width: 0; /* Ensures proper text truncation */
}

.movie-info h4 {
  margin: 0 0 5px 0;
  font-size: 14px;
  font-weight: 500;
  color: var(--white);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  transition: all 0.2s ease;
}

.search-results li:hover .movie-info h4 {
  color: var(--primary-purple-light);
}

.movie-meta {
  display: flex;
  align-items: center;
  font-size: 12px;
  color: rgba(255, 255, 255, 0.7);
  margin-bottom: 5px;
}

.rating {
  margin-right: 10px;
  color: var(--primary-purple-light);
  font-weight: 500;
  display: flex;
  align-items: center;
  background: rgba(157, 78, 221, 0.1);
  padding: 2px 6px;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.search-results li:hover .rating {
  background: rgba(157, 78, 221, 0.2);
}

.rating::before {
  content: "★";
  margin-right: 3px;
}

.time {
  font-size: 12px;
  opacity: 0.8;
}

.genres {
  font-size: 12px;
  color: rgba(255, 255, 255, 0.7);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.view-all {
  padding: 14px 15px;
  text-align: center;
  border-top: 1px solid rgba(157, 78, 221, 0.2);
  background: linear-gradient(to right, rgba(90, 24, 154, 0.2), rgba(157, 78, 221, 0.1));
}

.view-all a {
  font-size: 14px;
  color: var(--primary-purple-light);
  text-decoration: none;
  font-weight: 500;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  cursor: pointer;
}

.view-all a:hover {
  color: var(--white);
}

.view-all a::after {
  content: "→";
  margin-left: 5px;
  transition: transform 0.3s ease;
}

.view-all a:hover::after {
  transform: translateX(3px);
}

/* Empty search results state */
.empty-search-results {
  padding: 30px 20px;
  text-align: center;
  color: rgba(255, 255, 255, 0.6);
}

.empty-search-results i {
  font-size: 32px;
  margin-bottom: 10px;
  color: var(--primary-purple-light);
  opacity: 0.6;
}

.empty-search-results p {
  font-size: 15px;
  margin: 0;
}

/* User Controls */
.user-controls {
  display: flex;
  align-items: center;
}

/* Enhanced Notification Styles */
/* Notification Container */
.notification-container {
  position: relative;
}

/* Notification Button */
.notification-btn {
  position: relative;
  background: transparent;
  border: none;
  color: var(--white);
  font-size: 18px;
  cursor: pointer;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s cubic-bezier(0.2, 0.8, 0.2, 1);
  border-radius: 50%;
  margin-right: 25px;
}

.notification-btn:hover {
  background-color: rgba(157, 78, 221, 0.1);
  color: var(--primary-purple-light);
  transform: translateY(-2px);
}

.notification-btn:active {
  transform: translateY(0);
}

/* Notification Badge */
.notification-badge {
  position: absolute;
  top: -1px;
  right: -1px;
  background: var(--primary-gradient);
  color: white;
  font-size: 10px;
  font-weight: 600;
  min-width: 20px;
  height: 20px;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 6px;
  border: 2px solid rgba(18, 6, 32, 0.95);
  box-shadow: 0 2px 6px rgba(123, 44, 191, 0.5);
  transition: all 0.3s ease;
  animation: pulse-badge 2s infinite;
}

@keyframes pulse-badge {
  0% {
    box-shadow: 0 0 0 0 rgba(157, 78, 221, 0.7);
  }
  70% {
    box-shadow: 0 0 0 8px rgba(157, 78, 221, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(157, 78, 221, 0);
  }
}

.notification-btn:hover .notification-badge {
  transform: scale(1.1);
  animation: none;
}

/* Notifications Dropdown */
.notifications-dropdown {
  position: absolute;
  top: calc(100% + 12px);
  right: -5px;
  width: 380px;
  background: rgba(23, 8, 38, 0.98);
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(157, 78, 221, 0.3);
  overflow: hidden;
  z-index: 1000;
  animation: dropdown-appear 0.3s cubic-bezier(0.2, 0.8, 0.2, 1);
  transform-origin: top right;
}

/* Dropdown appearance animation */
@keyframes dropdown-appear {
  0% {
    opacity: 0;
    transform: translateY(-10px) scale(0.9);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

/* Dropdown arrow indicator */
.notifications-dropdown::before {
  content: '';
  position: absolute;
  top: -8px;
  right: 20px;
  width: 16px;
  height: 16px;
  background: rgba(23, 8, 38, 0.98);
  transform: rotate(45deg);
  border-left: 1px solid rgba(157, 78, 221, 0.3);
  border-top: 1px solid rgba(157, 78, 221, 0.3);
  z-index: -1;
}

/* Notifications Header */
.notifications-dropdown-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 18px 22px;
  border-bottom: 1px solid rgba(157, 78, 221, 0.2);
  background: linear-gradient(to right, rgba(90, 24, 154, 0.4), rgba(157, 78, 221, 0.2));
}

.notifications-dropdown-header h3 {
  font-size: 16px;
  font-weight: 600;
  margin: 0;
  color: var(--white);
  letter-spacing: 0.5px;
  display: flex;
  align-items: center;
}

.notifications-dropdown-header h3::before {
  content: '';
  display: inline-block;
  width: 8px;
  height: 8px;
  background: var(--primary-gradient);
  border-radius: 50%;
  margin-right: 10px;
}

.mark-all-read {
  background: transparent;
  border: none;
  color: var(--primary-purple-light);
  font-size: 13px;
  font-weight: 500;
  padding: 6px 10px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
}

.mark-all-read:hover {
  background-color: rgba(157, 78, 221, 0.1);
  color: var(--white);
}

.mark-all-read::before {
  content: '✓';
  margin-right: 6px;
  font-size: 12px;
}

/* Notifications List */
.notifications-list {
  max-height: 420px;
  overflow-y: auto;
  padding: 8px 0;
}

.notifications-list::-webkit-scrollbar {
  width: 6px;
}

.notifications-list::-webkit-scrollbar-thumb {
  background-color: rgba(157, 78, 221, 0.4);
  border-radius: 3px;
}

.notifications-list::-webkit-scrollbar-track {
  background-color: rgba(255, 255, 255, 0.05);
}

/* Notification Item */
.notification-item {
  display: flex;
  padding: 16px 22px;
  border-bottom: 1px solid rgba(157, 78, 221, 0.1);
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;
}

.notification-item::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 4px;
  height: 100%;
  background: transparent;
  transition: all 0.3s ease;
}

.notification-item:hover {
  background-color: rgba(157, 78, 221, 0.1);
}

.notification-item:hover::after {
  background: var(--primary-gradient);
}

/* Unread notification styling */
.notification-item.unread {
  background-color: rgba(157, 78, 221, 0.05);
}

.notification-item.unread::after {
  background: var(--primary-gradient);
}

/* Notification icon/avatar */
.notification-item-avatar {
  width: 48px;
  height: 48px;
  border-radius: 12px;
  margin-right: 16px;
  flex-shrink: 0;
  overflow: hidden;
  background: rgba(157, 78, 221, 0.15);
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(157, 78, 221, 0.3);
  transition: all 0.3s ease;
}

.notification-item:hover .notification-item-avatar {
  transform: scale(1.05);
  box-shadow: 0 4px 12px rgba(157, 78, 221, 0.4);
}

.notification-item-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: all 0.3s ease;
}

.notification-icon {
  font-size: 22px;
  color: var(--primary-purple-light);
  transition: all 0.3s ease;
}

.notification-item:hover .notification-icon {
  transform: scale(1.1);
  color: var(--white);
}

/* Notification Content */
.notification-content {
  flex: 1;
  min-width: 0; /* Ensure text truncation works */
}

.notification-title {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 8px;
}

.notification-title h4 {
  font-size: 15px;
  font-weight: 600;
  margin: 0;
  color: var(--white);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 200px;
}

.notification-time {
  font-size: 12px;
  color: rgba(255, 255, 255, 0.5);
  white-space: nowrap;
  margin-left: 8px;
  padding: 2px 8px;
  border-radius: 10px;
  background-color: rgba(157, 78, 221, 0.1);
  transition: all 0.2s ease;
}

.notification-item:hover .notification-time {
  background-color: rgba(157, 78, 221, 0.2);
  color: rgba(255, 255, 255, 0.7);
}

.notification-content p {
  font-size: 13px;
  margin: 0;
  color: rgba(255, 255, 255, 0.7);
  line-height: 1.5;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  transition: all 0.2s ease;
}

.notification-item:hover .notification-content p {
  color: rgba(255, 255, 255, 0.9);
}

/* Empty Notifications */
.empty-notifications {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px 20px;
  text-align: center;
}

.empty-notifications i {
  font-size: 36px;
  margin-bottom: 16px;
  color: var(--primary-purple-light);
  opacity: 0.6;
}

.empty-notifications p {
  font-size: 15px;
  color: rgba(255, 255, 255, 0.6);
  margin: 0;
}

/* Notifications Footer */
.notifications-footer {
  padding: 14px 20px;
  text-align: center;
  border-top: 1px solid rgba(157, 78, 221, 0.2);
  background: linear-gradient(to right, rgba(90, 24, 154, 0.2), rgba(157, 78, 221, 0.1));
}

.notifications-footer .view-all-link {
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--primary-purple-light);
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s ease;
  text-decoration: none;
}

.notifications-footer .view-all-link span {
  position: relative;
  transition: all 0.3s ease;
}

.notifications-footer .view-all-link span::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 0;
  height: 2px;
  background: var(--primary-gradient);
  transition: width 0.3s ease;
}

.notifications-footer .view-all-link:hover span::after {
  width: 100%;
}

.notifications-footer .view-all-link i {
  margin-left: 8px;
  transition: transform 0.3s ease;
}

.notifications-footer .view-all-link:hover {
  color: var(--white);
}

.notifications-footer .view-all-link:hover i {
  transform: translateX(5px);
}

/* Profile Dropdown */
.profile-dropdown {
  position: relative;
}

.profile-btn {
  display: flex;
  align-items: center;
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0;
  color: var(--white);
}

.profile-btn img {
  width: 38px;
  height: 38px;
  border-radius: 50%;
  margin-right: 8px;
  border: 2px solid var(--primary-purple-light);
  transition: all 0.3s ease;
}

.profile-dropdown:hover .profile-btn img {
  border-color: var(--white);
  transform: scale(1.05);
  box-shadow: var(--glow-purple);
}

.profile-btn i {
  transition: transform 0.3s ease;
  font-size: 12px;
  margin-left: 5px;
  color: var(--primary-purple-light);
}

.profile-dropdown:hover .profile-btn i {
  transform: rotate(180deg);
}

.profile-dropdown-content {
  position: absolute;
  top: 100%;
  right: 0;
  background: rgba(28, 10, 47, 0.95);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  min-width: 220px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
  border-radius: 8px;
  border: 1px solid rgba(157, 78, 221, 0.3);
  border-top: 3px solid var(--primary-purple);
  margin-top: 10px;
  opacity: 0;
  visibility: hidden;
  transform: translateY(10px);
  transition: all 0.3s cubic-bezier(0.2, 1, 0.2, 1);
  z-index: 2;
  overflow: hidden;
}

.profile-dropdown:hover .profile-dropdown-content {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.profile-dropdown-content a {
  display: flex;
  align-items: center;
  padding: 14px 20px;
  font-size: 14px;
  transition: all 0.2s;
  color: var(--white);
  opacity: 0.8;
  position: relative;
}

.profile-dropdown-content a:hover {
  background-color: rgba(157, 78, 221, 0.15);
  color: var(--primary-purple-light);
  opacity: 1;
  padding-left: 25px;
}

.profile-dropdown-content a i {
  margin-right: 12px;
  font-size: 16px;
  width: 16px;
  text-align: center;
}

.profile-dropdown-content a::after {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 3px;
  background: var(--primary-gradient);
  transform: scaleY(0);
  transition: transform 0.25s ease;
}

.profile-dropdown-content a:hover::after {
  transform: scaleY(1);
}

/* Mobile Menu Toggle */
.menu-toggle {
  display: none;
  width: 28px;
  height: 22px;
  position: relative;
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0;
  z-index: 10;
}

.menu-toggle span {
  display: block;
  position: absolute;
  height: 2px;
  width: 100%;
  background: var(--white);
  border-radius: 2px;
  opacity: 1;
  left: 0;
  transform: rotate(0deg);
  transition: all 0.3s ease;
}

.menu-toggle span:nth-child(1) {
  top: 0;
}

.menu-toggle span:nth-child(2),
.menu-toggle span:nth-child(3) {
  top: 9px;
}

.menu-toggle span:nth-child(4) {
  top: 18px;
}

.menu-toggle.active span:nth-child(1) {
  top: 9px;
  width: 0;
  left: 50%;
}

.menu-toggle.active span:nth-child(2) {
  transform: rotate(45deg);
}

.menu-toggle.active span:nth-child(3) {
  transform: rotate(-45deg);
}

.menu-toggle.active span:nth-child(4) {
  top: 9px;
  width: 0;
  left: 50%;
}

/* Media Queries */
@media (max-width: 1200px) {
  .nav-menu li {
    margin: 0 10px;
  }

  .logo img {
    height: 32px;
  }
}

@media (max-width: 991px) {
  .nav-menu {
    position: fixed;
    top: 0;
    right: -100%;
    width: 80%;
    height: 100vh;
    background: rgba(18, 6, 32, 0.98);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    padding-top: var(--header-height);
    transition: all 0.4s ease;
    z-index: 1;
    box-shadow: -5px 0 30px rgba(0, 0, 0, 0.5);
    border-left: 1px solid rgba(157, 78, 221, 0.2);
  }

  .nav-menu.active {
    right: 0;
  }

  .nav-menu ul {
    flex-direction: column;
    align-items: flex-start;
    padding: 20px;
    height: auto;
  }

  .nav-menu li {
    margin: 15px 0;
    font-size: 18px;
    width: 100%;
    opacity: 1;
  }

  .dropdown-content {
    position: static;
    opacity: 1;
    visibility: visible;
    transform: none;
    box-shadow: none;
    border-top: none;
    background-color: transparent;
    padding-left: 20px;
    display: none;
    margin-top: 10px;
    border: none;
    border-left: 1px solid rgba(157, 78, 221, 0.2);
  }

  .dropdown:hover .dropdown-content {
    display: block;
  }

  .dropdown-content a {
    padding: 10px 0 10px 15px;
  }

  .menu-toggle {
    display: block;
  }

  .search-bar.active input {
    width: 180px;
  }
  
  .search-results {
    width: 320px;
  }
  
  .notifications-dropdown {
    width: 350px;
    right: -15px;
  }
}

@media (max-width: 768px) {
  .header {
    height: 60px;
  }

  .logo img {
    height: 28px;
  }

  .profile-btn img {
    width: 34px;
    height: 34px;
  }

  .search-bar.active input {
    width: 150px;
  }

  .search-results {
    width: 300px;
    left: auto;
    right: -50px;
  }
  
  .search-results::before {
    left: auto;
    right: 70px;
  }
  
  .notifications-dropdown {
    width: 320px;
    right: -70px;
  }
  
  .notifications-dropdown::before {
    right: 82px;
  }
  
  .notification-item {
    padding: 14px 16px;
  }
  
  .notification-title h4 {
    max-width: 170px;
  }
}

@media (max-width: 480px) {
  .logo img {
    height: 24px;
    margin-right: 10px;
  }

  .search-bar {
    margin-right: 10px;
  }

  .notification-btn {
    margin-right: 15px;
  }

  .search-bar.active input {
    width: 120px;
  }

  .search-results {
    width: 280px;
    right: -90px;
  }
  
  .search-results::before {
    right: 110px;
  }
  
  .notifications-dropdown {
    width: 290px;
    right: -140px;
  }
  
  .notifications-dropdown::before {
    right: 155px;
  }
  
  .notification-item-avatar {
    width: 42px;
    height: 42px;
  }
  
  .notification-title h4 {
    max-width: 130px;
  }
}

.logo.active {
  position: relative;
}

.logo.active::after {
  content: "";
  position: absolute;
  bottom: 19px;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--primary-gradient);
  transform: scaleX(1);
  opacity: 0.8;
}

.logo.active img {
  filter: drop-shadow(var(--glow-purple));
}

/* Add these CSS rules to your existing header.css file */

/* Enhanced Categories Dropdown Styles */
.dropdown-content {
  /* Keep your existing dropdown styles */
  padding: 8px 0;
}

.view-all-categories {
  padding: 12px 20px !important;
  margin-bottom: 0;
  background: linear-gradient(to right, rgba(90, 24, 154, 0.2), rgba(157, 78, 221, 0.1));
  color: var(--primary-purple-light) !important;
  font-weight: 500;
  border-radius: 0;
  border-bottom: 1px solid rgba(157, 78, 221, 0.15);
  transition: all 0.2s ease;
}

.view-all-categories:hover {
  background: linear-gradient(to right, rgba(90, 24, 154, 0.3), rgba(157, 78, 221, 0.2));
  color: white !important;
}

.view-all-categories i {
  margin-right: 10px;
  transition: transform 0.3s ease;
}

.view-all-categories:hover i {
  transform: scale(1.1);
}

.dropdown-divider {
  height: 1px;
  background: linear-gradient(to right, transparent, rgba(157, 78, 221, 0.2), transparent);
  margin: 4px 0;
}

.dropdown-content a {
  padding: 10px 20px;
  transition: all 0.25s ease;
  display: flex;
  align-items: center;
}

.dropdown-content a i {
  width: 24px;
  text-align: center;
  margin-right: 12px;
  font-size: 1.1em;
  color: var(--primary-purple-light);
  transition: all 0.25s ease;
}

.dropdown-content a:hover i {
  transform: scale(1.2);
  color: white;
}

/* Responsive adjustments for the category dropdown */
@media (max-width: 991px) {
  .view-all-categories {
    background: transparent;
    padding: 10px 0 10px 15px !important;
    border-bottom: 1px solid rgba(157, 78, 221, 0.2);
  }
  
  .dropdown-divider {
    display: none;
  }
  
  .dropdown-content a {
    padding: 10px 0 10px 15px;
  }
}
--- END OF FILE netflix-clone/src/components/header/header.css ---

--- START OF FILE netflix-clone/src/components/homes/Home.jsx ---
import React, { useState, useEffect } from "react";
import { HomeCard } from "../homes/HomeCard";
import { homeData } from "../../dummyData";
import "./home.css";

export const Homes = () => {
  // Veri kaynaklarına source bilgisini ekle
  const homeDataWithSource = homeData.map((item) => ({
    ...item,
    source: "homeData",
  }));

  const [items, setItems] = useState(homeDataWithSource);
  const [currentSlide, setCurrentSlide] = useState(0);

  // Autoplay effect for slider
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentSlide((prev) => (prev === items.length - 1 ? 0 : prev + 1));
    }, 8000);

    return () => clearInterval(interval);
  }, [items.length]);

  return (
    <>
      <div className="homes">
        {items.map((item, index) => (
          <div
            className={`box ${index === currentSlide ? "active" : ""}`}
            key={index}
          >
            <HomeCard item={item} />
          </div>
        ))}
      </div>

      <div className="slide-dots">
        {items.map((_, index) => (
          <span
            key={index}
            className={`dot ${index === currentSlide ? "active" : ""}`}
            onClick={() => setCurrentSlide(index)}
          ></span>
        ))}
      </div>
    </>
  );
};

--- END OF FILE netflix-clone/src/components/homes/Home.jsx ---

--- START OF FILE netflix-clone/src/components/homes/HomeCard.jsx ---
import React from "react";
import { Link } from "react-router-dom";

export const HomeCard = ({
  item: { id, cover, name, rating, time, desc, starring, genres, tags, video },
  source = "homeData", // Default source
}) => {
  // Create particle elements for the background effect
  const renderParticles = () => {
    const particles = [];
    for (let i = 0; i < 20; i++) {
      const style = {
        left: `${Math.random() * 100}%`,
        top: `${Math.random() * 100}%`,
        animationDuration: `${Math.random() * 15 + 5}s`,
        animationDelay: `${Math.random() * 5}s`,
        width: `${Math.random() * 7 + 3}px`,
        height: `${Math.random() * 7 + 3}px`,
        opacity: Math.random() * 0.5 + 0.3,
      };
      particles.push(<div key={i} className="particle" style={style}></div>);
    }
    return particles;
  };

  // Split tags into an array for the badge display
  const tagList = tags ? tags.split(", ") : [];

  return (
    <div className="box">
      <div className="coverImage">
        <img src={cover} alt={name} />
      </div>

      {/* Particle effect overlay */}
      <div className="particles">{renderParticles()}</div>

      <div className="content flex">
        <div className="details row">
          <h1>{name}</h1>

          <div className="rating flex">
            <div className="stars">
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star"></i>
              <i className="fa fa-star-half"></i>
            </div>
            <label>{rating}</label>
            <span>GP</span>
            <label>{time}</label>
          </div>

          <p className="movie-description">{desc}</p>

          {/* Movie metadata badges */}
          <div className="movie-metadata">
            <div className="metadata-badge">
              <i className="fas fa-film"></i>
              <span>HD Quality</span>
            </div>
            <div className="metadata-badge">
              <i className="fas fa-closed-captioning"></i>
              <span>Subtitles</span>
            </div>
            {tagList.slice(0, 2).map((tag, index) => (
              <div key={index} className="metadata-badge">
                <i className="fas fa-tag"></i>
                <span>{tag}</span>
              </div>
            ))}
          </div>

          <div className="cast">
            <h4>
              <span>Starring:</span>
              {starring}
            </h4>
            <h4>
              <span>Genres:</span>
              {genres}
            </h4>
            <h4>
              <span>Tags:</span>
              {tags}
            </h4>
          </div>

          <button className="primary-btn">
            <i className="fas fa-play"></i>WATCH NOW
          </button>
        </div>

        <div className="playButton row">
          {/* Updated Link with source and id */}
          <Link to={`/singlePage/${source}/${id}`}>
            <button>
              <div className="img">
                <img src="./images/play-button.png" alt="Play" />
                <img src="./images/play.png" alt="Play" className="change" />
              </div>
              WATCH TRAILER
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
};
--- END OF FILE netflix-clone/src/components/homes/HomeCard.jsx ---

--- START OF FILE netflix-clone/src/components/homes/Homes.jsx ---
import React, { useState, useEffect } from "react";
import { homeData } from "../../dummyData";
import { Homes as Home } from "./Home.jsx"; // Güncellendi
import "./home.css";

export const Homes = () => {
  const [items, setItems] = useState(homeData);
  const [loading, setLoading] = useState(true);
  const [loadingProgress, setLoadingProgress] = useState(0);

  useEffect(() => {
    // Simulate loading data with progress
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.floor(Math.random() * 15) + 5;
      if (progress > 100) {
        progress = 100;
        clearInterval(interval);

        // Add a small delay before hiding loader for smoother transition
        setTimeout(() => {
          setLoading(false);
        }, 500);
      }
      setLoadingProgress(progress);
    }, 200);

    return () => clearInterval(interval);
  }, []);

  // Scroll to top when page loads
  useEffect(() => {
    window.scrollTo(0, 0);

    // Optional: Add a class to the body for a dark theme
    document.body.classList.add("dark-theme");

    return () => {
      // Clean up the class when component unmounts
      document.body.classList.remove("dark-theme");
    };
  }, []);

  return (
    <>
      <section className="home">
        {loading ? (
          <div className="loading-container">
            <div className="loader"></div>
            <p>Umarım Beğenirsiniz ツ</p>
            {/* Optional loading progress bar */}
            <div
              style={{
                width: "200px",
                height: "3px",
                background: "rgba(255,255,255,0.2)",
                borderRadius: "3px",
                marginTop: "20px",
                position: "relative",
                overflow: "hidden",
              }}
            >
              <div
                style={{
                  height: "100%",
                  width: `${loadingProgress}%`,
                  background: "linear-gradient(to right, #9c27b0, #e1bee7)",
                  borderRadius: "3px",
                  transition: "width 0.3s ease",
                }}
              ></div>
            </div>
          </div>
        ) : (
          <Home items={items} />
        )}
      </section>
    </>
  );
};

--- END OF FILE netflix-clone/src/components/homes/Homes.jsx ---

--- START OF FILE netflix-clone/src/components/homes/TrailerButton.jsx ---
import React from "react";
import { Link } from "react-router-dom";
import {
  homeData,
  trending,
  latest,
  upcome,
  recommended,
  documentaries,
  animation,
} from "../../dummyData";

export const TrailerButton = ({ id, name }) => {
  // Define all possible data sources
  const allSources = {
    homeData,
    trending,
    latest,
    upcome,
    recommended,
    documentaries,
    animation,
  };

  // Function to determine the exact source for this item
  const getExactSource = () => {
    // If we have the name, we can do more accurate source detection
    if (name) {
      // Check each source for matching ID and name
      for (const [sourceName, sourceItems] of Object.entries(allSources)) {
        const foundItem = sourceItems.find(
          (i) => i.id === id && i.name === name
        );
        if (foundItem) {
          return sourceName;
        }
      }
    }

    // Fallback: check by ID only
    for (const [sourceName, sourceItems] of Object.entries(allSources)) {
      if (sourceItems.some((i) => i.id === id)) {
        return sourceName;
      }
    }

    // Default fallback
    return "homeData";
  };

  // Get the correct source for this item
  const source = getExactSource();

  return (
    <Link to={`/singlePage/${source}/${id}`} className="trailer-btn-link">
      <button className="trailer-btn">
        <i className="fas fa-film"></i>
        WATCH TRAILER
      </button>
    </Link>
  );
};

--- END OF FILE netflix-clone/src/components/homes/TrailerButton.jsx ---

--- START OF FILE netflix-clone/src/components/homes/home.css ---
.home {
  position: relative;
  height: 100vh;
  width: 100%;
  color: #fff;
  font-family: 'Poppins', sans-serif;
  overflow: hidden;
}

.homeContainer {
  position: relative;
  height: 100vh;
}

.coverImage {
  position: absolute;
  top: 0;
  width: 100%;
  height: 100vh;
  z-index: -2;
}

.coverImage img {
  width: 100vw;
  height: 100vh;
  object-fit: cover;
  filter: brightness(0.8) contrast(1.2);
  transition: transform 10s ease;
}

.homeContainer:hover .coverImage img {
  transform: scale(1.1);
}

.coverImage::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  z-index: 88;
  background-image: linear-gradient(
    to right bottom,
    rgba(26, 7, 51, 0.9),
    rgba(74, 20, 140, 0.85),
    rgba(123, 31, 162, 0.75),
    rgba(156, 39, 176, 0.65),
    rgba(156, 39, 176, 0.5)
  );
}

/* Added particle effect */
.particles {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

.particle {
  position: absolute;
  width: 5px;
  height: 5px;
  background-color: rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: float 10s infinite linear;
}

@keyframes float {
  0% {
    transform: translateY(0) translateX(0) rotate(0deg);
    opacity: 0;
  }
  10% {
    opacity: 1;
  }
  90% {
    opacity: 1;
  }
  100% {
    transform: translateY(-100vh) translateX(100px) rotate(360deg);
    opacity: 0;
  }
}

.homeContainer .content {
  position: relative;
  padding: 50px;
  margin: 0;
  border-radius: 20px;
  display: flex;
  flex-direction: row;
  align-items: center;
  max-width: 1400px;
  height: 100vh;
  padding-top: 140px;
}

.box {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.details {
  width: 60%;
  padding: 40px;
  background: rgba(26, 7, 51, 0.6);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.1);
  animation: slideInLeft 1s ease-out;
  position: relative;
  overflow: hidden;
}

.details::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.1) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(30deg);
  animation: shimmer 8s infinite;
  z-index: -1;
}

@keyframes shimmer {
  0% { transform: translateX(-100%) rotate(30deg); }
  100% { transform: translateX(100%) rotate(30deg); }
}

@keyframes slideInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.homeContainer h1 {
  font-size: 60px;
  text-transform: uppercase;
  font-weight: 800;
  margin-bottom: 20px;
  letter-spacing: 1px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
  position: relative;
  display: inline-block;
  background: linear-gradient(to right, #ffffff, #e1bee7);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: fadeIn 1s ease-out;
}

@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

.homeContainer h1::after {
  content: "";
  position: absolute;
  left: 0;
  bottom: -10px;
  width: 100px;
  height: 5px;
  background: linear-gradient(to right, #9c27b0, #e1bee7);
  border-radius: 2px;
  animation: widthExtend 1.5s ease-out;
}

@keyframes widthExtend {
  0% {
    width: 0;
  }
  100% {
    width: 100px;
  }
}

.homeContainer .rating {
  margin: 30px 0;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 15px;
  animation: fadeIn 1.5s ease-out;
}

.rating .stars {
  display: flex;
  gap: 2px;
}

.rating i {
  color: #ffeb3b;
  font-size: 20px;
  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.3));
}

.rating label {
  margin: 0 5px;
  color: #fff;
  font-weight: 600;
  font-size: 18px;
}

.rating span {
  background: linear-gradient(to right, #9c27b0, #673ab7);
  padding: 5px 15px;
  border-radius: 20px;
  color: white;
  font-weight: 700;
  font-size: 14px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  letter-spacing: 1px;
}

.movie-description {
  font-size: 16px;
  line-height: 1.8;
  color: rgba(255, 255, 255, 0.95);
  margin: 20px 0;
  max-width: 700px;
  background-color: rgba(0, 0, 0, 0.3);
  padding: 20px;
  border-radius: 15px;
  backdrop-filter: blur(10px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
  animation: fadeIn 2s ease-out;
  border-left: 3px solid #9c27b0;
}

.homeContainer .cast {
  margin: 30px 0;
  background-color: rgba(45, 8, 84, 0.6);
  padding: 25px;
  border-radius: 15px;
  backdrop-filter: blur(10px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(156, 39, 176, 0.2);
  animation: fadeIn 2.5s ease-out;
  border-left: 3px solid rgba(156, 39, 176, 0.7);
}

.cast h4 {
  font-weight: 500;
  margin-bottom: 12px;
  font-size: 16px;
  color: rgba(255, 255, 255, 0.9);
}

.cast h4:last-child {
  margin-bottom: 0;
}

.cast h4 span {
  color: #e1bee7;
  font-weight: 700;
  margin-right: 5px;
}

.playButton {
  width: 40%;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  animation: slideInRight 1s ease-out;
}

@keyframes slideInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.playButton .img {
  position: relative;
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  margin-bottom: 20px;
  filter: drop-shadow(0 10px 25px rgba(156, 39, 176, 0.7));
}

.playButton .img:hover {
  transform: scale(1.2);
}

.change {
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
  transition: opacity 0.5s ease;
}

.playButton img {
  width: 140px;
  height: 140px;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

.playButton button:hover .change {
  opacity: 1;
}

.playButton button {
  cursor: pointer;
  padding: 0;
  margin: 0;
  background: none;
  border: none;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  font-weight: 600;
  letter-spacing: 2px;
  color: #fff;
  transition: all 0.3s ease;
  text-shadow: 0 0 10px rgba(0, 0, 0, 0.7);
}

.playButton button:hover {
  color: #e1bee7;
  transform: translateY(-3px);
}

.trailer-btn {
  display: inline-flex;
  align-items: center;
  gap: 10px;
  background: rgba(255, 255, 255, 0.2);
  border: none;
  padding: 12px 25px;
  border-radius: 50px;
  color: white;
  font-weight: 600;
  font-size: 16px;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  margin-top: 10px;
  backdrop-filter: blur(5px);
  border: 1px solid rgba(255, 255, 255, 0.3);
}

.trailer-btn:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-3px);
  box-shadow: 0 7px 20px rgba(0, 0, 0, 0.3);
}

.primary-btn {
  background: linear-gradient(to right, #9c27b0, #673ab7);
  border: none;
  padding: 16px 35px;
  border-radius: 50px;
  color: white;
  font-weight: 600;
  font-size: 16px;
  cursor: pointer;
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  box-shadow: 0 10px 25px rgba(156, 39, 176, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  margin-top: 30px;
  position: relative;
  overflow: hidden;
  animation: fadeIn 3s ease-out;
}

.primary-btn::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.3) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transition: all 0.5s ease;
}

.primary-btn:hover::before {
  left: 100%;
}

.primary-btn:hover {
  transform: translateY(-5px) scale(1.05);
  box-shadow: 0 15px 30px rgba(156, 39, 176, 0.7);
  background: linear-gradient(to right, #7b1fa2, #512da8);
}

.primary-btn i {
  font-size: 18px;
}

.margin {
  margin-top: 100vh;
  position: relative;
}

/* Custom Dots */
.custom-dots {
  position: absolute;
  bottom: 30px;
  display: flex !important;
  justify-content: center;
  padding: 0;
  margin: 0;
  list-style: none;
  text-align: center;
  width: 100%;
  z-index: 100;
}

.custom-dots li {
  position: relative;
  display: inline-block;
  width: 12px;
  height: 12px;
  margin: 0 5px;
  cursor: pointer;
}

.custom-dots li button {
  width: 40px;
  height: 4px;
  border-radius: 2px;
  background-color: rgba(255, 255, 255, 0.4);
  border: none;
  cursor: pointer;
  padding: 0;
  transition: all 0.3s ease;
}

.custom-dots li.slick-active button {
  background-color: #9c27b0;
  width: 50px;
}

.custom-dots li button:before {
  display: none;
}

/* Slider controls */
.control-btn {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 99;
}

.control-btn button {
  background: rgba(26, 7, 51, 0.5);
  backdrop-filter: blur(10px);
  width: 60px;
  height: 60px;
  border-radius: 50%;
  cursor: pointer;
  border: 1px solid rgba(156, 39, 176, 0.3);
  outline: none;
  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
}

.control-btn button:hover {
  background: rgba(156, 39, 176, 0.7);
  border-color: rgba(255, 255, 255, 0.5);
  transform: scale(1.1);
}

.control-btn .next {
  position: absolute;
  right: 40px;
}

.control-btn .prev {
  position: absolute;
  left: 40px;
}

.control-btn i {
  color: white;
  font-size: 24px;
}

/* Loading */
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background: linear-gradient(to right bottom, #1a0733, #4a148c, #7b1fa2);
  position: relative;
  overflow: hidden;
}

.loading-container::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="0" y="0"></rect><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="50" y="50"></rect></svg>');
  background-size: 30px;
  opacity: 0.1;
}

.loader {
  width: 80px;
  height: 80px;
  border: 5px solid rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  border-top-color: #fff;
  animation: spin 1s linear infinite;
  margin-bottom: 30px;
  box-shadow: 0 0 30px rgba(156, 39, 176, 0.5);
}

.loading-container p {
  color: white;
  font-size: 20px;
  font-weight: 500;
  letter-spacing: 1px;
  animation: fadeInOut 1.5s infinite;
}

@keyframes fadeInOut {
  0%, 100% {
    opacity: 0.7;
  }
  50% {
    opacity: 1;
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Page transition effect */
.page-transition {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: #1a0733;
  z-index: 9999;
  transform: translateY(100%);
  animation: pageSlidein 1s ease-in-out;
}

@keyframes pageSlidein {
  0% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(-100%);
  }
}

/* Movie metadata badges */
.movie-metadata {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 20px;
  animation: fadeIn 2.7s ease-out;
}

.metadata-badge {
  background: rgba(156, 39, 176, 0.3);
  border: 1px solid rgba(156, 39, 176, 0.5);
  padding: 8px 16px;
  border-radius: 30px;
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  font-weight: 500;
  backdrop-filter: blur(5px);
  transition: all 0.3s ease;
}

.metadata-badge:hover {
  background: rgba(156, 39, 176, 0.5);
  transform: translateY(-3px);
}

.metadata-badge i {
  color: rgba(255, 255, 255, 0.8);
  font-size: 14px;
}

/* Slick slide customization */
.homeContainer .slick-slider,
.homeContainer .slick-list,
.homeContainer .slick-track,
.homeContainer .slick-slide > div {
  height: 100vh;
}

.homeContainer .slick-slide {
  height: 100vh;
}

/* Box height correction */
.box {
  height: 100vh;
}

/* Margin cleanup */
.margin {
  display: none;
}

@media only screen and (max-width: 1200px) {
  .details {
    width: 70%;
  }
  
  .playButton {
    width: 30%;
  }
  
  .homeContainer h1 {
    font-size: 48px;
  }
  
  .movie-description, .cast {
    max-width: 100%;
  }
}

@media only screen and (max-width: 992px) {
  .homeContainer .content {
    flex-direction: column;
    padding: 30px;
    margin: 0;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
  
  .details {
    width: 90%;
    padding: 30px;
    margin-bottom: 40px;
  }
  
  .playButton {
    width: 100%;
    margin-top: 0;
  }
  
  .homeContainer h1 {
    font-size: 42px;
  }
  
  .control-btn button {
    width: 50px;
    height: 50px;
  }
  
  .control-btn i {
    font-size: 20px;
  }
}

@media only screen and (max-width: 768px) {
  .homeContainer h1 {
    font-size: 36px;
  }
  
  .home {
    height: 100vh;
    min-height: 100vh;
  }
  
  .coverImage img {
    height: 100vh;
  }
  
  .coverImage::after {
    height: 100%;
  }
  
  .homeContainer .content {
    padding: 20px;
    margin: 0;
    height: 100vh;
    justify-content: center;
  }
  
  .details {
    width: 100%;
    padding: 20px;
    overflow-y: auto;
    max-height: 70vh;
  }
  
  .rating label, .rating span {
    font-size: 14px;
  }
  
  .rating i {
    font-size: 16px;
  }
  
  .movie-description {
    font-size: 14px;
    padding: 15px;
  }
  
  .cast {
    padding: 15px;
  }
  
  .cast h4 {
    font-size: 14px;
  }
  
  .playButton img {
    width: 100px;
    height: 100px;
  }
  
  .playButton button {
    font-size: 18px;
  }
  
  .primary-btn {
    padding: 14px 28px;
    font-size: 14px;
    margin-top: 20px;
  }
  
  .custom-dots {
    bottom: 100px;
  }
  
  .custom-dots li button {
    width: 30px;
    height: 3px;
  }
  
  .control-btn {
    display: none;
  }
  
  .metadata-badge {
    padding: 6px 12px;
    font-size: 12px;
  }
}

@media only screen and (max-width: 576px) {
  .homeContainer h1 {
    font-size: 28px;
  }
  
  .homeContainer .content {
    padding: 15px;
  }
  
  .details {
    padding: 15px;
  }
  
  .movie-description {
    font-size: 13px;
    padding: 10px;
  }
  
  .cast {
    padding: 12px;
  }
  
  .rating {
    margin: 15px 0;
    gap: 8px;
  }
  
  .playButton img {
    width: 80px;
    height: 80px;
  }
  
  .playButton button {
    font-size: 16px;
  }
  
  .primary-btn {
    padding: 12px 24px;
    font-size: 13px;
  }
  
  .custom-dots {
    bottom: 70px;
  }
  
  .custom-dots li button {
    width: 20px;
  }
}
--- END OF FILE netflix-clone/src/components/homes/home.css ---

--- START OF FILE netflix-clone/src/components/login/Login.css ---
/* src/components/login/Login.css */

/* Ana Container */
.login-container {
  position: relative;
  height: 100vh;
  background: linear-gradient(135deg, #0f0f23, #1a1a2e, #16213e);
  display: flex;
  flex-direction: column;
  font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  overflow: hidden;
}

/* Arkaplan Stili */
.background-overlay {
  position: absolute;
  inset: 0;
  overflow: hidden;
}

.overlay {
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(15, 15, 35, 0.9), 
    rgba(26, 26, 46, 0.85),
    rgba(22, 33, 62, 0.8)
  );
  z-index: 10;
  backdrop-filter: blur(8px);
}

.background-image-container {
  position: relative;
  height: 100%;
  width: 100%;
}

.background-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  position: absolute;
  opacity: 0.3;
  filter: sepia(0.3) hue-rotate(240deg) brightness(0.7);
  animation: floating 15s infinite ease-in-out;
}

@keyframes floating {
  0%, 100% { transform: scale(1) rotate(0deg); }
  50% { transform: scale(1.05) rotate(0.5deg); }
}

/* Particle Effects */
.login-container::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: 
    radial-gradient(2px 2px at 20px 30px, #8b5cf6, transparent),
    radial-gradient(2px 2px at 40px 70px, #a855f7, transparent),
    radial-gradient(1px 1px at 90px 40px, #c084fc, transparent),
    radial-gradient(1px 1px at 130px 80px, #ddd6fe, transparent);
  background-repeat: repeat;
  background-size: 200px 100px;
  animation: sparkle 8s linear infinite;
  z-index: 5;
  opacity: 0.3;
}

@keyframes sparkle {
  0% { transform: translateY(0px); }
  100% { transform: translateY(-100px); }
}

/* Header Stili */
.login-header {
  position: relative;
  z-index: 20;
  padding: 2rem 2rem;
  background: rgba(255, 255, 255, 0.02);
  backdrop-filter: blur(20px);
  border-bottom: 1px solid rgba(139, 92, 246, 0.2);
}

@media (min-width: 768px) {
  .login-header {
    padding: 2rem 4rem;
  }
}

.header-content {
  display: flex;
  align-items: center;
  justify-content: center;
}

.logo {
  background: linear-gradient(135deg, #8b5cf6, #a855f7, #c084fc);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-size: 2.5rem;
  font-weight: 900;
  letter-spacing: -1px;
  text-shadow: 0 0 30px rgba(139, 92, 246, 0.5);
  transition: all 0.4s ease;
  position: relative;
}

.logo::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, #8b5cf6, #a855f7);
  opacity: 0;
  z-index: -1;
  border-radius: 8px;
  transition: opacity 0.3s ease;
}

.logo:hover::after {
  opacity: 0.1;
}

@media (min-width: 768px) {
  .logo {
    font-size: 3rem;
  }
}

/* Main Stili */
.login-main {
  position: relative;
  z-index: 20;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 2rem 1.5rem;
  flex: 1;
}

@media (min-width: 768px) {
  .login-main {
    padding: 2rem 0;
  }
}

.auth-form-container {
  background: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.08), 
    rgba(255, 255, 255, 0.05),
    rgba(139, 92, 246, 0.08)
  );
  padding: 3rem 2.5rem;
  border-radius: 20px;
  width: 100%;
  max-width: 480px;
  margin: 2rem auto;
  box-shadow: 
    0 20px 60px rgba(139, 92, 246, 0.15),
    0 8px 32px rgba(0, 0, 0, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(139, 92, 246, 0.2);
  backdrop-filter: blur(20px);
  transition: all 0.4s ease;
  position: relative;
  overflow: hidden;
}

.auth-form-container::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, 
    transparent, 
    rgba(139, 92, 246, 0.1), 
    transparent
  );
  transition: left 0.8s ease;
}

.auth-form-container:hover::before {
  left: 100%;
}

.auth-form-container:hover {
  transform: translateY(-10px);
  box-shadow: 
    0 25px 80px rgba(139, 92, 246, 0.25),
    0 10px 40px rgba(0, 0, 0, 0.4);
  border-color: rgba(139, 92, 246, 0.4);
}

@media (min-width: 768px) {
  .auth-form-container {
    padding: 4rem 3.5rem;
  }
}

.auth-title {
  color: white;
  font-size: 2.25rem;
  font-weight: 700;
  margin-bottom: 3rem;
  text-align: center;
  letter-spacing: -0.5px;
  position: relative;
}

.auth-title::after {
  content: '';
  position: absolute;
  bottom: -15px;
  left: 50%;
  transform: translateX(-50%);
  height: 3px;
  width: 80px;
  background: linear-gradient(90deg, #8b5cf6, #a855f7, #c084fc);
  border-radius: 4px;
  animation: glow 2s ease-in-out infinite alternate;
}

@keyframes glow {
  from { box-shadow: 0 0 10px rgba(139, 92, 246, 0.5); }
  to { box-shadow: 0 0 20px rgba(139, 92, 246, 0.8); }
}

.error-message {
  background: linear-gradient(135deg, 
    rgba(239, 68, 68, 0.1), 
    rgba(220, 38, 38, 0.05)
  );
  border-left: 4px solid #ef4444;
  color: #fca5a5;
  border-radius: 12px;
  padding: 1.25rem;
  margin-bottom: 2rem;
  font-size: 0.95rem;
  animation: fadeIn 0.5s ease-out;
  box-shadow: 0 4px 12px rgba(239, 68, 68, 0.2);
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-20px); }
  to { opacity: 1; transform: translateY(0); }
}

.auth-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.form-group {
  position: relative;
  margin-bottom: 0.5rem;
}

.form-input {
  display: block;
  border-radius: 12px;
  padding: 1.8rem 1.5rem 0.8rem;
  width: 100%;
  color: white;
  background: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.05), 
    rgba(139, 92, 246, 0.05)
  );
  appearance: none;
  outline: none;
  border: 1.5px solid rgba(139, 92, 246, 0.2);
  transition: all 0.4s ease;
  font-size: 1rem;
  backdrop-filter: blur(10px);
  box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.1);
}

.form-input:focus {
  border-color: #8b5cf6;
  background: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.08), 
    rgba(139, 92, 246, 0.1)
  );
  box-shadow: 
    0 0 0 3px rgba(139, 92, 246, 0.2),
    inset 0 2px 8px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

.form-input::placeholder {
  color: transparent;
}

.form-label {
  position: absolute;
  color: #c7c7c7;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  transform: translateY(-0.75rem) scale(0.75);
  top: 1rem;
  z-index: 10;
  left: 1.5rem;
  transform-origin: 0;
  pointer-events: none;
  font-weight: 500;
  font-size: 1rem;
}

.form-input:placeholder-shown + .form-label {
  transform: translateY(0.5rem) scale(1);
  color: #9ca3af;
}

.form-input:focus + .form-label {
  transform: translateY(-1.2rem) scale(0.75);
  color: #8b5cf6;
}

.submit-button {
  background: linear-gradient(135deg, #8b5cf6, #a855f7, #7c3aed);
  padding: 1.25rem;
  border-radius: 12px;
  width: 100%;
  margin-top: 2rem;
  font-weight: 600;
  font-size: 1.1rem;
  transition: all 0.4s ease;
  color: white;
  border: none;
  box-shadow: 
    0 8px 24px rgba(139, 92, 246, 0.3),
    0 4px 12px rgba(0, 0, 0, 0.2);
  letter-spacing: 0.5px;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.submit-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, 
    transparent, 
    rgba(255, 255, 255, 0.2), 
    transparent
  );
  transition: left 0.6s ease;
}

.submit-button:hover::before {
  left: 100%;
}

.submit-button:hover {
  background: linear-gradient(135deg, #7c3aed, #8b5cf6, #6d28d9);
  transform: translateY(-3px);
  box-shadow: 
    0 12px 32px rgba(139, 92, 246, 0.4),
    0 8px 16px rgba(0, 0, 0, 0.3);
}

.submit-button:active {
  transform: translateY(-1px);
  box-shadow: 
    0 6px 16px rgba(139, 92, 246, 0.4),
    0 4px 8px rgba(0, 0, 0, 0.3);
}

.auth-switch {
  color: #c7c7c7;
  margin-top: 2rem;
  text-align: center;
  font-size: 1rem;
  line-height: 1.6;
}

.auth-switch-link {
  color: #a855f7;
  margin-left: 0.5rem;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.3s ease;
  position: relative;
}

.auth-switch-link::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 0;
  height: 2px;
  background: linear-gradient(90deg, #8b5cf6, #a855f7);
  transition: width 0.3s ease;
}

.auth-switch-link:hover::after {
  width: 100%;
}

.auth-switch-link:hover {
  color: #8b5cf6;
  text-shadow: 0 0 8px rgba(139, 92, 246, 0.5);
}

/* Footer Stili */
.login-footer {
  position: relative;
  z-index: 20;
  width: 100%;
  padding: 2rem 0;
  color: #9ca3af;
  font-size: 0.875rem;
  border-top: 1px solid rgba(139, 92, 246, 0.2);
  background: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.02), 
    rgba(139, 92, 246, 0.05)
  );
  backdrop-filter: blur(20px);
}

.footer-content {
  max-width: 1280px;
  margin: 0 auto;
  padding: 0 2rem;
}

@media (min-width: 768px) {
  .footer-content {
    padding: 0 4rem;
  }
}

.copyright {
  text-align: center;
  opacity: 0.9;
  transition: all 0.3s ease;
  font-weight: 500;
}

.copyright:hover {
  opacity: 1;
  color: #c084fc;
}

/* Responsive Tasarım İyileştirmeleri */
@media (max-width: 480px) {
  .auth-form-container {
    padding: 2rem 1.5rem;
    margin: 1rem auto;
  }
  
  .auth-title {
    font-size: 1.875rem;
  }
  
  .logo {
    font-size: 2rem;
  }
}
--- END OF FILE netflix-clone/src/components/login/Login.css ---

--- START OF FILE netflix-clone/src/components/login/Login.jsx ---
// src/components/login/Login.jsx
import { useState } from "react";
import "./Login.css";

export default function Login() {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [error, setError] = useState("");

  const toggleAuthMode = () => {
    setIsLogin(!isLogin);
    setError("");
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Form doğrulama
    if (!email || !password || (!isLogin && !name)) {
      setError("Lütfen tüm alanları doldurun.");
      return;
    }

    // Burada gerçek kimlik doğrulama kodunuz olacak
    console.log(isLogin ? "Giriş yapılıyor..." : "Kayıt olunuyor...", {
      email,
      password,
      name,
    });

    // API isteği örneği:
    // const response = await fetch('/api/auth', {
    //   method: 'POST',
    //   body: JSON.stringify({ email, password, name }),
    //   headers: { 'Content-Type': 'application/json' }
    // });
  };

  return (
    <div className="login-container">
      {/* Arkaplan Görseli */}
      <div className="background-overlay">
        <div className="overlay"></div>
        <div className="background-image-container">
          <img
            src="/api/placeholder/1920/1080"
            alt="Film Arkaplan"
            className="background-image"
          />
        </div>
      </div>

      {/* Header */}
      <header className="login-header">
        <div className="header-content">
          <div className="logo">FilmFlix</div>
        </div>
      </header>

      {/* Auth Form */}
      <main className="login-main">
        <div className="auth-form-container">
          <h2 className="auth-title">{isLogin ? "Giriş Yap" : "Kayıt Ol"}</h2>

          {error && <div className="error-message">{error}</div>}

          <form onSubmit={handleSubmit} className="auth-form">
            {!isLogin && (
              <div className="form-group">
                <input
                  type="text"
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  className="form-input"
                  placeholder=" "
                />
                <label htmlFor="name" className="form-label">
                  Ad Soyad
                </label>
              </div>
            )}

            <div className="form-group">
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="form-input"
                placeholder=" "
              />
              <label htmlFor="email" className="form-label">
                E-posta
              </label>
            </div>

            <div className="form-group">
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="form-input"
                placeholder=" "
              />
              <label htmlFor="password" className="form-label">
                Şifre
              </label>
            </div>

            <button type="submit" className="submit-button">
              {isLogin ? "Giriş Yap" : "Kayıt Ol"}
            </button>

            <div className="auth-switch">
              {isLogin ? "FilmFlix'e yeni misiniz?" : "Zaten hesabınız var mı?"}
              <span onClick={toggleAuthMode} className="auth-switch-link">
                {isLogin ? "Şimdi kaydolun." : "Giriş yapın."}
              </span>
            </div>
          </form>
        </div>
      </main>

      {/* Footer */}
      <footer className="login-footer">
        <div className="footer-content">
          <p className="copyright">© 2025 ByRustemzade. Tüm hakları saklıdır.</p>
        </div>
      </footer>
    </div>
  );
}

--- END OF FILE netflix-clone/src/components/login/Login.jsx ---

--- START OF FILE netflix-clone/src/components/movies/Movies.css ---
/* Import fonts */
@import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;800&family=Poppins:wght@300;400;500;600;700&display=swap");

/* Movies Page Scoped Styles - All styles will be contained within .movies-container */
.movies-container {
  /* Core Variables */
  --movies-primary: #8957ff;
  --movies-primary-light: #af8aff;
  --movies-primary-dark: #6736e4;
  --movies-secondary: #ff5e84;
  --movies-dark: #0a0b1a;
  --movies-dark-light: #131429;
  --movies-dark-medium: #1d1e3d;
  --movies-background: #070818;
  --movies-text: #ffffff;
  --movies-text-secondary: rgba(255, 255, 255, 0.7);
  --movies-text-tertiary: rgba(255, 255, 255, 0.5);
  --movies-shadow: 0 8px 30px rgba(0, 0, 0, 0.8);
  --movies-shadow-soft: 0 5px 20px rgba(0, 0, 0, 0.4);
  --movies-gradient-primary: linear-gradient(
    45deg,
    var(--movies-primary),
    var(--movies-secondary)
  );
  --movies-gradient-dark: linear-gradient(45deg, #121433, #1e1b3a);
  --movies-transition-fast: 0.3s ease;
  --movies-transition-smooth: 0.5s cubic-bezier(0.33, 1, 0.68, 1);
  --movies-radius-small: 8px;
  --movies-radius-medium: 16px;
  --movies-radius-large: 24px;
  --movies-font-primary: "Montserrat", sans-serif;
  --movies-font-secondary: "Poppins", sans-serif;

  /* Container styles */
  min-height: 100vh;
  position: relative;
  font-family: var(--movies-font-secondary);
  background-color: var(--movies-background);
  color: var(--movies-text);
  line-height: 1.6;
  padding-bottom: 40px;
}

/* Reset for children elements inside the container */
.movies-container *,
.movies-container *::before,
.movies-container *::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.movies-container button,
.movies-container input {
  font-family: inherit;
}

.movies-container a {
  text-decoration: none;
  color: inherit;
}

.movies-container button {
  cursor: pointer;
  border: none;
  background: none;
  outline: none;
}

.movies-container img {
  max-width: 100%;
  height: auto;
}

/* Loading Screen */
.movies-container .loader-screen {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--movies-background);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.movies-container .loader-content {
  text-align: center;
  max-width: 300px;
}

.movies-container .loader-icon {
  margin-bottom: 20px;
  position: relative;
}

.movies-container .film-reel {
  width: 80px;
  height: 80px;
  background: var(--movies-gradient-primary);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto;
  animation: movies-pulse 1.5s infinite alternate;
  box-shadow: var(--movies-shadow);
}

.movies-container .film-reel i {
  font-size: 36px;
  color: white;
}

.movies-container .loader-content h2 {
  font-family: var(--movies-font-primary);
  font-size: 28px;
  font-weight: 800;
  margin-bottom: 10px;
  background: var(--movies-gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.movies-container .loader-content p {
  font-size: 16px;
  color: var(--movies-text-secondary);
  margin-bottom: 20px;
}

.movies-container .loader-bar {
  height: 4px;
  background: var(--movies-dark-medium);
  border-radius: 4px;
  overflow: hidden;
  position: relative;
}

.movies-container .loader-progress {
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 30%;
  background: var(--movies-gradient-primary);
  border-radius: 4px;
  animation: movies-progress 2s infinite;
}

@keyframes movies-pulse {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  100% {
    transform: scale(1.1);
    opacity: 0.8;
  }
}

@keyframes movies-progress {
  0% {
    width: 0%;
    left: 0;
  }
  50% {
    width: 30%;
  }
  100% {
    width: 0%;
    left: 100%;
  }
}

/* Hero Section */
.movies-container .hero-section {
  position: relative;
  min-height: 550px;
  display: flex;
  align-items: center;
  padding: 80px 10% 100px;
  z-index: 1;
  overflow: hidden;
}

.movies-container .hero-backdrop {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
      0deg,
      var(--movies-background) 0%,
      rgba(7, 8, 24, 0.8) 50%,
      rgba(0, 0, 0, 0) 100%
    ),
    url("https://via.placeholder.com/1920x1080") center/cover no-repeat;
  z-index: -1;
}

.movies-container .hero-content {
  max-width: 700px;
  position: relative;
  z-index: 2;
}

.movies-container .hero-content h1 {
  font-family: var(--movies-font-primary);
  font-weight: 800;
  font-size: 48px;
  line-height: 1.2;
  margin-bottom: 24px;
  background: var(--movies-gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: movies-fadeInUp 0.8s ease both;
  animation-delay: 0.2s;
}

.movies-container .hero-content p {
  font-size: 18px;
  color: var(--movies-text-secondary);
  margin-bottom: 40px;
  max-width: 600px;
  animation: movies-fadeInUp 0.8s ease both;
  animation-delay: 0.4s;
}

.movies-container .search-box {
  display: flex;
  align-items: center;
  background: var(--movies-dark-light);
  border-radius: var(--movies-radius-large);
  padding: 6px 6px 6px 20px;
  margin-bottom: 30px;
  box-shadow: var(--movies-shadow-soft);
  border: 1px solid rgba(255, 255, 255, 0.1);
  animation: movies-fadeInUp 0.8s ease both;
  animation-delay: 0.6s;
}

.movies-container .search-box i {
  color: var(--movies-text-tertiary);
  font-size: 18px;
  margin-right: 12px;
}

.movies-container .search-box input {
  background: transparent;
  border: none;
  flex: 1;
  height: 48px;
  color: var(--movies-text);
  font-size: 16px;
  outline: none;
}

.movies-container .search-box input::placeholder {
  color: var(--movies-text-tertiary);
}

.movies-container .search-box button {
  background: var(--movies-gradient-primary);
  color: white;
  font-weight: 600;
  padding: 0 24px;
  height: 48px;
  border-radius: var(--movies-radius-medium);
  transition: var(--movies-transition-fast);
}

.movies-container .search-box button:hover {
  opacity: 0.9;
  transform: translateY(-2px);
}

.movies-container .hero-badges {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
  animation: movies-fadeInUp 0.8s ease both;
  animation-delay: 0.8s;
}

.movies-container .hero-badge {
  display: flex;
  align-items: center;
  padding: 8px 16px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: var(--movies-radius-medium);
  backdrop-filter: blur(10px);
  font-size: 14px;
}

.movies-container .hero-badge i {
  margin-right: 8px;
  color: var(--movies-primary-light);
}

/* Category Tabs */
.movies-container .category-tabs {
  display: flex;
  justify-content: center;
  padding: 20px 0;
  position: relative;
  z-index: 2;
  background: var(--movies-dark-light);
  margin: 0 40px;
  border-radius: var(--movies-radius-large);
  box-shadow: var(--movies-shadow);
  transform: translateY(-30px);
  animation: movies-fadeInUp 0.8s ease both;
  animation-delay: 1s;
}

.movies-container .category-tabs button {
  padding: 12px 24px;
  font-weight: 600;
  color: var(--movies-text-secondary);
  transition: var(--movies-transition-fast);
  position: relative;
  border-radius: var(--movies-radius-medium);
}

.movies-container .category-tabs button:hover {
  color: var(--movies-text);
}

.movies-container .category-tabs button.active {
  color: var(--movies-text);
  background: var(--movies-dark-medium);
}

.movies-container .category-tabs button.active::after {
  content: "";
  position: absolute;
  bottom: 5px;
  left: 50%;
  transform: translateX(-50%);
  width: 20px;
  height: 3px;
  background: var(--movies-primary);
  border-radius: 3px;
}

/* Main Content */
.movies-container .movies-main {
  padding: 20px 40px 60px;
}

/* Movie Slider */
.movies-container .movie-slider {
  margin-bottom: 60px;
  animation: movies-fadeIn 1s ease both;
}

.movies-container .slider-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 24px;
}

.movies-container .slider-title h2 {
  font-family: var(--movies-font-primary);
  font-size: 28px;
  font-weight: 700;
  margin-bottom: 8px;
  position: relative;
  display: inline-block;
}

.movies-container .slider-title h2::after {
  content: "";
  position: absolute;
  bottom: -8px;
  left: 0;
  width: 40px;
  height: 3px;
  background: var(--movies-primary);
  border-radius: 3px;
}

.movies-container .slider-description {
  font-size: 15px;
  color: var(--movies-text-tertiary);
  max-width: 300px;
}

.movies-container .slider-view-more {
  display: flex;
  align-items: center;
  font-size: 15px;
  font-weight: 500;
  color: var(--movies-primary-light);
  transition: var(--movies-transition-fast);
}

.movies-container .slider-view-more i {
  margin-left: 8px;
  transition: var(--movies-transition-fast);
}

.movies-container .slider-view-more:hover {
  color: var(--movies-primary);
}

.movies-container .slider-view-more:hover i {
  transform: translateX(5px);
}

.movies-container .slider-content {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  gap: 30px;
}

/* Movie Card */
.movies-container .movie-card {
  position: relative;
  border-radius: var(--movies-radius-medium);
  overflow: hidden;
  box-shadow: var(--movies-shadow-soft);
  transition: var(--movies-transition-smooth);
  background: var(--movies-dark-light);
  height: 360px;
  animation: movies-fadeInUp 0.6s ease both;
  transform: translateY(30px);
  opacity: 0;
  animation-fill-mode: forwards;
}

.movies-container .movie-card:hover {
  transform: translateY(-10px) scale(1.02);
  box-shadow: var(--movies-shadow);
  z-index: 2;
}

.movies-container .movie-card-featured {
  grid-column: span 2;
  height: 400px;
}

.movies-container .movie-poster {
  width: 100%;
  height: 100%;
  position: relative;
}

.movies-container .movie-poster img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: var(--movies-transition-smooth);
}

.movies-container .movie-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    0deg,
    rgba(10, 11, 26, 0.9) 0%,
    rgba(10, 11, 26, 0.6) 40%,
    rgba(10, 11, 26, 0.2) 100%
  );
  transition: var(--movies-transition-smooth);
}

.movies-container .movie-card:hover .movie-overlay {
  background: linear-gradient(
    0deg,
    rgba(10, 11, 26, 0.95) 0%,
    rgba(10, 11, 26, 0.8) 50%,
    rgba(10, 11, 26, 0.6) 100%
  );
}

.movies-container .movie-card:hover .movie-poster img {
  transform: scale(1.1);
}

.movies-container .movie-rating {
  position: absolute;
  top: 15px;
  right: 15px;
  display: flex;
  align-items: center;
  padding: 6px 10px;
  background: rgba(0, 0, 0, 0.6);
  border-radius: var(--movies-radius-small);
  backdrop-filter: blur(4px);
  font-size: 13px;
  font-weight: 600;
  z-index: 1;
}

.movies-container .movie-rating i {
  color: #ffd700;
  margin-right: 5px;
  font-size: 12px;
}

.movies-container .movie-featured-badge {
  position: absolute;
  top: 15px;
  left: 15px;
  background: var(--movies-primary);
  color: white;
  padding: 6px 12px;
  border-radius: var(--movies-radius-small);
  font-size: 12px;
  font-weight: 600;
  z-index: 1;
  display: flex;
  align-items: center;
}

.movies-container .movie-featured-badge i {
  margin-right: 5px;
  font-size: 11px;
}

.movies-container .movie-content {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 20px;
  z-index: 2;
  transition: var(--movies-transition-smooth);
}

.movies-container .movie-title {
  font-family: var(--movies-font-primary);
  font-size: 18px;
  font-weight: 700;
  margin-bottom: 10px;
  transition: var(--movies-transition-fast);
}

.movies-container .movie-card-featured .movie-title {
  font-size: 24px;
}

.movies-container .movie-meta {
  display: flex;
  align-items: center;
  font-size: 14px;
  color: var(--movies-text-secondary);
  margin-bottom: 10px;
}

.movies-container .movie-dot {
  display: inline-block;
  width: 4px;
  height: 4px;
  border-radius: 50%;
  background: var(--movies-text-tertiary);
  margin: 0 8px;
}

.movies-container .movie-genres {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-bottom: 15px;
}

.movies-container .genre-tag {
  font-size: 12px;
  padding: 4px 10px;
  border-radius: 30px;
  background: rgba(255, 255, 255, 0.1);
  color: var(--movies-text-secondary);
  transition: var(--movies-transition-fast);
}

.movies-container .movie-card:hover .genre-tag {
  background: rgba(255, 255, 255, 0.15);
}

.movies-container .movie-description {
  font-size: 14px;
  color: var(--movies-text-tertiary);
  margin-bottom: 15px;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  transition: var(--movies-transition-smooth);
  opacity: 0;
  max-height: 0;
}

.movies-container .movie-card:hover .movie-description {
  opacity: 1;
  max-height: 100px;
}

.movies-container .movie-actions {
  display: flex;
  align-items: center;
  gap: 10px;
  opacity: 0;
  transform: translateY(20px);
  transition: var(--movies-transition-smooth);
  transition-delay: 0.1s;
}

.movies-container .movie-card:hover .movie-actions {
  opacity: 1;
  transform: translateY(0);
}

.movies-container .btn-watch {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  background: var(--movies-gradient-primary);
  padding: 10px 20px;
  border-radius: var(--movies-radius-small);
  font-weight: 600;
  font-size: 14px;
  flex: 1;
  transition: var(--movies-transition-fast);
}

.movies-container .btn-watch:hover {
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(137, 87, 255, 0.4);
}

.movies-container .btn-circle {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  transition: var(--movies-transition-fast);
}

.movies-container .btn-circle:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateY(-3px);
}

/* Newsletter Section */
.movies-container .newsletter-section {
  background: var(--movies-dark-light);
  padding: 80px 0;
  margin-top: 40px;
  position: relative;
  overflow: hidden;
}

.movies-container .newsletter-section::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: radial-gradient(
    circle,
    rgba(137, 87, 255, 0.1) 0%,
    rgba(137, 87, 255, 0) 70%
  );
  opacity: 0.7;
  z-index: 0;
}

.movies-container .newsletter-content {
  max-width: 600px;
  margin: 0 auto;
  text-align: center;
  position: relative;
  z-index: 1;
}

.movies-container .newsletter-content h2 {
  font-family: var(--movies-font-primary);
  font-size: 32px;
  font-weight: 700;
  margin-bottom: 20px;
}

.movies-container .newsletter-content p {
  font-size: 16px;
  color: var(--movies-text-secondary);
  margin-bottom: 30px;
}

.movies-container .newsletter-form {
  display: flex;
  gap: 10px;
  max-width: 500px;
  margin: 0 auto;
}

.movies-container .newsletter-form input {
  flex: 1;
  height: 50px;
  border-radius: var(--movies-radius-medium);
  background: var(--movies-dark-medium);
  border: 1px solid rgba(255, 255, 255, 0.1);
  padding: 0 20px;
  color: var(--movies-text);
  font-size: 15px;
}

.movies-container .newsletter-form input::placeholder {
  color: var(--movies-text-tertiary);
}

.movies-container .newsletter-form button {
  height: 50px;
  padding: 0 24px;
  background: var(--movies-gradient-primary);
  color: white;
  font-weight: 600;
  border-radius: var(--movies-radius-medium);
  transition: var(--movies-transition-fast);
}

.movies-container .newsletter-form button:hover {
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(137, 87, 255, 0.4);
}

/* Animations - Scoped to avoid conflicts */
@keyframes movies-fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes movies-fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Responsive Styles */
@media (max-width: 1200px) {
  .movies-container .movies-main {
    padding: 20px 30px 50px;
  }

  .movies-container .slider-content {
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  }

  .movies-container .movie-card-featured {
    height: 380px;
  }
}

@media (max-width: 992px) {
  .movies-container .hero-section {
    padding: 60px 6% 80px;
  }

  .movies-container .hero-content h1 {
    font-size: 36px;
  }

  .movies-container .hero-content p {
    font-size: 16px;
  }

  .movies-container .movies-main {
    padding: 20px 20px 40px;
  }

  .movies-container .slider-title h2 {
    font-size: 24px;
  }

  .movies-container .slider-content {
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
  }

  .movies-container .movie-card {
    height: 320px;
  }

  .movies-container .movie-card-featured {
    grid-column: span 1;
    height: 320px;
  }

  .movies-container .category-tabs {
    overflow-x: auto;
    justify-content: flex-start;
    padding: 15px;
    margin: 0 20px;
    transform: translateY(-25px);
  }

  .movies-container .category-tabs button {
    padding: 10px 20px;
    white-space: nowrap;
  }
}

@media (max-width: 768px) {
  .movies-container .hero-section {
    padding: 50px 5% 70px;
    min-height: 480px;
  }

  .movies-container .hero-content h1 {
    font-size: 32px;
  }

  .movies-container .hero-badges {
    gap: 10px;
  }

  .movies-container .hero-badge {
    padding: 6px 12px;
    font-size: 12px;
  }

  .movies-container .newsletter-content h2 {
    font-size: 26px;
  }

  .movies-container .newsletter-form {
    flex-direction: column;
  }

  .movies-container .newsletter-form button {
    width: 100%;
  }

  .movies-container .slider-content {
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 15px;
  }

  .movies-container .movie-card {
    height: 300px;
  }

  .movies-container .movie-title {
    font-size: 16px;
  }
}

@media (max-width: 576px) {
  .movies-container .hero-section {
    padding: 40px 5% 60px;
    min-height: 450px;
  }

  .movies-container .hero-content h1 {
    font-size: 28px;
  }

  .movies-container .hero-content p {
    font-size: 15px;
    margin-bottom: 30px;
  }

  .movies-container .search-box {
    padding: 5px 5px 5px 15px;
  }

  .movies-container .search-box input {
    height: 40px;
    font-size: 14px;
  }

  .movies-container .search-box button {
    height: 40px;
    padding: 0 15px;
    font-size: 14px;
  }

  .movies-container .movies-main {
    padding: 15px 15px 30px;
  }

  .movies-container .movie-slider {
    margin-bottom: 40px;
  }

  .movies-container .slider-header {
    flex-direction: column;
    margin-bottom: 15px;
  }

  .movies-container .slider-view-more {
    margin-top: 10px;
  }

  .movies-container .slider-content {
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
  }

  .movies-container .movie-card {
    height: 240px;
  }

  .movies-container .movie-title {
    font-size: 14px;
    margin-bottom: 5px;
  }

  .movies-container .movie-meta {
    font-size: 12px;
    margin-bottom: 8px;
  }

  .movies-container .movie-rating {
    top: 10px;
    right: 10px;
    padding: 4px 8px;
    font-size: 12px;
  }

  .movies-container .movie-featured-badge {
    top: 10px;
    left: 10px;
    padding: 4px 8px;
    font-size: 11px;
  }

  .movies-container .btn-watch {
    padding: 8px 12px;
    font-size: 13px;
  }

  .movies-container .btn-circle {
    width: 32px;
    height: 32px;
  }

  .movies-container .newsletter-section {
    padding: 50px 20px;
  }
}

--- END OF FILE netflix-clone/src/components/movies/Movies.css ---

--- START OF FILE netflix-clone/src/components/movies/Movies.jsx ---
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import {
  homeData,
  upcome,
  latest,
  trending,
  recommended,
} from "../../dummyData";
import "./Movies.css";

<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
></link>;

const MovieCard = ({ movie, index, isSpecial }) => {
  const [isHovered, setIsHovered] = useState(false);

  // Extract genres (limit to 2)
  const genres = movie.genres
    ? movie.genres
        .split(",")
        .slice(0, 2)
        .map((g) => g.trim())
    : [];

  // Determine the source for this movie
  const getMovieSource = () => {
    if (homeData.some((m) => m.id === movie.id)) return "homeData";
    if (trending.some((m) => m.id === movie.id)) return "trending";
    if (latest.some((m) => m.id === movie.id)) return "latest";
    if (upcome.some((m) => m.id === movie.id)) return "upcome";
    if (recommended.some((m) => m.id === movie.id)) return "recommended";

    // Default fallback
    return "homeData";
  };

  // Get the source for this movie
  const source = movie.source || getMovieSource();

  return (
    <div
      className={`movie-card ${isSpecial ? "movie-card-featured" : ""}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{
        animationDelay: `${index * 0.1}s`,
      }}
    >
      <div className="movie-poster">
        <img src={movie.cover} alt={movie.name} loading="lazy" />
        <div className="movie-overlay"></div>

        {movie.rating && (
          <div className="movie-rating">
            <i className="fas fa-star"></i>
            <span>{movie.rating}</span>
          </div>
        )}

        {isSpecial && (
          <div className="movie-featured-badge">
            <i className="fas fa-crown"></i> Featured
          </div>
        )}
      </div>

      <div className={`movie-content ${isHovered ? "hovered" : ""}`}>
        <h3 className="movie-title">{movie.name}</h3>

        <div className="movie-meta">
          <span className="movie-year">{movie.year || "2023"}</span>
          <span className="movie-dot"></span>
          <span className="movie-duration">{movie.time}</span>
        </div>

        {genres.length > 0 && (
          <div className="movie-genres">
            {genres.map((genre, i) => (
              <span key={i} className="genre-tag">
                {genre}
              </span>
            ))}
          </div>
        )}

        <div className="movie-description">
          {movie.desc ||
            "A thrilling cinematic journey that will keep you on the edge of your seat."}
        </div>

        <div className="movie-actions">
          {/* Updated Link with source and id parameters */}
          <Link to={`/singlePage/${source}/${movie.id}`} className="btn-watch">
            <i className="fas fa-play"></i>
            <span>Watch</span>
          </Link>

          <button className="btn-circle">
            <i className="fas fa-plus"></i>
          </button>

          <button className="btn-circle">
            <i className="fas fa-info"></i>
          </button>
        </div>
      </div>
    </div>
  );
};

const MovieSlider = ({ title, description, movies, category }) => {
  // Add source property to each movie based on its category
  const moviesWithSource = movies.map((movie) => ({
    ...movie,
    source:
      category === "featured"
        ? "homeData"
        : category === "upcoming"
        ? "upcome"
        : category === "latest"
        ? "latest"
        : category === "trending"
        ? "trending"
        : category === "recommended"
        ? "recommended"
        : "homeData", // Default fallback
  }));

  return (
    <section className="movie-slider">
      <div className="slider-header">
        <div className="slider-title">
          <h2>{title}</h2>
          {description && <p className="slider-description">{description}</p>}
        </div>

        <Link to={`/category/${category}`} className="slider-view-more">
          View More <i className="fas fa-arrow-right"></i>
        </Link>
      </div>

      <div className="slider-content">
        {moviesWithSource.slice(0, 5).map((movie, index) => (
          <MovieCard
            key={`${category}-${movie.id}`}
            movie={movie}
            index={index}
            isSpecial={index === 0}
          />
        ))}
      </div>
    </section>
  );
};

const SearchBox = () => {
  return (
    <div className="search-box">
      <i className="fas fa-search"></i>
      <input type="text" placeholder="Search for movies..." />
      <button>Search</button>
    </div>
  );
};

const Movies = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("all");

  // Simulate loading time
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 2000);

    return () => clearTimeout(timer);
  }, []);

  // Scroll to top when component mounts
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  if (isLoading) {
    return (
      <div className="movies-container">
        <div className="loader-screen">
          <div className="loader-content">
            <div className="loader-icon">
              <div className="film-reel">
                <i className="fas fa-film"></i>
              </div>
            </div>
            <h2>By Rustemzade</h2>
            <p>
              Özgün tasarımdır. Tutorial kullanılmadığını da belirtmek isterim. ツ
            </p>
            <div className="loader-bar">
              <div className="loader-progress"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="movies-container">
      {/* Hero Section */}
      <section className="hero-section">
        <div className="hero-content">
          <h1>The Ultimate Movie Experience</h1>
          <p>
            Discover thousands of movies, from timeless classics to the latest
            blockbusters. Your perfect movie night starts here.
          </p>

          <SearchBox />

          <div className="hero-badges">
            <div className="hero-badge">
              <i className="fas fa-film"></i>
              <span>10,000+ Movies</span>
            </div>
            <div className="hero-badge">
              <i className="fas fa-star"></i>
              <span>Top Ratings</span>
            </div>
            <div className="hero-badge">
              <i className="fas fa-award"></i>
              <span>Award Winners</span>
            </div>
          </div>
        </div>

        <div className="hero-backdrop"></div>
      </section>

      {/* Category Tabs */}
      <div className="category-tabs">
        <button
          className={activeTab === "all" ? "active" : ""}
          onClick={() => setActiveTab("all")}
        >
          All
        </button>
        <button
          className={activeTab === "movies" ? "active" : ""}
          onClick={() => setActiveTab("movies")}
        >
          Movies
        </button>
        <button
          className={activeTab === "series" ? "active" : ""}
          onClick={() => setActiveTab("series")}
        >
          TV Series
        </button>
        <button
          className={activeTab === "animation" ? "active" : ""}
          onClick={() => setActiveTab("animation")}
        >
          Animation
        </button>
        <button
          className={activeTab === "documentary" ? "active" : ""}
          onClick={() => setActiveTab("documentary")}
        >
          Documentary
        </button>
      </div>

      {/* Main Content */}
      <div className="movies-main">
        <MovieSlider
          title="Featured Movies"
          description="Hand-picked favorites just for you"
          movies={homeData}
          category="featured"
        />

        <MovieSlider
          title="Coming Soon"
          description="Be the first to watch"
          movies={upcome}
          category="upcoming"
        />

        <MovieSlider title="New Releases" movies={latest} category="latest" />

        <MovieSlider
          title="Trending Now"
          movies={trending}
          category="trending"
        />

        <MovieSlider
          title="Recommended For You"
          description="Based on your watching history"
          movies={recommended}
          category="recommended"
        />
      </div>

      {/* Newsletter Section */}
      <section className="newsletter-section">
        <div className="newsletter-content">
          <h2>Get Notified About New Releases</h2>
          <p>
            Subscribe to our newsletter and never miss out on new movies and
            exclusive offers.
          </p>

          <div className="newsletter-form">
            <input type="email" placeholder="Your email address" />
            <button>Subscribe</button>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Movies;

--- END OF FILE netflix-clone/src/components/movies/Movies.jsx ---

--- START OF FILE netflix-clone/src/components/mylist/MyList.jsx ---
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import "./mylist.css";
import {
  homeData,
  trending,
  latest,
  recommended,
  upcome,
  documentaries,
  animation,
} from "../../dummyData";

const MyList = () => {
  // Sample initial data - in a real app this would come from a database or localStorage
  const [savedItems, setSavedItems] = useState([]);
  const [viewMode, setViewMode] = useState("grid"); // grid or list
  const [sortBy, setSortBy] = useState("dateAdded"); // dateAdded, name, rating
  const [filterBy, setFilterBy] = useState("all"); // all, movies, shows
  const [isLoading, setIsLoading] = useState(true);

  // Combine all data sources for accurate source detection
  const allSources = {
    homeData,
    trending,
    latest,
    recommended,
    upcome,
    documentaries,
    animation,
  };

  // Function to determine the source of an item (kesin kaynak tespiti)
  const getExactSource = (item) => {
    for (const [sourceName, sourceItems] of Object.entries(allSources)) {
      // ID ve isim eşleşmesini kontrol et (daha kesin tespit için)
      const found = sourceItems.find(
        (i) => i.id === item.id && i.name === item.name
      );
      if (found) return sourceName;
    }
    // Bulunamazsa sadece ID üzerinden eşleşme ara
    for (const [sourceName, sourceItems] of Object.entries(allSources)) {
      if (sourceItems.some((i) => i.id === item.id)) return sourceName;
    }
    return "homeData"; // Varsayılan
  };

  // Combined data from all sources with necessary defaults
  const allItems = [
    ...homeData.map((item) => ({
      ...item,
      source: "homeData",
      rating: item.rating || 4.5,
      desc: item.desc || "No description available.",
      genres: item.genres || "Drama",
    })),
    ...trending.map((item) => ({
      ...item,
      source: "trending",
      rating: item.rating || 4.5,
      desc: item.desc || "No description available.",
      genres: item.genres || "Drama",
    })),
    ...latest.map((item) => ({
      ...item,
      source: "latest",
      rating: item.rating || 4.5,
      desc: item.desc || "No description available.",
      genres: item.genres || "Drama",
    })),
    ...recommended.map((item) => ({
      ...item,
      source: "recommended",
      rating: item.rating || 4.5,
      desc: item.desc || "No description available.",
      genres: item.genres || "Drama",
    })),
    ...upcome.map((item) => ({
      ...item,
      source: "upcome",
      rating: item.rating || 4.5,
      desc: item.desc || "No description available.",
      genres: item.genres || "Drama",
    })),
    ...documentaries.map((item) => ({
      ...item,
      source: "documentaries",
      rating: item.rating || 4.5,
      desc: item.desc || "No description available.",
      genres: item.genres || "Documentary",
    })),
    ...animation.map((item) => ({
      ...item,
      source: "animation",
      rating: item.rating || 4.5,
      desc: item.desc || "No description available.",
      genres: item.genres || "Animation",
    })),
  ];

  // This simulates fetching user's saved items from a database
  useEffect(() => {
    // Simulate loading delay
    const loadingTimer = setTimeout(() => {
      // Randomly select 8 items from our data sources to simulate saved content
      const randomItems = [...allItems]
        .sort(() => 0.5 - Math.random())
        .slice(0, 8)
        .map((item) => ({
          ...item,
          dateAdded: getRandomDate(), // Add a random date when the item was added to the list
          isTVShow: Math.random() > 0.5, // Randomly decide if it's a TV show or movie
          // Ensure each item has correct source information
          source: item.source || getExactSource(item),
        }));

      setSavedItems(randomItems);
      setIsLoading(false);
    }, 1200);

    return () => clearTimeout(loadingTimer);
  }, []);

  // Generate a random date within the last 30 days
  const getRandomDate = () => {
    const today = new Date();
    const pastDate = new Date(
      today.getTime() - Math.random() * 30 * 24 * 60 * 60 * 1000
    );
    return pastDate;
  };

  // Remove item from list
  const removeFromList = (id) => {
    setSavedItems(savedItems.filter((item) => item.id !== id));
  };

  // Handle sorting
  const sortItems = (items) => {
    switch (sortBy) {
      case "name":
        return [...items].sort((a, b) => a.name.localeCompare(b.name));
      case "rating":
        return [...items].sort((a, b) => b.rating - a.rating);
      case "dateAdded":
      default:
        return [...items].sort((a, b) => b.dateAdded - a.dateAdded);
    }
  };

  // Handle filtering
  const filterItems = (items) => {
    switch (filterBy) {
      case "movies":
        return items.filter((item) => !item.isTVShow);
      case "shows":
        return items.filter((item) => item.isTVShow);
      case "all":
      default:
        return items;
    }
  };

  // Format date for display
  const formatDate = (date) => {
    return date.toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    });
  };

  // Process items: filter then sort
  const processedItems = sortItems(filterItems(savedItems));

  // Check if list is empty based on current filters
  const isEmptyList = processedItems.length === 0;

  return (
    <div className="mylist-page">
      <div className="mylist-header">
        <div className="header-content">
          <h1>My List</h1>
          <p>Your personalized collection of movies and TV shows</p>
        </div>
      </div>

      <div className="mylist-container">
        {isLoading ? (
          <div className="loading-state">
            <div className="spinner"></div>
            <p>Loading your list...</p>
          </div>
        ) : (
          <>
            <div className="mylist-controls">
              <div className="list-filters">
                <div className="filter-group">
                  <label>Show:</label>
                  <select
                    value={filterBy}
                    onChange={(e) => setFilterBy(e.target.value)}
                  >
                    <option value="all">All Content</option>
                    <option value="movies">Movies Only</option>
                    <option value="shows">TV Shows Only</option>
                  </select>
                </div>

                <div className="filter-group">
                  <label>Sort By:</label>
                  <select
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value)}
                  >
                    <option value="dateAdded">Date Added</option>
                    <option value="name">Title</option>
                    <option value="rating">Rating</option>
                  </select>
                </div>
              </div>

              <div className="view-toggle">
                <button
                  className={viewMode === "grid" ? "active" : ""}
                  onClick={() => setViewMode("grid")}
                  aria-label="Grid view"
                >
                  <i className="fas fa-th"></i>
                </button>
                <button
                  className={viewMode === "list" ? "active" : ""}
                  onClick={() => setViewMode("list")}
                  aria-label="List view"
                >
                  <i className="fas fa-list"></i>
                </button>
              </div>
            </div>

            {isEmptyList ? (
              <div className="empty-list">
                <div className="empty-icon">
                  <i className="fas fa-film"></i>
                </div>
                <h3>Your list is empty</h3>
                <p>
                  {filterBy !== "all"
                    ? `No ${filterBy} found in your list.`
                    : "Start adding movies and TV shows to your list by clicking the '+' button when browsing content."}
                </p>
                <Link to="/" className="browse-btn">
                  Browse Content
                </Link>
              </div>
            ) : (
              <div
                className={`content-grid ${
                  viewMode === "list" ? "list-view" : "grid-view"
                }`}
              >
                {processedItems.map((item) => (
                  <div className="list-item" key={`${item.id}-${item.name}`}>
                    <div className="item-poster">
                      <img src={item.cover} alt={item.name} />
                      <div className="item-overlay">
                        <div className="overlay-buttons">
                          {/* Kesin kaynak bilgisini kullanarak link oluşturma */}
                          <Link
                            to={`/singlePage/${item.source}/${item.id}`}
                            className="play-btn"
                          >
                            <i className="fas fa-play"></i>
                          </Link>
                          <button
                            className="remove-btn"
                            onClick={() => removeFromList(item.id)}
                            title="Remove from My List"
                          >
                            <i className="fas fa-times"></i>
                          </button>
                        </div>
                      </div>

                      {item.isTVShow && (
                        <div className="content-badge">
                          <span>TV</span>
                        </div>
                      )}
                    </div>

                    <div className="item-info">
                      <h3 className="item-title">{item.name}</h3>

                      <div className="meta-info">
                        {item.rating && (
                          <span className="item-rating">
                            <i className="fas fa-star"></i> {item.rating}
                          </span>
                        )}
                        <span className="item-duration">{item.time}</span>
                        {item.genres && (
                          <span className="item-genre">{item.genres}</span>
                        )}
                      </div>

                      {viewMode === "list" && (
                        <p className="item-desc">
                          {item.desc?.substring(0, 120)}...
                        </p>
                      )}

                      <div className="item-footer">
                        <span className="added-date">
                          Added: {formatDate(item.dateAdded)}
                        </span>
                        <div className="action-btns">
                          <button
                            className="watch-later"
                            title="Move to watch later"
                          >
                            <i className="fas fa-clock"></i>
                          </button>
                          <button className="share-btn" title="Share">
                            <i className="fas fa-share-alt"></i>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default MyList;

--- END OF FILE netflix-clone/src/components/mylist/MyList.jsx ---

--- START OF FILE netflix-clone/src/components/mylist/mylist.css ---
.mylist-page {
  background-color: #0f0f1e;
  color: #fff;
  min-height: 100vh;
}

/* Header Styles */
.mylist-header {
  background: linear-gradient(to right, rgba(110, 72, 170, 0.9), rgba(157, 80, 187, 0.7)), 
              url('../../../public/images/img/slide1.jpg');
  background-size: cover;
  background-position: center;
  padding: 4rem 0 2rem;
  position: relative;
}

.mylist-header::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 100px;
  background: linear-gradient(to top, #0f0f1e, transparent);
}

.header-content {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 2rem;
  position: relative;
  z-index: 2;
}

.mylist-header h1 {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);
}

.mylist-header p {
  font-size: 1.2rem;
  color: rgba(255, 255, 255, 0.9);
  max-width: 600px;
}

/* Container Styles */
.mylist-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 2rem;
}

/* Controls Section */
.mylist-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  background-color: rgba(30, 30, 60, 0.5);
  padding: 1rem 1.5rem;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.list-filters {
  display: flex;
  gap: 1.5rem;
}

.filter-group {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.filter-group label {
  font-size: 0.9rem;
  color: #ccc;
}

.filter-group select {
  background-color: rgba(157, 80, 187, 0.2);
  border: 1px solid #6e48aa;
  color: #fff;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  appearance: none;
  background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23FFFFFF%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
  background-repeat: no-repeat;
  background-position: right 0.7rem top 50%;
  background-size: 0.65rem auto;
  min-width: 140px;
}

.filter-group select:hover {
  border-color: #9d50bb;
}

.view-toggle {
  display: flex;
  gap: 0.5rem;
}

.view-toggle button {
  background-color: rgba(157, 80, 187, 0.2);
  border: 1px solid #6e48aa;
  color: #ccc;
  width: 40px;
  height: 40px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
}

.view-toggle button:hover {
  background-color: rgba(157, 80, 187, 0.4);
  color: #fff;
}

.view-toggle button.active {
  background: linear-gradient(to right, #9d50bb, #6e48aa);
  color: #fff;
  border-color: transparent;
}

/* Grid and List Views */
.content-grid {
  display: grid;
  gap: 2rem;
}

.content-grid.grid-view {
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
}

.content-grid.list-view {
  grid-template-columns: 1fr;
  gap: 1.5rem;
}

.list-item {
  background-color: rgba(30, 30, 60, 0.4);
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.list-view .list-item {
  flex-direction: row;
  height: 200px;
}

.list-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
}

.item-poster {
  position: relative;
  height: 360px;
  overflow: hidden;
}

.list-view .item-poster {
  flex: 0 0 140px;
  height: 100%;
}

.item-poster img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.5s ease;
}

.list-item:hover .item-poster img {
  transform: scale(1.05);
}

.item-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(to top, rgba(15, 15, 30, 0.9), rgba(15, 15, 30, 0.5) 50%, rgba(15, 15, 30, 0.2));
  opacity: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: opacity 0.3s ease;
}

.list-item:hover .item-overlay {
  opacity: 1;
}

.overlay-buttons {
  display: flex;
  gap: 1rem;
}

.play-btn, .remove-btn {
  width: 45px;
  height: 45px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  cursor: pointer;
  color: #fff;
  border: none;
  text-decoration: none;
}

.play-btn {
  background: linear-gradient(to right, #9d50bb, #6e48aa);
  font-size: 1rem;
}

.play-btn:hover {
  transform: scale(1.1);
  background: linear-gradient(to right, #8a45a5, #5d3d91);
}

.remove-btn {
  background-color: rgba(255, 255, 255, 0.2);
  font-size: 0.9rem;
}

.remove-btn:hover {
  background-color: rgba(255, 40, 40, 0.7);
  transform: scale(1.1);
}

.content-badge {
  position: absolute;
  top: 10px;
  left: 10px;
  background: linear-gradient(to right, #9d50bb, #6e48aa);
  color: white;
  padding: 0.2rem 0.5rem;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 600;
  z-index: 2;
}

.item-info {
  padding: 1.2rem;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.list-view .item-info {
  flex: 1;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.item-title {
  font-size: 1.1rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  display: -webkit-box;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.list-view .item-title {
  font-size: 1.3rem;
  margin-bottom: 0.2rem;
}

.meta-info {
  display: flex;
  flex-wrap: wrap;
  gap: 0.8rem;
  margin-bottom: 0.8rem;
  font-size: 0.9rem;
}

.item-rating {
  color: #ffb700;
  display: flex;
  align-items: center;
  gap: 0.2rem;
}

.item-duration {
  color: #ccc;
}

.item-genre {
  color: #9d50bb;
  font-weight: 500;
}

.item-desc {
  color: #bbb;
  font-size: 0.9rem;
  line-height: 1.5;
  margin-bottom: 1rem;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.item-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: auto;
  padding-top: 0.8rem;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.added-date {
  font-size: 0.8rem;
  color: #aaa;
}

.action-btns {
  display: flex;
  gap: 0.5rem;
}

.watch-later, .share-btn {
  background: none;
  border: none;
  color: #ccc;
  font-size: 0.9rem;
  cursor: pointer;
  transition: color 0.3s ease;
}

.watch-later:hover, .share-btn:hover {
  color: #9d50bb;
}

/* Empty List State */
.empty-list {
  text-align: center;
  padding: 4rem 2rem;
  background-color: rgba(30, 30, 60, 0.3);
  border-radius: 8px;
  max-width: 600px;
  margin: 0 auto;
}

.empty-icon {
  font-size: 3rem;
  color: rgba(157, 80, 187, 0.7);
  margin-bottom: 1.5rem;
}

.empty-list h3 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: #eee;
}

.empty-list p {
  color: #bbb;
  margin-bottom: 2rem;
  font-size: 1rem;
  line-height: 1.5;
}

.browse-btn {
  background: linear-gradient(to right, #9d50bb, #6e48aa);
  color: white;
  text-decoration: none;
  padding: 0.8rem 2rem;
  border-radius: 50px;
  font-weight: 600;
  display: inline-block;
  transition: all 0.3s ease;
}

.browse-btn:hover {
  transform: scale(1.05);
  background: linear-gradient(to right, #8a45a5, #5d3d91);
}

/* Loading State */
.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 300px;
}

.spinner {
  border: 4px solid rgba(157, 80, 187, 0.3);
  border-radius: 50%;
  border-top: 4px solid #9d50bb;
  width: 50px;
  height: 50px;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
}

.loading-state p {
  color: #ccc;
  font-size: 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Media Queries */
@media (max-width: 768px) {
  .mylist-controls {
    flex-direction: column;
    gap: 1rem;
    align-items: flex-start;
  }

  .list-filters {
    flex-direction: column;
    gap: 1rem;
    width: 100%;
  }

  .filter-group {
    width: 100%;
  }

  .filter-group label {
    min-width: 70px;
  }

  .filter-group select {
    flex: 1;
  }

  .view-toggle {
    width: 100%;
    justify-content: flex-end;
  }

  .content-grid.grid-view {
    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  }

  .list-view .list-item {
    flex-direction: column;
    height: auto;
  }

  .list-view .item-poster {
    height: 220px;
    flex: none;
  }

  .mylist-header h1 {
    font-size: 2rem;
  }

  .mylist-header p {
    font-size: 1rem;
  }
}
--- END OF FILE netflix-clone/src/components/mylist/mylist.css ---

--- START OF FILE netflix-clone/src/components/notifications/Notifications.css ---
/* Notifications.css */
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700;800;900&display=swap");

.notifications-page {
  font-family: "Poppins", sans-serif;
  color: var(--white);
  margin-top: var(--header-height);
  min-height: calc(100vh - var(--header-height));
  background-color: #1a0733;
}

/* Header Section */
.notifications-header {
  position: relative;
  padding: 60px 0;
  overflow: hidden;
}

.animated-bg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
}

.animated-bg svg {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.notifications-header-content {
  position: relative;
  z-index: 1;
  max-width: 800px;
  margin: 0 auto;
  padding: 0 20px;
  text-align: center;
}

.notifications-header h1 {
  font-size: 42px;
  font-weight: 700;
  margin: 0 0 10px;
  background: var(--gradient-main);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  display: inline-block;
}

.notifications-header p {
  font-size: 18px;
  color: rgba(255, 255, 255, 0.8);
  margin: 0;
}

/* Main Container */
.notifications-container {
  max-width: 1200px;
  margin: 40px auto;
  display: grid;
  grid-template-columns: 280px 1fr;
  gap: 30px;
  padding: 0 20px;
  min-height: 500px;
}

/* Sidebar Styles */
.notifications-sidebar {
  background-color: rgba(45, 8, 84, 0.6);
  border-radius: var(--radius-medium);
  padding: 25px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(156, 39, 176, 0.2);
  height: fit-content;
}

.filter-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.filter-header h3 {
  font-size: 18px;
  font-weight: 600;
  margin: 0;
  color: var(--purple-lightest);
}

.unread-badge {
  background-color: var(--purple-main);
  color: white;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
  padding: 4px 10px;
  min-width: 30px;
  text-align: center;
}

.filter-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.filter-list li {
  padding: 12px 15px;
  margin-bottom: 8px;
  border-radius: var(--radius-small);
  cursor: pointer;
  transition: var(--transition-fast);
  display: flex;
  align-items: center;
  position: relative;
  color: rgba(255, 255, 255, 0.8);
}

.filter-list li:hover {
  background-color: rgba(156, 39, 176, 0.15);
  color: white;
}

.filter-list li.active {
  background-color: rgba(156, 39, 176, 0.3);
  color: white;
  font-weight: 500;
}

.filter-list li i {
  margin-right: 12px;
  font-size: 16px;
  width: 20px;
  text-align: center;
  color: var(--purple-light);
}

.count-badge {
  margin-left: auto;
  background-color: var(--purple-main);
  color: white;
  border-radius: 20px;
  font-size: 11px;
  padding: 2px 8px;
  min-width: 24px;
  text-align: center;
}

.sidebar-actions {
  margin-top: 25px;
  padding-top: 20px;
  border-top: 1px solid rgba(156, 39, 176, 0.2);
}

.mark-all-read {
  background: transparent;
  border: 1px solid var(--purple-main);
  color: var(--purple-light);
  padding: 10px 0;
  width: 100%;
  text-align: center;
  border-radius: var(--radius-medium);
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition-fast);
  display: flex;
  align-items: center;
  justify-content: center;
}

.mark-all-read:hover {
  background-color: var(--purple-main);
  color: white;
  transform: translateY(-2px);
}

.mark-all-read i {
  margin-right: 8px;
}

/* Notifications Content Area */
.notifications-content {
  background-color: rgba(45, 8, 84, 0.6);
  border-radius: var(--radius-medium);
  border: 1px solid rgba(156, 39, 176, 0.2);
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
}

.notifications-toolbar {
  padding: 20px 25px;
  background-color: rgba(45, 8, 84, 0.8);
  border-bottom: 1px solid rgba(156, 39, 176, 0.2);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.notifications-toolbar h2 {
  font-size: 20px;
  font-weight: 600;
  margin: 0;
  color: var(--purple-lightest);
}

.toolbar-actions {
  display: flex;
  gap: 15px;
}

.mark-all-read-mobile {
  background: transparent;
  border: 1px solid var(--purple-main);
  color: var(--purple-light);
  padding: 8px 15px;
  border-radius: var(--radius-small);
  font-size: 14px;
  cursor: pointer;
  transition: var(--transition-fast);
  display: flex;
  align-items: center;
}

.mark-all-read-mobile:hover {
  background-color: var(--purple-main);
  color: white;
}

.mark-all-read-mobile i {
  margin-right: 8px;
}

/* Notifications List */
.notifications-list {
  overflow-y: auto;
  padding: 15px 0;
  max-height: 600px;
}

.notifications-list::-webkit-scrollbar {
  width: 6px;
}

.notifications-list::-webkit-scrollbar-thumb {
  background-color: rgba(156, 39, 176, 0.4);
  border-radius: 3px;
}

.notifications-list::-webkit-scrollbar-track {
  background-color: rgba(0, 0, 0, 0.1);
}

.notification-item {
  display: flex;
  padding: 20px 25px;
  border-bottom: 1px solid rgba(156, 39, 176, 0.1);
  transition: var(--transition-fast);
  text-decoration: none;
  color: inherit;
}

.notification-item:hover {
  background-color: rgba(156, 39, 176, 0.15);
}

.notification-item.unread {
  background-color: rgba(156, 39, 176, 0.07);
}

.notification-icon {
  width: 50px;
  height: 50px;
  border-radius: var(--radius-round);
  margin-right: 15px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: rgba(156, 39, 176, 0.2);
  color: var(--purple-light);
  font-size: 20px;
  overflow: hidden;
}

.notification-icon img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: var(--radius-round);
}

.notification-icon.type-new {
  background-color: rgba(76, 175, 80, 0.2);
  color: #4CAF50;
}

.notification-icon.type-recommendation {
  background-color: rgba(33, 150, 243, 0.2);
  color: #2196F3;
}

.notification-icon.type-account {
  background-color: rgba(255, 152, 0, 0.2);
  color: #FF9800;
}

.notification-icon.type-system {
  background-color: rgba(233, 30, 99, 0.2);
  color: #E91E63;
}

.notification-content {
  flex: 1;
  position: relative;
}

.notification-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 5px;
}

.notification-content h3 {
  font-size: 16px;
  font-weight: 600;
  margin: 0 0 6px 0;
  color: var(--white);
  line-height: 1.4;
  padding-right: 60px;
}

.notification-time {
  font-size: 12px;
  color: rgba(255, 255, 255, 0.6);
  white-space: nowrap;
  position: absolute;
  top: 2px;
  right: 0;
}

.notification-content p {
  font-size: 14px;
  margin: 0 0 12px 0;
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.5;
}

.notification-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.notification-type {
  font-size: 12px;
  padding: 3px 10px;
  border-radius: 20px;
  background-color: rgba(156, 39, 176, 0.2);
  color: var(--purple-lightest);
  font-weight: 500;
}

.notification-type.type-new {
  background-color: rgba(76, 175, 80, 0.15);
  color: #4CAF50;
}

.notification-type.type-recommendation {
  background-color: rgba(33, 150, 243, 0.15);
  color: #2196F3;
}

.notification-type.type-account {
  background-color: rgba(255, 152, 0, 0.15);
  color: #FF9800;
}

.notification-type.type-system {
  background-color: rgba(233, 30, 99, 0.15);
  color: #E91E63;
}

.unread-dot {
  width: 10px;
  height: 10px;
  border-radius: var(--radius-round);
  background: var(--gradient-main);
  box-shadow: 0 0 5px rgba(156, 39, 176, 0.5);
}

/* Empty State */
.empty-notifications {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 60px 20px;
  text-align: center;
  flex: 1;
}

.empty-icon {
  width: 80px;
  height: 80px;
  border-radius: var(--radius-round);
  background-color: rgba(156, 39, 176, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
  font-size: 30px;
  color: var(--purple-light);
}

.empty-notifications h3 {
  font-size: 20px;
  font-weight: 600;
  margin: 0 0 10px;
  color: var(--white);
}

.empty-notifications p {
  font-size: 15px;
  color: rgba(255, 255, 255, 0.7);
  margin: 0 0 25px;
  max-width: 400px;
}

.view-all-btn {
  background: var(--gradient-main);
  color: var(--white);
  border: none;
  padding: 12px 25px;
  border-radius: var(--radius-large);
  font-size: 15px;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition-fast);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
}

.view-all-btn:hover {
  background: var(--gradient-hover);
  transform: translateY(-3px);
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
}

/* Responsive Styles */
@media screen and (max-width: 992px) {
  .notifications-container {
    grid-template-columns: 240px 1fr;
    gap: 20px;
  }
  
  .notifications-header h1 {
    font-size: 36px;
  }
}

@media screen and (max-width: 768px) {
  .notifications-container {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .notifications-sidebar {
    order: 2;
  }
  
  .notifications-content {
    order: 1;
  }
  
  .desktop-only {
    display: none;
  }
  
  .notifications-header {
    padding: 40px 0;
  }
  
  .notifications-header h1 {
    font-size: 32px;
  }
  
  .notifications-header p {
    font-size: 16px;
  }
}

@media screen and (max-width: 576px) {
  .notifications-toolbar {
    padding: 15px;
  }
  
  .notifications-toolbar h2 {
    font-size: 18px;
  }
  
  .notification-item {
    padding: 15px;
  }
  
  .notification-content h3 {
    font-size: 15px;
  }
  
  .notification-content p {
    font-size: 13px;
  }
  
  .notifications-header h1 {
    font-size: 28px;
  }
  
  .notifications-header p {
    font-size: 14px;
  }
}

/* Animation for notifications */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.notification-item {
  animation: fadeIn 0.3s ease forwards;
}

/* Animations for SVG background */
.animated-bg svg {
  will-change: transform;
  transform: translateZ(0); /* Enable GPU acceleration */
}

/* Additional hover effects */
.notification-item:hover .notification-icon {
  transform: scale(1.1);
  transition: transform 0.3s ease;
}

.notification-item:hover .notification-content h3 {
  color: var(--purple-lightest);
}

/* Animation for empty state icon */
.empty-icon i {
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(1.1);
    opacity: 0.7;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

/* Header bölümünü düzeltmek için bu CSS değişikliklerini ekleyin */

.notifications-header {
  position: relative;
  padding: 60px 0;
  overflow: hidden;
  width: 100%;
  max-width: 100%;
  margin: 0;
  background-color: #120620; /* En koyu mor arka plan rengi */
}

.animated-bg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
}

.animated-bg svg {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.notifications-header-content {
  position: relative;
  z-index: 2;
  max-width: 800px;
  margin: 0 auto;
  padding: 40px 20px;
  text-align: center;
}

.notifications-header h1 {
  font-size: 42px;
  font-weight: 700;
  margin: 0 0 10px;
  background: linear-gradient(to right, #9d4edd, #c77dff);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  display: inline-block;
  text-shadow: 0 0 10px rgba(157, 78, 221, 0.3);
}

.notifications-header p {
  font-size: 18px;
  color: rgba(255, 255, 255, 0.9);
  margin: 0;
}

/* Responsive düzeltmeler */
@media screen and (max-width: 768px) {
  .notifications-header {
    padding: 40px 0;
  }
  
  .notifications-header h1 {
    font-size: 32px;
  }
  
  .notifications-header p {
    font-size: 16px;
  }
}

@media screen and (max-width: 576px) {
  .notifications-header h1 {
    font-size: 28px;
  }
  
  .notifications-header p {
    font-size: 14px;
  }
  
  .notifications-header-content {
    padding: 30px 15px;
  }
}
--- END OF FILE netflix-clone/src/components/notifications/Notifications.css ---

--- START OF FILE netflix-clone/src/components/notifications/Notifications.jsx ---
import React, { useState, useEffect, useRef } from "react";
import { Link } from "react-router-dom";
import "./Notifications.css";

const Notifications = () => {
  // Bildirimler için örnek veri (gerçek uygulamada API'den veya Redux store'dan gelecektir)
  const [notifications, setNotifications] = useState([
    {
      id: 1,
      type: "new_content",
      title: "New Release: Inception 2",
      message:
        "The long-awaited sequel to Christopher Nolan's mind-bending thriller is now available to stream exclusively on PurpleStream.",
      time: "10 minutes ago",
      image: "/images/covers/inception2.jpg",
      read: false,
      link: "/singlePage/101",
    },
    {
      id: 2,
      type: "recommendation",
      title: "Recommended for You: The Matrix Resurrections",
      message:
        "Based on your viewing history, we think you'll enjoy this sci-fi action film starring Keanu Reeves.",
      time: "2 hours ago",
      image: "/images/covers/matrix.jpg",
      read: false,
      link: "/singlePage/102",
    },
    {
      id: 3,
      type: "account",
      title: "Subscription Renewal",
      message:
        "Your PurpleStream Premium subscription will automatically renew in 3 days. Please ensure your payment method is up to date.",
      time: "Yesterday",
      image: null,
      read: true,
      link: "/account",
    },
    {
      id: 4,
      type: "new_content",
      title: "New Episodes Added",
      message:
        "Season 4 of 'Stranger Things' has just been added to our library. Continue watching from where you left off.",
      time: "2 days ago",
      image: "/images/covers/strangerthings.jpg",
      read: true,
      link: "/singlePage/103",
    },
    {
      id: 5,
      type: "system",
      title: "PurpleStream App Update",
      message:
        "We've rolled out a new update with improved streaming quality and bug fixes. Restart your app to apply the changes.",
      time: "3 days ago",
      image: null,
      read: true,
      link: null,
    },
    {
      id: 6,
      type: "recommendation",
      title: "Weekend Movie Marathon",
      message:
        "Check out our curated collection of action thrillers for your weekend viewing pleasure.",
      time: "5 days ago",
      image: "/images/covers/actionthrillers.jpg",
      read: true,
      link: "/category/action",
    },
    {
      id: 7,
      type: "new_content",
      title: "Original Series Premier",
      message:
        "PurpleStream Original 'Dark Horizons' has just premiered. Watch the first episode now!",
      time: "1 week ago",
      image: "/images/covers/darkhorizons.jpg",
      read: false,
      link: "/singlePage/104",
    },
    {
      id: 8,
      type: "account",
      title: "Profile Settings Updated",
      message:
        "Your account password was recently changed. If you didn't make this change, please contact customer support immediately.",
      time: "1 week ago",
      image: null,
      read: true,
      link: "/account/security",
    },
    {
      id: 9,
      type: "recommendation",
      title: "Because You Watched Interstellar",
      message:
        "We've added more science fiction movies similar to Interstellar that you might enjoy.",
      time: "2 weeks ago",
      image: "/images/covers/scififollection.jpg",
      read: true,
      link: "/recommendations/scifi",
    },
    {
      id: 10,
      type: "system",
      title: "New Feature: Watch Party",
      message:
        "You can now watch movies together with friends using our new Watch Party feature!",
      time: "2 weeks ago",
      image: null,
      read: true,
      link: "/features/watchparty",
    },
  ]);

  // SVG animasyonlu arka plan için referans
  const svgRef = useRef(null);

  // Aktif filtre (all, unread, veya bir bildirim tipi)
  const [activeFilter, setActiveFilter] = useState("all");

  // Filtre seçenekleri
  const filters = [
    { id: "all", name: "All Notifications" },
    { id: "unread", name: "Unread" },
    { id: "new_content", name: "New Content" },
    { id: "recommendation", name: "Recommendations" },
    { id: "account", name: "Account" },
    { id: "system", name: "System" },
  ];

  // SVG animasyon başlatma
  useEffect(() => {
    // SVG yüklendikten sonra animasyonları başlat
    if (svgRef.current) {
      // SVG animasyonları hali hazırda SVG içinde tanımlıdır
      console.log("SVG background loaded");
    }
  }, []);

  // Filtrelenmiş bildirimleri hesaplayalım
  const filteredNotifications = notifications.filter((notification) => {
    if (activeFilter === "all") return true;
    if (activeFilter === "unread") return !notification.read;
    return notification.type === activeFilter;
  });

  // Bildirim okundu olarak işaretleme fonksiyonu
  const markAsRead = (notificationId) => {
    setNotifications(
      notifications.map((notification) =>
        notification.id === notificationId
          ? { ...notification, read: true }
          : notification
      )
    );
  };

  // Tüm bildirimleri okundu olarak işaretle
  const markAllAsRead = () => {
    setNotifications(
      notifications.map((notification) => ({ ...notification, read: true }))
    );
  };

  // Okunmamış bildirim sayısı
  const unreadCount = notifications.filter(
    (notification) => !notification.read
  ).length;

  // Bildirim öğesi üzerine tıklama işleyicisi
  const handleNotificationClick = (notification) => {
    markAsRead(notification.id);
    // Bildirime bağlı olarak yönlendirme işlemi (gerçek uygulamada burada yönlendirme olacak)
    console.log(`Navigating to: ${notification.link}`);
  };

  // Bildirim türüne göre ikon seçimi
  const getNotificationIcon = (type) => {
    switch (type) {
      case "new_content":
        return <i className="fas fa-film"></i>;
      case "recommendation":
        return <i className="fas fa-thumbs-up"></i>;
      case "account":
        return <i className="fas fa-user-shield"></i>;
      case "system":
        return <i className="fas fa-cog"></i>;
      default:
        return <i className="fas fa-bell"></i>;
    }
  };

  // Bildirim türüne göre renk sınıfı
  const getTypeColorClass = (type) => {
    switch (type) {
      case "new_content":
        return "type-new";
      case "recommendation":
        return "type-recommendation";
      case "account":
        return "type-account";
      case "system":
        return "type-system";
      default:
        return "";
    }
  };

  return (
    <div className="notifications-page">
      <div className="notifications-header">
        <div className="animated-bg" ref={svgRef}>
          <svg viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg">
            {/* Ana Arkaplan */}
            <defs>
              <radialGradient
                id="bgGradient"
                cx="50%"
                cy="50%"
                r="70%"
                fx="50%"
                fy="50%"
              >
                <stop offset="0%" stopColor="#3a0b75" />
                <stop offset="100%" stopColor="#150327" />
              </radialGradient>

              {/* 3D Işık Efekti */}
              <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
                <feGaussianBlur stdDeviation="10" result="blur" />
                <feComposite in="SourceGraphic" in2="blur" operator="over" />
              </filter>

              {/* Parıltı Efekti */}
              <filter id="shimmer" x="0" y="0" width="100%" height="100%">
                <feTurbulence
                  type="fractalNoise"
                  baseFrequency="0.01"
                  numOctaves="3"
                  seed="0"
                  result="noise"
                />
                <feDisplacementMap
                  in="SourceGraphic"
                  in2="noise"
                  scale="5"
                  xChannelSelector="R"
                  yChannelSelector="G"
                />
              </filter>

              {/* Holografik Gradyan */}
              <linearGradient
                id="holoGradient"
                x1="0%"
                y1="0%"
                x2="100%"
                y2="100%"
              >
                <stop offset="0%" stopColor="#9d4edd" stopOpacity="0.8">
                  <animate
                    attributeName="stop-color"
                    values="#9d4edd;#c77dff;#7b2cbf;#9d4edd"
                    dur="10s"
                    repeatCount="indefinite"
                  />
                </stop>
                <stop offset="50%" stopColor="#c77dff" stopOpacity="0.6">
                  <animate
                    attributeName="stop-color"
                    values="#c77dff;#7b2cbf;#9d4edd;#c77dff"
                    dur="10s"
                    repeatCount="indefinite"
                  />
                </stop>
                <stop offset="100%" stopColor="#7b2cbf" stopOpacity="0.8">
                  <animate
                    attributeName="stop-color"
                    values="#7b2cbf;#9d4edd;#c77dff;#7b2cbf"
                    dur="10s"
                    repeatCount="indefinite"
                  />
                </stop>
              </linearGradient>

              {/* Neon Işık Dalgaları */}
              <linearGradient
                id="neonGradient"
                x1="0%"
                y1="0%"
                x2="100%"
                y2="0%"
              >
                <stop offset="0%" stopColor="#ff00cc" stopOpacity="0.7">
                  <animate
                    attributeName="stop-opacity"
                    values="0.7;0.2;0.7"
                    dur="5s"
                    repeatCount="indefinite"
                  />
                </stop>
                <stop offset="50%" stopColor="#3d0066" stopOpacity="0.5">
                  <animate
                    attributeName="stop-opacity"
                    values="0.5;0.8;0.5"
                    dur="5s"
                    repeatCount="indefinite"
                  />
                </stop>
                <stop offset="100%" stopColor="#00ccff" stopOpacity="0.7">
                  <animate
                    attributeName="stop-opacity"
                    values="0.7;0.2;0.7"
                    dur="5s"
                    repeatCount="indefinite"
                  />
                </stop>
              </linearGradient>

              {/* Dijital Dalga Deseni */}
              <pattern
                id="wavePattern"
                x="0"
                y="0"
                width="200"
                height="80"
                patternUnits="userSpaceOnUse"
              >
                <path
                  d="M0,40 Q50,0 100,40 Q150,80 200,40"
                  fill="none"
                  stroke="url(#neonGradient)"
                  strokeWidth="1.5"
                  opacity="0.3"
                >
                  <animate
                    attributeName="d"
                    values="M0,40 Q50,0 100,40 Q150,80 200,40;M0,40 Q50,80 100,40 Q150,0 200,40;M0,40 Q50,0 100,40 Q150,80 200,40"
                    dur="15s"
                    repeatCount="indefinite"
                  />
                </path>
              </pattern>

              {/* Hexagon Grid Doku */}
              <pattern
                id="hexGrid"
                width="70"
                height="80"
                patternUnits="userSpaceOnUse"
                patternTransform="scale(2)"
              >
                <path
                  d="M0,15 L17.5,0 L52.5,0 L70,15 L52.5,30 L17.5,30 Z"
                  fill="none"
                  stroke="#9d4edd"
                  strokeWidth="0.5"
                  opacity="0.3"
                  transform="translate(0, 0)"
                />
                <path
                  d="M0,15 L17.5,0 L52.5,0 L70,15 L52.5,30 L17.5,30 Z"
                  fill="none"
                  stroke="#9d4edd"
                  strokeWidth="0.5"
                  opacity="0.3"
                  transform="translate(0, 40)"
                />
                <path
                  d="M0,15 L17.5,0 L52.5,0 L70,15 L52.5,30 L17.5,30 Z"
                  fill="none"
                  stroke="#9d4edd"
                  strokeWidth="0.5"
                  opacity="0.3"
                  transform="translate(-35, 20)"
                />
                <path
                  d="M0,15 L17.5,0 L52.5,0 L70,15 L52.5,30 L17.5,30 Z"
                  fill="none"
                  stroke="#9d4edd"
                  strokeWidth="0.5"
                  opacity="0.3"
                  transform="translate(-35, 60)"
                />
              </pattern>
            </defs>

            {/* Arka Plan ve Temel Efektler */}
            <rect width="1200" height="400" fill="url(#bgGradient)" />
            <rect
              width="1200"
              height="400"
              fill="url(#hexGrid)"
              opacity="0.4"
            />

            {/* Dijital Dalga Katmanları */}
            <rect
              width="1200"
              height="400"
              fill="url(#wavePattern)"
              opacity="0.6"
            />
            <rect
              width="1200"
              height="400"
              fill="url(#wavePattern)"
              opacity="0.3"
              transform="rotate(180, 600, 200)"
            />

            {/* Holografik Ana Görsel */}
            <g transform="translate(600, 200)" filter="url(#shimmer)">
              <circle
                cx="0"
                cy="0"
                r="100"
                fill="url(#holoGradient)"
                opacity="0.2"
                filter="url(#glow)"
              />

              {/* Holografik Işık Halkaları */}
              <circle
                cx="0"
                cy="0"
                r="140"
                stroke="url(#holoGradient)"
                strokeWidth="2"
                fill="none"
                opacity="0.6"
              >
                <animate
                  attributeName="r"
                  values="140;150;140"
                  dur="8s"
                  repeatCount="indefinite"
                />
                <animate
                  attributeName="opacity"
                  values="0.6;0.3;0.6"
                  dur="8s"
                  repeatCount="indefinite"
                />
              </circle>
            </g>

            {/* Uçuşan Noktalar */}
            <g>
              <circle cx="300" cy="100" r="4" fill="#ff00cc" opacity="0.8">
                <animate
                  attributeName="cy"
                  values="100;90;100"
                  dur="5s"
                  repeatCount="indefinite"
                />
                <animate
                  attributeName="opacity"
                  values="0.8;0.4;0.8"
                  dur="5s"
                  repeatCount="indefinite"
                />
              </circle>

              <circle cx="400" cy="300" r="3" fill="#9d4edd" opacity="0.7">
                <animate
                  attributeName="cy"
                  values="300;310;300"
                  dur="6s"
                  repeatCount="indefinite"
                />
                <animate
                  attributeName="opacity"
                  values="0.7;0.3;0.7"
                  dur="6s"
                  repeatCount="indefinite"
                />
              </circle>

              <circle cx="800" cy="150" r="3.5" fill="#00ccff" opacity="0.6">
                <animate
                  attributeName="cy"
                  values="150;140;150"
                  dur="7s"
                  repeatCount="indefinite"
                />
                <animate
                  attributeName="opacity"
                  values="0.6;0.2;0.6"
                  dur="7s"
                  repeatCount="indefinite"
                />
              </circle>

              <circle cx="900" cy="250" r="3" fill="#9d4edd" opacity="0.7">
                <animate
                  attributeName="cy"
                  values="250;260;250"
                  dur="5.5s"
                  repeatCount="indefinite"
                />
                <animate
                  attributeName="opacity"
                  values="0.7;0.3;0.7"
                  dur="5.5s"
                  repeatCount="indefinite"
                />
              </circle>
            </g>
          </svg>
        </div>
        <div className="notifications-header-content">
          <h1>Your Notifications</h1>
          <p>Stay updated with the latest from PurpleStream</p>
        </div>
      </div>

      <div className="notifications-container">
        <div className="notifications-sidebar">
          <div className="filter-header">
            <h3>Filters</h3>
            {unreadCount > 0 && (
              <span className="unread-badge">{unreadCount}</span>
            )}
          </div>

          <ul className="filter-list">
            {filters.map((filter) => (
              <li
                key={filter.id}
                className={activeFilter === filter.id ? "active" : ""}
                onClick={() => setActiveFilter(filter.id)}
              >
                {filter.id === "all" && <i className="fas fa-layer-group"></i>}
                {filter.id === "unread" && <i className="fas fa-envelope"></i>}
                {filter.id === "new_content" && <i className="fas fa-film"></i>}
                {filter.id === "recommendation" && (
                  <i className="fas fa-thumbs-up"></i>
                )}
                {filter.id === "account" && (
                  <i className="fas fa-user-shield"></i>
                )}
                {filter.id === "system" && <i className="fas fa-cog"></i>}

                <span>{filter.name}</span>

                {filter.id === "unread" && unreadCount > 0 && (
                  <span className="count-badge">{unreadCount}</span>
                )}
              </li>
            ))}
          </ul>

          <div className="sidebar-actions">
            {unreadCount > 0 && (
              <button className="mark-all-read" onClick={markAllAsRead}>
                <i className="fas fa-check-double"></i>
                Mark all as read
              </button>
            )}
          </div>
        </div>

        <div className="notifications-content">
          <div className="notifications-toolbar">
            <h2>
              {activeFilter === "all"
                ? "All Notifications"
                : activeFilter === "unread"
                ? "Unread Notifications"
                : `${
                    activeFilter.charAt(0).toUpperCase() +
                    activeFilter.slice(1).replace("_", " ")
                  } Notifications`}
            </h2>
            <div className="toolbar-actions">
              {filteredNotifications.length > 0 && unreadCount > 0 && (
                <button
                  className="mark-all-read-mobile"
                  onClick={markAllAsRead}
                >
                  <i className="fas fa-check-double"></i>
                  <span className="desktop-only">Mark all as read</span>
                </button>
              )}
            </div>
          </div>

          {filteredNotifications.length > 0 ? (
            <div className="notifications-list">
              {filteredNotifications.map((notification) => (
                <Link
                  to={notification.link || "#"}
                  className={`notification-item ${
                    !notification.read ? "unread" : ""
                  }`}
                  key={notification.id}
                  onClick={() => handleNotificationClick(notification)}
                >
                  <div
                    className={`notification-icon ${getTypeColorClass(
                      notification.type
                    )}`}
                  >
                    {notification.image ? (
                      <img src={notification.image} alt="" />
                    ) : (
                      getNotificationIcon(notification.type)
                    )}
                  </div>

                  <div className="notification-content">
                    <div className="notification-header">
                      <h3>{notification.title}</h3>
                      <span className="notification-time">
                        {notification.time}
                      </span>
                    </div>
                    <p>{notification.message}</p>

                    <div className="notification-footer">
                      <span
                        className={`notification-type ${getTypeColorClass(
                          notification.type
                        )}`}
                      >
                        {notification.type
                          .replace("_", " ")
                          .charAt(0)
                          .toUpperCase() +
                          notification.type.replace("_", " ").slice(1)}
                      </span>

                      {!notification.read && (
                        <span className="unread-dot"></span>
                      )}
                    </div>
                  </div>
                </Link>
              ))}
            </div>
          ) : (
            <div className="empty-notifications">
              <div className="empty-icon">
                <i className="fas fa-bell-slash"></i>
              </div>
              <h3>No notifications found</h3>
              <p>
                {activeFilter === "all"
                  ? "You don't have any notifications at the moment."
                  : `You don't have any ${
                      activeFilter === "unread"
                        ? "unread"
                        : activeFilter.replace("_", " ")
                    } notifications.`}
              </p>
              {activeFilter !== "all" && (
                <button
                  className="view-all-btn"
                  onClick={() => setActiveFilter("all")}
                >
                  View all notifications
                </button>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Notifications;

--- END OF FILE netflix-clone/src/components/notifications/Notifications.jsx ---

--- START OF FILE netflix-clone/src/components/pricing/Pricing.css ---
.pricing {
  padding: 100px 0;
  color: #fff;
  min-height: calc(100vh - 200px);
  background-color: #1a0733;
  position: relative;
  overflow: hidden;
}

/* Background decoration */
.pricing::before {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="0" y="0"></rect><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="50" y="50"></rect></svg>');
  background-size: 30px;
  opacity: 0.05;
  z-index: 0;
}

/* Animated background orbs */
.pricing-orb {
  position: absolute;
  border-radius: 50%;
  filter: blur(80px);
  opacity: 0.15;
  z-index: 0;
}

.pricing-orb-1 {
  top: 10%;
  left: 5%;
  width: 400px;
  height: 400px;
  background: radial-gradient(circle, rgba(156, 39, 176, 0.6) 0%, rgba(26, 7, 51, 0) 70%);
  animation: float-slow 25s infinite alternate;
}

.pricing-orb-2 {
  bottom: 10%;
  right: 5%;
  width: 500px;
  height: 500px;
  background: radial-gradient(circle, rgba(103, 58, 183, 0.6) 0%, rgba(26, 7, 51, 0) 70%);
  animation: float-slow 20s infinite alternate-reverse;
}

@keyframes float-slow {
  0% {
    transform: translate(0, 0);
  }
  50% {
    transform: translate(-50px, 30px);
  }
  100% {
    transform: translate(50px, -30px);
  }
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  position: relative;
  z-index: 1;
}

.pricing-header {
  text-align: center;
  margin-bottom: 80px;
  animation: fadeInUp 1s ease;
}

.pricing-header h1 {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 20px;
  background: linear-gradient(to right, #ffffff, #e1bee7);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  text-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  position: relative;
  display: inline-block;
}

.pricing-header h1::after {
  content: "";
  position: absolute;
  bottom: -15px;
  left: 50%;
  transform: translateX(-50%);
  width: 100px;
  height: 4px;
  background: linear-gradient(to right, #9c27b0, #e1bee7);
  border-radius: 2px;
}

.pricing-header p {
  font-size: 1.2rem;
  color: rgba(255, 255, 255, 0.8);
  max-width: 600px;
  margin: 0 auto;
  margin-top: 30px;
}

.pricing-grid {
  display: flex;
  justify-content: center;
  gap: 30px;
  perspective: 1000px;
}

.pricing-card {
  background: rgba(45, 8, 84, 0.6);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  width: 320px;
  padding: 40px 30px;
  position: relative;
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  border: 1px solid rgba(156, 39, 176, 0.2);
  box-shadow: 0 20px 50px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
  animation: cardEntrance 0.8s ease;
  transform-style: preserve-3d;
  z-index: 1;
}

.pricing-card:nth-child(1) {
  animation-delay: 0.1s;
}

.pricing-card:nth-child(2) {
  animation-delay: 0.3s;
}

.pricing-card:nth-child(3) {
  animation-delay: 0.5s;
}

@keyframes cardEntrance {
  from {
    opacity: 0;
    transform: translateY(50px) rotateX(10deg);
  }
  to {
    opacity: 1;
    transform: translateY(0) rotateX(0);
  }
}

.pricing-card::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 100%);
  border-radius: 20px;
  z-index: -1;
}

.pricing-card:hover {
  transform: translateY(-20px);
  box-shadow: 0 30px 60px rgba(156, 39, 176, 0.3);
  border-color: rgba(156, 39, 176, 0.4);
}

/* Glow effect on hover */
.pricing-card::after {
  content: "";
  position: absolute;
  bottom: -15px;
  left: 5%;
  width: 90%;
  height: 20px;
  background: rgba(156, 39, 176, 0.3);
  filter: blur(20px);
  border-radius: 50%;
  z-index: -2;
  opacity: 0;
  transition: opacity 0.5s ease;
}

.pricing-card:hover::after {
  opacity: 1;
}

.pricing-card.recommended {
  background: linear-gradient(135deg, rgba(156, 39, 176, 0.7) 0%, rgba(103, 58, 183, 0.7) 100%);
  border: 2px solid rgba(232, 234, 246, 0.3);
  transform: scale(1.05);
  z-index: 2;
}

.pricing-card.recommended:hover {
  transform: scale(1.05) translateY(-20px);
}

.recommended-badge {
  background: linear-gradient(to right, #9c27b0, #673ab7);
  color: white;
  padding: 10px 20px;
  border-radius: 30px;
  position: absolute;
  top: -20px;
  left: 50%;
  transform: translateX(-50%);
  font-size: 0.9rem;
  font-weight: 600;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  letter-spacing: 1px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.recommended-badge i {
  color: #ffeb3b;
}

.pricing-card-header {
  text-align: center;
  margin-bottom: 40px;
  position: relative;
}

.pricing-card-header h2 {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 20px;
  color: #ffffff;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  letter-spacing: 1px;
}

.price {
  font-size: 3rem;
  font-weight: 800;
  color: #ffffff;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  display: flex;
  justify-content: center;
  align-items: baseline;
  gap: 5px;
}

.currency, .period {
  font-size: 1rem;
  font-weight: 500;
  color: rgba(255, 255, 255, 0.8);
}

.period {
  opacity: 0.7;
}

.pricing-card-body {
  flex: 1;
}

.features {
  margin-bottom: 40px;
  list-style: none;
  padding: 0;
}

.features li {
  margin-bottom: 18px;
  display: flex;
  align-items: flex-start;
  color: rgba(255, 255, 255, 0.9);
  font-size: 1rem;
  transition: transform 0.3s ease;
  padding: 5px 0;
}

.pricing-card:hover .features li {
  transform: translateX(5px);
  transition-delay: calc(0.05s * var(--i));
}

.features li i {
  color: #9c27b0;
  margin-right: 15px;
  font-size: 1.2rem;
  margin-top: 2px;
}

.pricing-card.recommended .features li i {
  color: #e1bee7;
}

.pricing-card-footer {
  text-align: center;
  margin-top: auto;
}

.subscribe-btn {
  background: linear-gradient(to right, #9c27b0, #673ab7);
  color: white;
  border: none;
  padding: 15px 30px;
  border-radius: 50px;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  width: 100%;
  position: relative;
  overflow: hidden;
  box-shadow: 0 8px 25px rgba(156, 39, 176, 0.3);
  letter-spacing: 1px;
}

.subscribe-btn::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.2) 50%, rgba(255, 255, 255, 0) 100%);
  transition: all 0.6s ease;
}

.subscribe-btn:hover::before {
  left: 100%;
}

.subscribe-btn:hover {
  background: linear-gradient(to right, #7b1fa2, #512da8);
  transform: translateY(-5px);
  box-shadow: 0 12px 30px rgba(156, 39, 176, 0.5);
}

.pricing-card.recommended .subscribe-btn {
  background: linear-gradient(to right, #ffffff, #e1bee7);
  color: #7b1fa2;
}

.pricing-card.recommended .subscribe-btn:hover {
  background: linear-gradient(to right, #e1bee7, #ffffff);
}

/* Feature tags */
.feature-tag {
  display: inline-block;
  background: rgba(156, 39, 176, 0.2);
  color: #e1bee7;
  padding: 4px 10px;
  border-radius: 20px;
  font-size: 0.7rem;
  font-weight: 600;
  margin-left: 10px;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.pricing-comparison {
  margin-top: 80px;
  text-align: center;
}

.pricing-comparison h2 {
  font-size: 2rem;
  font-weight: 600;
  margin-bottom: 40px;
  color: #ffffff;
}

/* UPDATED SECTION: Every Plan Includes */
.additional-features {
  margin-top: 100px;
  text-align: center;
  animation: fadeInUp 1s ease 0.5s;
  animation-fill-mode: both;
}

.additional-features h2 {
  font-size: 2.2rem;
  font-weight: 700;
  margin-bottom: 60px;
  color: #ffffff;
  text-align: center;
}

.features-grid {
  display: flex;
  justify-content: space-between;
  align-items: stretch;
  flex-wrap: wrap;
  gap: 30px;
}

.feature-item {
  background: rgba(45, 8, 84, 0.4);
  border-radius: 15px;
  padding: 30px;
  transition: all 0.3s ease;
  border: 1px solid rgba(156, 39, 176, 0.1);
  flex: 1;
  min-width: 200px;
  max-width: 300px;
  display: flex;
  align-items: flex-start;
  text-align: left;
}

.feature-item:hover {
  transform: translateY(-10px);
  background: rgba(45, 8, 84, 0.6);
  border-color: rgba(156, 39, 176, 0.3);
}

.feature-icon {
  width: 60px;
  height: 60px;
  background: linear-gradient(135deg, rgba(156, 39, 176, 0.8) 0%, rgba(103, 58, 183, 0.8) 100%);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  color: white;
  margin-right: 20px;
  flex-shrink: 0;
}

.feature-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.feature-item h3 {
  font-size: 1.3rem;
  font-weight: 600;
  margin-bottom: 10px;
  color: #ffffff;
  text-align: left;
}

.feature-item p {
  color: rgba(255, 255, 255, 0.7);
  line-height: 1.6;
  text-align: left;
  font-size: 0.95rem;
}
/* END OF UPDATED SECTION */

/* FAQ Section */
.faq-section {
  margin-top: 100px;
  animation: fadeInUp 1s ease 0.8s;
  animation-fill-mode: both;
}

.faq-section h2 {
  font-size: 2rem;
  font-weight: 600;
  margin-bottom: 50px;
  text-align: center;
  color: #ffffff;
}

.faq-item {
  background: rgba(45, 8, 84, 0.4);
  border-radius: 15px;
  margin-bottom: 20px;
  overflow: hidden;
  border: 1px solid rgba(156, 39, 176, 0.1);
}

.faq-question {
  padding: 20px 30px;
  background: rgba(156, 39, 176, 0.2);
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: all 0.3s ease;
}

.faq-question h3 {
  font-size: 1.2rem;
  font-weight: 500;
  color: #ffffff;
  margin: 0;
}

.faq-question:hover {
  background: rgba(156, 39, 176, 0.3);
}

.faq-answer {
  padding: 0 30px;
  max-height: 0;
  overflow: hidden;
  transition: all 0.5s ease;
}

.faq-answer p {
  padding: 20px 0;
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.7;
}

.faq-item.active .faq-answer {
  max-height: 300px;
}

.faq-item.active .faq-question {
  background: rgba(156, 39, 176, 0.4);
}

.faq-toggle {
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  transition: all 0.3s ease;
}

.faq-item.active .faq-toggle {
  transform: rotate(45deg);
}

/* Trial banner */
.trial-banner {
  margin-top: 80px;
  background: linear-gradient(135deg, rgba(156, 39, 176, 0.8) 0%, rgba(103, 58, 183, 0.8) 100%);
  border-radius: 20px;
  padding: 50px;
  text-align: center;
  box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
  position: relative;
  overflow: hidden;
  animation: fadeInUp 1s ease 1s;
  animation-fill-mode: both;
}

.trial-banner::before {
  content: "";
  position: absolute;
  top: -100px;
  right: -100px;
  width: 200px;
  height: 200px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 50%;
}

.trial-banner::after {
  content: "";
  position: absolute;
  bottom: -50px;
  left: -50px;
  width: 100px;
  height: 100px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 50%;
}

.trial-banner h2 {
  font-size: 2.2rem;
  font-weight: 700;
  margin-bottom: 20px;
  color: #ffffff;
}

.trial-banner p {
  font-size: 1.1rem;
  color: rgba(255, 255, 255, 0.9);
  max-width: 600px;
  margin: 0 auto 30px;
}

.trial-btn {
  background: #ffffff;
  color: #7b1fa2;
  border: none;
  padding: 15px 40px;
  border-radius: 50px;
  font-weight: 600;
  font-size: 1.1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.trial-btn:hover {
  transform: translateY(-5px);
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
}

/* Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(40px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

/* Responsive styles */
@media only screen and (max-width: 1200px) {
  .pricing-header h1 {
    font-size: 2.8rem;
  }
  
  .features-grid {
    gap: 20px;
  }
}

@media only screen and (max-width: 992px) {
  .pricing-header h1 {
    font-size: 2.5rem;
  }
  
  .pricing-grid {
    flex-direction: column;
    align-items: center;
    gap: 50px;
  }
  
  .pricing-card {
    width: 100%;
    max-width: 400px;
  }
  
  .pricing-card.recommended {
    transform: none;
    order: -1;
  }
  
  .pricing-card.recommended:hover {
    transform: translateY(-20px);
  }
  
  .features-grid {
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .feature-item {
    min-width: 45%;
  }
  
  .trial-banner {
    padding: 40px 30px;
  }
}

@media only screen and (max-width: 768px) {
  .pricing {
    padding: 80px 0;
  }
  
  .pricing-header {
    margin-bottom: 60px;
  }
  
  .pricing-header h1 {
    font-size: 2.2rem;
  }
  
  .pricing-header p {
    font-size: 1.1rem;
  }
  
  .price {
    font-size: 2.5rem;
  }
  
  .additional-features h2 {
    font-size: 2rem;
    margin-bottom: 40px;
  }
  
  .features-grid {
    flex-direction: column;
    max-width: 100%;
  }
  
  .feature-item {
    max-width: 100%;
    width: 100%;
  }
  
  .trial-banner h2 {
    font-size: 1.8rem;
  }
}

@media only screen and (max-width: 576px) {
  .pricing {
    padding: 60px 0;
  }
  
  .pricing-header h1 {
    font-size: 2rem;
  }
  
  .pricing-header p {
    font-size: 1rem;
  }
  
  .pricing-card {
    padding: 30px 20px;
  }
  
  .price {
    font-size: 2.2rem;
  }
  
  .features li {
    font-size: 0.9rem;
  }
  
  .recommended-badge {
    font-size: 0.8rem;
    padding: 8px 16px;
  }
  
  .additional-features h2 {
    font-size: 1.8rem;
  }
  
  .feature-icon {
    width: 50px;
    height: 50px;
    font-size: 1.2rem;
  }
  
  .feature-item h3 {
    font-size: 1.1rem;
  }
  
  .feature-item p {
    font-size: 0.9rem;
  }
  
  .trial-banner {
    padding: 30px 20px;
  }
  
  .trial-banner h2 {
    font-size: 1.6rem;
  }
  
  .trial-btn {
    padding: 12px 30px;
    font-size: 1rem;
  }
}
--- END OF FILE netflix-clone/src/components/pricing/Pricing.css ---

--- START OF FILE netflix-clone/src/components/pricing/Pricing.jsx ---
import React, { useState, useEffect } from "react";
import "./Pricing.css";

const Pricing = () => {
  const [activeIndex, setActiveIndex] = useState(null);
  const [isLoaded, setIsLoaded] = useState(false);

  // FAQ items for the pricing page
  const faqItems = [
    {
      question: "Can I change my plan later?",
      answer:
        "Yes, you can upgrade or downgrade your subscription plan at any time. Changes to your subscription will take effect immediately, and you will be charged or credited the prorated difference.",
    },
    {
      question: "How does the billing cycle work?",
      answer:
        "Your subscription begins the day you sign up and continues for the duration of your billing cycle (monthly or annually). You will be automatically billed at the beginning of each billing cycle unless you cancel your subscription.",
    },
    {
      question: "Are there any hidden fees?",
      answer:
        "No, there are no hidden fees. The price displayed for each plan is all-inclusive. However, applicable taxes may be added based on your location.",
    },
    {
      question: "What payment methods do you accept?",
      answer:
        "We accept all major credit cards (Visa, MasterCard, American Express, Discover), PayPal, and direct debit in select regions. For annual subscriptions, we also offer payment by bank transfer.",
    },
    {
      question: "How secure is my payment information?",
      answer:
        "Your payment information is securely processed and encrypted using industry-standard SSL technology. We do not store your credit card details on our servers.",
    },
  ];

  // Plans data
  const plans = [
    {
      id: 1,
      name: "Basic",
      price: "7.99",
      features: [
        "Watch on 1 screen at a time",
        "720p HD available",
        "Unlimited movies and TV shows",
        "Watch on your laptop, TV, phone or tablet",
        "Cancel anytime",
      ],
      recommended: false,
    },
    {
      id: 2,
      name: "Standard",
      price: "12.99",
      features: [
        "Watch on 2 screens at a time",
        "Full HD (1080p) available",
        "Unlimited movies and TV shows",
        "Watch on your laptop, TV, phone or tablet",
        "Cancel anytime",
        "Download on 2 devices",
      ],
      recommended: true,
    },
    {
      id: 3,
      name: "Premium",
      price: "17.99",
      features: [
        "Watch on 4 screens at a time",
        "Ultra HD (4K) and HDR available",
        "Unlimited movies and TV shows",
        "Watch on your laptop, TV, phone or tablet",
        "Cancel anytime",
        "Download on 4 devices",
      ],
      recommended: false,
    },
  ];

  // Toggle FAQ answer
  const toggleFaq = (index) => {
    setActiveIndex(activeIndex === index ? null : index);
  };

  // Set animation delay on features list items
  useEffect(() => {
    const featureItems = document.querySelectorAll(".features li");
    featureItems.forEach((item, index) => {
      item.style.setProperty("--i", index);
    });

    // Set loaded state for animations
    setTimeout(() => {
      setIsLoaded(true);
    }, 100);

    // Scroll to top when component mounts
    window.scrollTo(0, 0);
  }, []);

  return (
    <section className="pricing">
      {/* Background orbs for decoration */}
      <div className="pricing-orb pricing-orb-1"></div>
      <div className="pricing-orb pricing-orb-2"></div>

      <div className="container">
        <div className="pricing-header">
          <h1>Choose the plan that's right for you</h1>
          <p>
            Flexible plans for every budget. Cancel anytime. All plans include
            unlimited movies and TV shows.
          </p>
        </div>

        <div className="pricing-grid">
          {plans.map((plan) => (
            <div
              key={plan.id}
              className={`pricing-card ${
                plan.recommended ? "recommended" : ""
              }`}
            >
              {plan.recommended && (
                <div className="recommended-badge">
                  <i className="fas fa-crown"></i> Most Popular
                </div>
              )}
              <div className="pricing-card-header">
                <h2>{plan.name}</h2>
                <div className="price">
                  <span className="currency">$</span>
                  <span className="amount">{plan.price}</span>
                  <span className="period">/month</span>
                </div>
              </div>
              <div className="pricing-card-body">
                <ul className="features">
                  {plan.features.map((feature, index) => (
                    <li key={index}>
                      <i className="fas fa-check"></i>
                      {feature}
                      {index === 0 && plan.name === "Premium" && (
                        <span className="feature-tag">Best Value</span>
                      )}
                    </li>
                  ))}
                </ul>
              </div>
              <div className="pricing-card-footer">
                <button className="subscribe-btn">Subscribe Now</button>
              </div>
            </div>
          ))}
        </div>

        {/* Updated "Every Plan Includes" Section to match screenshot */}
        <div className="additional-features">
          <h2>Every plan includes</h2>
          <div className="features-grid">
            <div className="feature-item">
              <div className="feature-icon">
                <i className="fas fa-tv"></i>
              </div>
              <div className="feature-content">
                <h3>Watch Anywhere</h3>
                <p>
                  Stream on your phone, tablet, laptop, TV, or game console.
                </p>
              </div>
            </div>

            <div className="feature-item">
              <div className="feature-icon">
                <i className="fas fa-download"></i>
              </div>
              <div className="feature-content">
                <h3>Download & Go</h3>
                <p>Save your favorites and watch offline on the mobile app.</p>
              </div>
            </div>

            <div className="feature-item">
              <div className="feature-icon">
                <i className="fas fa-calendar-times"></i>
              </div>
              <div className="feature-content">
                <h3>Cancel Anytime</h3>
                <p>
                  Flexible plans with no long-term contracts or commitments.
                </p>
              </div>
            </div>

            <div className="feature-item">
              <div className="feature-icon">
                <i className="fas fa-film"></i>
              </div>
              <div className="feature-content">
                <h3>Exclusive Content</h3>
                <p>
                  Access to original shows and movies you can't find anywhere
                  else.
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* FAQ Section */}
        <div className="faq-section">
          <h2>Frequently Asked Questions</h2>
          {faqItems.map((faqItem, index) => (
            <div
              key={index}
              className={`faq-item ${activeIndex === index ? "active" : ""}`}
            >
              <div className="faq-question" onClick={() => toggleFaq(index)}>
                <h3>{faqItem.question}</h3>
                <div className="faq-toggle">
                  <i className="fas fa-plus"></i>
                </div>
              </div>
              <div className="faq-answer">
                <p>{faqItem.answer}</p>
              </div>
            </div>
          ))}
        </div>

        {/* Trial Banner */}
        <div className="trial-banner">
          <h2>Start your free 30-day trial today</h2>
          <p>
            Try all features risk-free for 30 days. No credit card required.
          </p>
          <button className="trial-btn">Start Free Trial</button>
        </div>
      </div>
    </section>
  );
};

export default Pricing;

--- END OF FILE netflix-clone/src/components/pricing/Pricing.jsx ---

--- START OF FILE netflix-clone/src/components/privacy/Privacy.css ---
.privacy-hero {
  background: linear-gradient(135deg, var(--purple-dark) 0%, var(--purple-main) 100%);
  padding: 100px 0 60px;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.privacy-hero::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="none"><path d="M0,0 L100,0 L100,100 Z" fill="rgba(255,255,255,0.05)"/></svg>');
  background-size: cover;
}

.privacy-hero-content {
  position: relative;
  z-index: 2;
}

.privacy-hero h1 {
  color: var(--white);
  font-size: 48px;
  font-weight: 700;
  margin-bottom: 20px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
}

.privacy-hero p {
  color: var(--white);
  font-size: 18px;
  max-width: 700px;
  margin: 0 auto;
  opacity: 0.9;
}

.privacy-content {
  background-color: #1a0733;
  padding: 60px 0;
}

.privacy-wrapper {
  max-width: 900px;
  margin: 0 auto;
  background: rgba(45, 8, 84, 0.7);
  backdrop-filter: blur(10px);
  border-radius: var(--radius-medium);
  padding: 40px;
  box-shadow: 0 15px 30px var(--shadow-dark);
}

.privacy-section {
  margin-bottom: 50px;
  padding-bottom: 40px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.privacy-section:last-child {
  margin-bottom: 0;
  padding-bottom: 0;
  border-bottom: none;
}

.privacy-section h2 {
  color: var(--purple-lightest);
  font-size: 28px;
  font-weight: 600;
  margin-bottom: 20px;
  position: relative;
  padding-bottom: 15px;
}

.privacy-section h2::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 60px;
  height: 3px;
  background: linear-gradient(to right, var(--purple-main), var(--purple-lightest));
  border-radius: 2px;
}

.privacy-section h3 {
  color: var(--white);
  font-size: 22px;
  font-weight: 500;
  margin: 25px 0 15px;
}

.privacy-section p {
  color: rgba(255, 255, 255, 0.8);
  font-size: 16px;
  line-height: 1.8;
  margin-bottom: 20px;
}

.privacy-section ul {
  list-style-type: disc;
  padding-left: 25px;
  margin: 15px 0;
}

.privacy-section ul li {
  color: rgba(255, 255, 255, 0.8);
  margin-bottom: 10px;
  line-height: 1.6;
}

.contact-details {
  background: rgba(255, 255, 255, 0.05);
  border-radius: var(--radius-small);
  padding: 20px;
  margin-top: 20px;
}

.contact-details p {
  margin-bottom: 10px;
}

.contact-details p:last-child {
  margin-bottom: 0;
}

.last-updated {
  text-align: center;
  font-style: italic;
  opacity: 0.7;
}

/* Animation classes */
.section-animated {
  opacity: 0;
  transform: translateY(30px);
  transition: var(--transition-slow);
}

.section-visible {
  opacity: 1;
  transform: translateY(0);
}

/* Responsive styles */
@media only screen and (max-width: 1024px) {
  .privacy-wrapper {
    max-width: 90%;
  }
  
  .privacy-hero h1 {
    font-size: 40px;
  }
}

@media only screen and (max-width: 768px) {
  .privacy-hero {
    padding: 80px 0 40px;
  }
  
  .privacy-hero h1 {
    font-size: 36px;
  }
  
  .privacy-wrapper {
    padding: 30px;
  }
  
  .privacy-section h2 {
    font-size: 24px;
  }
  
  .privacy-section h3 {
    font-size: 20px;
  }
}

@media only screen and (max-width: 576px) {
  .privacy-hero {
    padding: 60px 0 30px;
  }
  
  .privacy-hero h1 {
    font-size: 30px;
  }
  
  .privacy-hero p {
    font-size: 16px;
  }
  
  .privacy-wrapper {
    padding: 20px;
    border-radius: var(--radius-small);
  }
  
  .privacy-section {
    margin-bottom: 30px;
    padding-bottom: 30px;
  }
  
  .privacy-section h2 {
    font-size: 22px;
    padding-bottom: 10px;
  }
  
  .privacy-section h3 {
    font-size: 18px;
  }
  
  .privacy-section p, 
  .privacy-section ul li {
    font-size: 15px;
  }
}
--- END OF FILE netflix-clone/src/components/privacy/Privacy.css ---

--- START OF FILE netflix-clone/src/components/privacy/Privacy.jsx ---
import React, { useEffect } from "react";
import "./Privacy.css";

const Privacy = () => {
  useEffect(() => {
    window.scrollTo(0, 0);
    
    // Animation for section visibility
    const sections = document.querySelectorAll('.section-animated');
    
    // First make sections visible with a small delay for initial rendering
    setTimeout(() => {
      sections.forEach((section, index) => {
        setTimeout(() => {
          section.classList.add('section-visible');
        }, index * 100); // Stagger the animations
      });
    }, 300);
    
    // Also use IntersectionObserver for scrolling animations
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('section-visible');
        }
      });
    }, { threshold: 0.1 });
    
    sections.forEach(section => {
      observer.observe(section);
    });
    
    return () => {
      sections.forEach(section => {
        observer.unobserve(section);
      });
    };
  }, []);

  return (
    <>
      <section className="privacy-hero">
        <div className="container">
          <div className="privacy-hero-content">
            <h1>Privacy Policy</h1>
            <p>Your privacy is important to us. This Privacy Policy explains how we collect, use, and protect your information.</p>
          </div>
        </div>
      </section>

      <section className="privacy-content">
        <div className="container">
          <div className="privacy-wrapper">
            
            <div className="privacy-section section-animated">
              <h2>Introduction</h2>
              <p>
                Welcome to our Privacy Policy. This policy explains how we collect, use, disclose, and safeguard your information when you visit our website or use our streaming service. Please read this privacy policy carefully. If you do not agree with the terms of this privacy policy, please do not access the site.
              </p>
              <p>
                We reserve the right to make changes to this Privacy Policy at any time and for any reason. We will alert you about any changes by updating the "Last Updated" date of this Privacy Policy. You are encouraged to periodically review this Privacy Policy to stay informed of updates.
              </p>
            </div>
            
            <div className="privacy-section section-animated">
              <h2>Information We Collect</h2>
              <h3>Personal Data</h3>
              <p>
                When you register for an account, we may collect the following types of information:
              </p>
              <ul>
                <li>Name, email address, and contact details</li>
                <li>Billing and payment information</li>
                <li>Account credentials</li>
                <li>Profile information</li>
              </ul>
              
              <h3>Usage Data</h3>
              <p>
                We automatically collect certain information when you visit, use, or navigate our platform. This information does not reveal your specific identity but may include:
              </p>
              <ul>
                <li>Device and browser information</li>
                <li>IP address</li>
                <li>Content viewing history</li>
                <li>Search queries within our platform</li>
                <li>Features you use and the time spent on our platform</li>
              </ul>
            </div>
            
            <div className="privacy-section section-animated">
              <h2>How We Use Your Information</h2>
              <p>We may use the information we collect for various purposes, including:</p>
              <ul>
                <li>To provide and maintain our service</li>
                <li>To process your subscriptions and transactions</li>
                <li>To personalize your experience and deliver content recommendations</li>
                <li>To improve our website and service</li>
                <li>To send you updates, promotional materials, and other information</li>
                <li>To respond to your inquiries and provide customer support</li>
                <li>To detect, prevent, and address technical issues</li>
                <li>To comply with legal obligations</li>
              </ul>
            </div>
            
            <div className="privacy-section section-animated">
              <h2>Cookies and Tracking Technologies</h2>
              <p>
                We use cookies and similar tracking technologies to collect and store information when you use our service. Cookies are small files placed on your device that enable us to: remember your preferences, understand how you use our service, improve your user experience, and deliver relevant advertisements.
              </p>
              <p>
                You can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. However, if you do not accept cookies, you may not be able to use some portions of our service.
              </p>
            </div>
            
            <div className="privacy-section section-animated">
              <h2>Data Sharing and Disclosure</h2>
              <p>We may share your information in the following situations:</p>
              <ul>
                <li><strong>Service Providers:</strong> We may share your information with third-party vendors, service providers, and other partners who perform services on our behalf.</li>
                <li><strong>Business Transfers:</strong> If we are involved in a merger, acquisition, or sale of all or a portion of our assets, your information may be transferred as part of that transaction.</li>
                <li><strong>Legal Requirements:</strong> We may disclose your information where required to do so by law or in response to valid requests by public authorities.</li>
                <li><strong>Protection:</strong> We may disclose your information to protect the rights, property, or safety of our company, our users, or others.</li>
              </ul>
            </div>
            
            <div className="privacy-section section-animated">
              <h2>Security of Your Information</h2>
              <p>
                We use administrative, technical, and physical security measures to protect your personal information. While we have taken reasonable steps to secure the personal information you provide to us, please be aware that despite our efforts, no security measures are perfect or impenetrable, and no method of data transmission can be guaranteed against any interception or other type of misuse.
              </p>
            </div>
            
            <div className="privacy-section section-animated">
              <h2>Your Privacy Rights</h2>
              <p>
                Depending on your location, you may have certain rights regarding your personal information, such as:
              </p>
              <ul>
                <li>The right to access the personal information we have about you</li>
                <li>The right to request correction of inaccurate information</li>
                <li>The right to request deletion of your personal information</li>
                <li>The right to object to or restrict processing of your information</li>
                <li>The right to data portability</li>
                <li>The right to withdraw consent</li>
              </ul>
              <p>
                To exercise these rights, please contact us using the information provided in the "Contact Us" section.
              </p>
            </div>
            
            <div className="privacy-section section-animated">
              <h2>Children's Privacy</h2>
              <p>
                Our service is not directed to children under the age of 13. We do not knowingly collect personal information from children under 13. If you are a parent or guardian and you are aware that your child has provided us with personal information, please contact us so that we can take necessary actions.
              </p>
            </div>
            
            <div className="privacy-section section-animated">
              <h2>International Data Transfers</h2>
              <p>
                Your information may be transferred to — and maintained on — computers located outside of your state, province, country, or other governmental jurisdiction where the data protection laws may differ from those of your jurisdiction. If you are located outside the United States and choose to provide information to us, please note that we transfer the data to the United States and process it there.
              </p>
            </div>
            
            <div className="privacy-section section-animated">
              <h2>Contact Us</h2>
              <p>
                If you have any questions about this Privacy Policy, please contact us:
              </p>
              <div className="contact-details">
                <p><strong>Email:</strong> privacy@yourmoviestreamingsite.com</p>
                <p><strong>Address:</strong> 123 Movie Lane, Cinema City, CA 90210</p>
                <p><strong>Phone:</strong> +1 (555) 123-4567</p>
              </div>
            </div>
            
            <div className="privacy-section section-animated last-updated">
              <p>Last Updated: April 10, 2025</p>
            </div>
            
          </div>
        </div>
      </section>
    </>
  );
};

export default Privacy;
--- END OF FILE netflix-clone/src/components/privacy/Privacy.jsx ---

--- START OF FILE netflix-clone/src/components/profile/Profile.css ---
/* Profile page styles */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

:root {
  --primary-purple: #7b2cbf;
  --primary-purple-light: #9d4edd;
  --primary-purple-dark: #5a189a;
  --primary-gradient: linear-gradient(to right, #5a189a, #7b2cbf, #9d4edd);
  --white: #ffffff;
  --off-white: #f8f9fa;
  --light-gray: #e9ecef;
  --medium-gray: #adb5bd;
  --dark-gray: #495057;
  --text-dark: #212529;
  --background-dark: #120425;
  --background-gradient: linear-gradient(to bottom, #0a0118, #1a0733);
  --card-bg: rgba(255, 255, 255, 0.05);
  --box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
  --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  --glow-purple: 0 0 15px rgba(157, 78, 221, 0.5);
  --border-color: rgba(156, 39, 176, 0.2);
}

.profile-page {
  padding: 100px 0 60px;
  background: var(--background-gradient);
  min-height: 100vh;
  color: var(--white);
}

.profile-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.profile-header {
  margin-bottom: 50px;
  text-align: center;
}

.profile-header h1 {
  font-size: 36px;
  font-weight: 700;
  margin-bottom: 20px;
  background: linear-gradient(to right, #9d4edd, #e0aaff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.profile-header p {
  font-size: 16px;
  font-weight: 300;
  color: var(--medium-gray);
  max-width: 600px;
  margin: 0 auto;
}

.profile-content {
  display: grid;
  grid-template-columns: 300px 1fr;
  gap: 30px;
}

/* Profile Sidebar */
.profile-sidebar {
  background: var(--card-bg);
  border-radius: 15px;
  padding: 30px;
  backdrop-filter: blur(10px);
  border: 1px solid var(--border-color);
  box-shadow: var(--card-shadow);
  height: fit-content;
}

.user-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 30px;
  border-bottom: 1px solid var(--border-color);
}

.profile-picture {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  margin-bottom: 20px;
  border: 3px solid var(--primary-purple-light);
  overflow: hidden;
  box-shadow: var(--glow-purple);
}

.profile-picture img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.user-details h2 {
  font-size: 22px;
  font-weight: 600;
  margin-bottom: 5px;
  text-align: center;
}

.user-details p {
  font-size: 14px;
  color: var(--medium-gray);
  margin-bottom: 15px;
  text-align: center;
}

.user-stats {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-top: 20px;
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.stat-value {
  font-size: 20px;
  font-weight: 600;
  color: var(--primary-purple-light);
}

.stat-label {
  font-size: 12px;
  color: var(--medium-gray);
}

.profile-nav {
  margin-top: 10px;
}

.profile-nav ul {
  list-style: none;
  padding: 0;
}

.profile-nav li {
  margin-bottom: 15px;
}

.profile-nav a {
  display: flex;
  align-items: center;
  padding: 12px 15px;
  color: var(--white);
  text-decoration: none;
  border-radius: 10px;
  transition: all 0.3s ease;
  font-weight: 500;
}

.profile-nav a:hover {
  background: rgba(156, 39, 176, 0.1);
  color: var(--primary-purple-light);
  transform: translateX(5px);
}

.profile-nav a.active {
  background: rgba(156, 39, 176, 0.2);
  color: var(--primary-purple-light);
  border-left: 3px solid var(--primary-purple-light);
}

.profile-nav i {
  margin-right: 12px;
  width: 20px;
  font-size: 18px;
}

.logout-btn {
  margin-top: 30px;
  width: 100%;
  padding: 12px;
  text-align: center;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid var(--border-color);
  border-radius: 10px;
  cursor: pointer;
  font-weight: 500;
  color: var(--medium-gray);
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.logout-btn:hover {
  background: rgba(220, 53, 69, 0.1);
  color: #dc3545;
}

.logout-btn i {
  margin-right: 8px;
}

/* Main Section */
.profile-main {
  background: var(--card-bg);
  border-radius: 15px;
  padding: 30px;
  backdrop-filter: blur(10px);
  border: 1px solid var(--border-color);
  box-shadow: var(--card-shadow);
}

.section-title {
  font-size: 24px;
  font-weight: 600;
  margin-bottom: 25px;
  padding-bottom: 15px;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  align-items: center;
}

.section-title i {
  margin-right: 12px;
  color: var(--primary-purple-light);
}

/* Favorites Section */
.favorites-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 40px;
}

.favorite-item {
  border-radius: 10px;
  overflow: hidden;
  position: relative;
  box-shadow: var(--box-shadow);
  transition: all 0.3s ease;
  aspect-ratio: 2/3;
}

.favorite-item:hover {
  transform: translateY(-5px);
  box-shadow: var(--glow-purple);
}

.favorite-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.favorite-item .overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.9), transparent);
  padding: 15px;
  color: var(--white);
}

.favorite-item .overlay h4 {
  margin: 0 0 5px 0;
  font-size: 16px;
  font-weight: 500;
}

.favorite-item .rating {
  font-size: 14px;
  color: var(--primary-purple-light);
  display: flex;
  align-items: center;
}

.favorite-item .rating i {
  margin-right: 4px;
  color: #ffc107;
}

.remove-favorite {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--white);
  cursor: pointer;
  opacity: 0;
  transition: all 0.3s ease;
}

.favorite-item:hover .remove-favorite {
  opacity: 1;
}

.remove-favorite:hover {
  background: rgba(220, 53, 69, 0.8);
}

/* History Section */
.history-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.history-item {
  display: flex;
  align-items: center;
  background: rgba(255, 255, 255, 0.02);
  border-radius: 10px;
  padding: 15px;
  transition: all 0.3s ease;
}

.history-item:hover {
  background: rgba(255, 255, 255, 0.05);
}

.history-poster {
  width: 100px;
  height: 60px;
  border-radius: 5px;
  overflow: hidden;
  margin-right: 20px;
}

.history-poster img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.history-details {
  flex: 1;
}

.history-details h4 {
  margin: 0 0 5px 0;
  font-size: 16px;
  font-weight: 500;
}

.history-meta {
  display: flex;
  align-items: center;
  gap: 20px;
  font-size: 14px;
  color: var(--medium-gray);
}

.watch-date {
  display: flex;
  align-items: center;
}

.watch-date i {
  margin-right: 5px;
  font-size: 12px;
}

.progress {
  display: flex;
  align-items: center;
}

.progress i {
  margin-right: 5px;
  font-size: 12px;
}

.continue-watching {
  margin-left: auto;
  padding: 8px 15px;
  background: rgba(156, 39, 176, 0.2);
  border: none;
  border-radius: 5px;
  color: var(--primary-purple-light);
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
}

.continue-watching:hover {
  background: rgba(156, 39, 176, 0.3);
  transform: translateY(-2px);
}

/* Responsive */
@media (max-width: 992px) {
  .profile-content {
    grid-template-columns: 250px 1fr;
    gap: 20px;
  }

  .profile-picture {
    width: 120px;
    height: 120px;
  }

  .favorites-grid {
    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  }
}

@media (max-width: 768px) {
  .profile-content {
    grid-template-columns: 1fr;
  }

  .profile-sidebar {
    margin-bottom: 20px;
  }

  .user-info {
    flex-direction: row;
    align-items: flex-start;
    gap: 20px;
    text-align: left;
  }

  .user-details {
    flex: 1;
  }

  .user-details h2,
  .user-details p {
    text-align: left;
  }

  .profile-picture {
    margin-bottom: 0;
  }

  .history-item {
    flex-direction: column;
    align-items: flex-start;
  }

  .history-poster {
    margin-right: 0;
    margin-bottom: 15px;
    width: 100%;
    height: 120px;
  }

  .history-meta {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }

  .continue-watching {
    margin-left: 0;
    margin-top: 15px;
    width: 100%;
  }
}

@media (max-width: 576px) {
  .profile-page {
    padding: 80px 0 40px;
  }

  .profile-header h1 {
    font-size: 28px;
  }

  .user-info {
    flex-direction: column;
    align-items: center;
  }

  .user-details h2,
  .user-details p {
    text-align: center;
  }

  .favorites-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}
--- END OF FILE netflix-clone/src/components/profile/Profile.css ---

--- START OF FILE netflix-clone/src/components/profile/Profile.jsx ---
import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import "./Profile.css";
import { homeData, trending, latest } from "../../dummyData";

const Profile = () => {
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState("favorites");
  const [favorites, setFavorites] = useState([]);
  const [watchHistory, setWatchHistory] = useState([]);

  // Simulating data loading with useEffect
  useEffect(() => {
    // In a real app, you would fetch this data from an API
    // For demo, we'll use some random movies from dummyData
    const favoriteMovies = [];
    const historyItems = [];

    // Generate random favorites
    const allMovies = [...homeData, ...trending, ...latest];
    const shuffled = [...allMovies].sort(() => 0.5 - Math.random());

    // Select 6 random movies for favorites
    const selectedFavorites = shuffled.slice(0, 6);
    favoriteMovies.push(...selectedFavorites);

    // Select 5 random movies for watch history
    const selectedHistory = shuffled.slice(6, 11);
    historyItems.push(
      ...selectedHistory.map((movie) => ({
        ...movie,
        watchDate: randomDate(new Date(2023, 0, 1), new Date()),
        progress: Math.floor(Math.random() * 100),
      }))
    );

    // Sort history by date
    historyItems.sort((a, b) => new Date(b.watchDate) - new Date(a.watchDate));

    setFavorites(favoriteMovies);
    setWatchHistory(historyItems);
  }, []);

  // Helper function to generate random dates for watch history
  const randomDate = (start, end) => {
    const date = new Date(
      start.getTime() + Math.random() * (end.getTime() - start.getTime())
    );
    return date.toISOString().split("T")[0];
  };

  // Function to format date in a readable format
  const formatDate = (dateString) => {
    const options = { year: "numeric", month: "short", day: "numeric" };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  // Handle removing a favorite
  const handleRemoveFavorite = (id) => {
    setFavorites(favorites.filter((movie) => movie.id !== id));
  };

  // Handle logout
  const handleLogout = () => {
    // In a real app, this would include authentication logic
    navigate("/");
  };

  return (
    <div className="profile-page">
      <div className="profile-container">
        <div className="profile-header">
          <h1>My Profile</h1>
          <p>
            Manage your account, view your watch history, and access your
            favorite content
          </p>
        </div>

        <div className="profile-content">
          {/* Sidebar */}
          <div className="profile-sidebar">
            <div className="user-info">
              <div className="profile-picture">
                <img src="./images/avatar.png" alt="User Profile" />
              </div>
              <div className="user-details">
                <h2>John Doe</h2>
                <p>john.doe@example.com</p>
                <div className="user-stats">
                  <div className="stat-item">
                    <span className="stat-value">42</span>
                    <span className="stat-label">Favorites</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-value">128</span>
                    <span className="stat-label">Watched</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="profile-nav">
              <ul>
                <li>
                  <a
                    href="#favorites"
                    className={activeTab === "favorites" ? "active" : ""}
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveTab("favorites");
                    }}
                  >
                    <i className="fas fa-heart"></i>
                    Favorites
                  </a>
                </li>
                <li>
                  <a
                    href="#history"
                    className={activeTab === "history" ? "active" : ""}
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveTab("history");
                    }}
                  >
                    <i className="fas fa-history"></i>
                    Watch History
                  </a>
                </li>
                <li>
                  <a
                    href="#settings"
                    className={activeTab === "settings" ? "active" : ""}
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveTab("settings");
                    }}
                  >
                    <i className="fas fa-cog"></i>
                    Account Settings
                  </a>
                </li>
                <li>
                  <a
                    href="#subscriptions"
                    className={activeTab === "subscriptions" ? "active" : ""}
                    onClick={(e) => {
                      e.preventDefault();
                      setActiveTab("subscriptions");
                    }}
                  >
                    <i className="fas fa-credit-card"></i>
                    Subscription
                  </a>
                </li>
              </ul>

              <button className="logout-btn" onClick={handleLogout}>
                <i className="fas fa-sign-out-alt"></i> Sign Out
              </button>
            </div>
          </div>

          {/* Main Content */}
          <div className="profile-main">
            {activeTab === "favorites" && (
              <div>
                <h2 className="section-title">
                  <i className="fas fa-heart"></i> My Favorites
                </h2>

                {favorites.length > 0 ? (
                  <div className="favorites-grid">
                    {favorites.map((movie) => (
                      <div className="favorite-item" key={movie.id}>
                        <img src={movie.cover} alt={movie.name} />
                        <div className="overlay">
                          <h4>{movie.name}</h4>
                          {movie.rating && (
                            <div className="rating">
                              <i className="fas fa-star"></i> {movie.rating}
                            </div>
                          )}
                        </div>
                        <button
                          className="remove-favorite"
                          onClick={() => handleRemoveFavorite(movie.id)}
                          aria-label="Remove from favorites"
                        >
                          <i className="fas fa-times"></i>
                        </button>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p>You haven't added any favorites yet.</p>
                )}
              </div>
            )}

            {activeTab === "history" && (
              <div>
                <h2 className="section-title">
                  <i className="fas fa-history"></i> Watch History
                </h2>

                {watchHistory.length > 0 ? (
                  <div className="history-list">
                    {watchHistory.map((item) => (
                      <div className="history-item" key={item.id}>
                        <div className="history-poster">
                          <img src={item.cover} alt={item.name} />
                        </div>
                        <div className="history-details">
                          <h4>{item.name}</h4>
                          <div className="history-meta">
                            <div className="watch-date">
                              <i className="far fa-calendar-alt"></i>
                              {formatDate(item.watchDate)}
                            </div>
                            <div className="progress">
                              <i className="fas fa-spinner"></i>
                              {item.progress}% completed
                            </div>
                          </div>
                        </div>
                        <button className="continue-watching">
                          Continue Watching
                        </button>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p>No watch history available.</p>
                )}
              </div>
            )}

            {activeTab === "settings" && (
              <div>
                <h2 className="section-title">
                  <i className="fas fa-cog"></i> Account Settings
                </h2>
                <p>Account settings page is under development.</p>
              </div>
            )}

            {activeTab === "subscriptions" && (
              <div>
                <h2 className="section-title">
                  <i className="fas fa-credit-card"></i> Subscription Details
                </h2>
                <p>Subscription details page is under development.</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Profile;

--- END OF FILE netflix-clone/src/components/profile/Profile.jsx ---

--- START OF FILE netflix-clone/src/components/series/Series.jsx ---
import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import "./series.css";
import {
  homeData,
  trending,
  latest,
  upcome,
  recommended,
  documentaries,
  animation,
} from "../../dummyData";

const Series = () => {
  const [activeCategory, setActiveCategory] = useState("all");
  const [filteredSeries, setFilteredSeries] = useState([]);
  const [genres, setGenres] = useState([]);
  const [favorites, setFavorites] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // Kesin kaynak tespit fonksiyonu
  const getExactSource = (item) => {
    // Her veri kaynağını kontrol et ve ilk eşleşen kaynağı döndür
    if (homeData.find((i) => i.id === item.id && i.name === item.name))
      return "homeData";
    if (trending.find((i) => i.id === item.id && i.name === item.name))
      return "trending";
    if (latest.find((i) => i.id === item.id && i.name === item.name))
      return "latest";
    if (upcome.find((i) => i.id === item.id && i.name === item.name))
      return "upcome";
    if (recommended.find((i) => i.id === item.id && i.name === item.name))
      return "recommended";
    if (documentaries.find((i) => i.id === item.id && i.name === item.name))
      return "documentaries";
    if (animation.find((i) => i.id === item.id && i.name === item.name))
      return "animation";

    // Eğer eşleşme bulunamazsa
    return "homeData";
  };

  // Veri kaynaklarındaki tüm filmleri eksiksiz meta verilerle hazırla
  const prepareDataSource = (source, items) => {
    return items.map((item) => ({
      ...item,
      originalId: item.id,
      source,
      uniqueId: `${source}-${item.id}`,
    }));
  };

  // Tüm TV dizilerini kaynak bilgileriyle birlikte ekle
  const allTVShows = [
    ...prepareDataSource("homeData", homeData),
    ...prepareDataSource("trending", trending),
    ...prepareDataSource("latest", latest),
    ...prepareDataSource("upcome", upcome),
    ...prepareDataSource("recommended", recommended),
    ...prepareDataSource("documentaries", documentaries),
    ...prepareDataSource("animation", animation),
  ];

  // Extract unique genres
  useEffect(() => {
    const uniqueGenres = new Set();

    allTVShows.forEach((show) => {
      if (show.genres) {
        show.genres.split(", ").forEach((genre) => {
          uniqueGenres.add(genre);
        });
      }
    });

    setGenres(["All", ...Array.from(uniqueGenres)]);
    setIsLoading(false);
  }, []);

  // Filter series based on active category
  useEffect(() => {
    if (activeCategory === "all" || activeCategory === "All") {
      setFilteredSeries(allTVShows);
    } else {
      setFilteredSeries(
        allTVShows.filter(
          (show) => show.genres && show.genres.includes(activeCategory)
        )
      );
    }
  }, [activeCategory]);

  // Toggle favorite status
  const toggleFavorite = (uniqueId) => {
    if (favorites.includes(uniqueId)) {
      setFavorites(favorites.filter((favId) => favId !== uniqueId));
    } else {
      setFavorites([...favorites, uniqueId]);
    }
  };

  return (
    <div className="series-page">
      <div className="hero-banner">
        <div className="overlay"></div>
        <div className="hero-content">
          <h1>TV Shows</h1>
          <p>Discover the best TV series from around the world</p>
        </div>
      </div>

      <div className="series-container">
        <div className="genre-filter">
          <h3>Browse by Genre</h3>
          <div className="genre-tabs">
            {genres.map((genre, index) => (
              <button
                key={index}
                className={
                  activeCategory.toLowerCase() === genre.toLowerCase()
                    ? "active"
                    : ""
                }
                onClick={() => setActiveCategory(genre.toLowerCase())}
              >
                {genre}
              </button>
            ))}
          </div>
        </div>

        {isLoading ? (
          <div className="loading-spinner">
            <div className="spinner"></div>
            <p>Loading amazing shows...</p>
          </div>
        ) : (
          <>
            <div className="featured-series">
              <h2>Featured TV Shows</h2>
              <div className="featured-grid">
                {filteredSeries.slice(0, 3).map((show) => (
                  <div
                    className="featured-card"
                    key={`featured-${show.uniqueId}`}
                  >
                    <div className="featured-image">
                      <img src={show.cover} alt={show.name} />
                      <div className="overlay-gradient"></div>
                      <div className="featured-info">
                        <h3>{show.name}</h3>
                        <div className="meta-info">
                          {show.rating && (
                            <span className="rating">{show.rating}</span>
                          )}
                          <span className="duration">{show.time}</span>
                          {show.date && (
                            <span className="year">
                              {show.date.split("-")[2]}
                            </span>
                          )}
                        </div>
                        <p className="description">
                          {show.desc
                            ? `${show.desc.substring(0, 120)}...`
                            : "No description available."}
                        </p>
                        <div className="action-buttons">
                          <Link
                            to={`/singlePage/${show.source}/${show.originalId}`}
                            className="btn-watch"
                          >
                            <i className="fas fa-play"></i> Watch Now
                          </Link>
                          <button
                            className={`btn-favorite ${
                              favorites.includes(show.uniqueId) ? "active" : ""
                            }`}
                            onClick={() => toggleFavorite(show.uniqueId)}
                          >
                            <i
                              className={`${
                                favorites.includes(show.uniqueId)
                                  ? "fas"
                                  : "far"
                              } fa-heart`}
                            ></i>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="series-grid">
              <h2>
                All {activeCategory !== "all" ? activeCategory : ""} Shows
              </h2>
              <div className="grid-container">
                {filteredSeries.map((show) => (
                  <div className="series-card" key={`grid-${show.uniqueId}`}>
                    <div className="card-image">
                      <img src={show.cover} alt={show.name} />
                      <div className="card-overlay">
                        <div className="card-buttons">
                          <Link
                            to={`/singlePage/${show.source}/${show.originalId}`}
                            className="btn-play"
                          >
                            <i className="fas fa-play"></i>
                          </Link>
                          <button
                            className="btn-like"
                            onClick={() => toggleFavorite(show.uniqueId)}
                          >
                            <i
                              className={`${
                                favorites.includes(show.uniqueId)
                                  ? "fas"
                                  : "far"
                              } fa-heart`}
                            ></i>
                          </button>
                          <button className="btn-add">
                            <i className="fas fa-plus"></i>
                          </button>
                        </div>
                      </div>
                    </div>
                    <div className="card-info">
                      <h4>{show.name}</h4>
                      <div className="info-meta">
                        {show.rating && (
                          <span className="rating">{show.rating}</span>
                        )}
                        <span className="duration">{show.time}</span>
                      </div>
                      {show.genres && <p className="genres">{show.genres}</p>}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </>
        )}

        <div className="subscription-banner">
          <div className="banner-content">
            <h2>Unlock Premium TV Shows</h2>
            <p>
              Subscribe now and get access to exclusive content and early
              releases
            </p>
            <Link to="/pricing" className="btn-subscribe">
              View Plans
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Series;

--- END OF FILE netflix-clone/src/components/series/Series.jsx ---

--- START OF FILE netflix-clone/src/components/series/series.css ---
.series-page {
  background-color: #0f0f1e;
  color: #fff;
  min-height: 100vh;
}

/* Hero Banner Styles */
.hero-banner {
  position: relative;
  height: 50vh;
  min-height: 400px;
  background-image: url('../../../public/images/home2.jpg');
  background-size: cover;
  background-position: center;
  margin-bottom: 2rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.hero-banner .overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(to top, #0f0f1e, transparent 50%, rgba(15, 15, 30, 0.7));
}

.hero-content {
  position: relative;
  z-index: 2;
  text-align: center;
  max-width: 800px;
  padding: 0 2rem;
}

.hero-content h1 {
  font-size: 4rem;
  margin-bottom: 1rem;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  font-weight: 700;
  background: linear-gradient(to right, #9d50bb, #6e48aa);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}

.hero-content p {
  font-size: 1.2rem;
  color: #e0e0e0;
  margin-bottom: 2rem;
}

/* Container Styles */
.series-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 2rem 4rem;
}

/* Genre Filter Styles */
.genre-filter {
  margin-bottom: 3rem;
  padding: 1rem 0;
}

.genre-filter h3 {
  font-size: 1.4rem;
  margin-bottom: 1rem;
  color: #d6d6d6;
}

.genre-tabs {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.genre-tabs button {
  background-color: rgba(110, 72, 170, 0.2);
  border: 1px solid #6e48aa;
  color: #fff;
  padding: 0.5rem 1.2rem;
  border-radius: 50px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.genre-tabs button:hover {
  background-color: rgba(110, 72, 170, 0.4);
}

.genre-tabs button.active {
  background: linear-gradient(to right, #9d50bb, #6e48aa);
  border-color: transparent;
  font-weight: 600;
}

/* Featured Series Styles */
.featured-series {
  margin-bottom: 3rem;
}

.featured-series h2,
.series-grid h2 {
  font-size: 1.8rem;
  margin-bottom: 1.5rem;
  position: relative;
  display: inline-block;
  padding-bottom: 0.5rem;
}

.featured-series h2::after,
.series-grid h2::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: 0;
  width: 60%;
  height: 3px;
  background: linear-gradient(to right, #9d50bb, #6e48aa);
}

.featured-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 1.5rem;
}

.featured-card {
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  height: 100%;
}

.featured-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
}

.featured-image {
  position: relative;
  height: 400px;
}

.featured-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.overlay-gradient {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(to top, rgba(15, 15, 30, 1) 10%, rgba(15, 15, 30, 0.8) 40%, rgba(15, 15, 30, 0.4) 70%, rgba(15, 15, 30, 0.2));
}

.featured-info {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 1.5rem;
}

.featured-info h3 {
  font-size: 1.6rem;
  margin-bottom: 0.5rem;
  font-weight: 700;
}

.meta-info {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
  align-items: center;
}

.meta-info .rating {
  background-color: rgba(157, 80, 187, 0.8);
  padding: 0.2rem 0.5rem;
  border-radius: 4px;
  font-weight: 600;
}

.meta-info .duration,
.meta-info .year {
  color: #bbb;
  font-size: 0.9rem;
}

.description {
  margin-bottom: 1.2rem;
  color: #ddd;
  line-height: 1.4;
}

.action-buttons {
  display: flex;
  gap: 1rem;
}

.btn-watch {
  background: linear-gradient(to right, #9d50bb, #6e48aa);
  color: white;
  text-decoration: none;
  padding: 0.6rem 1.2rem;
  border-radius: 4px;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: all 0.3s ease;
  border: none;
  font-weight: 600;
}

.btn-watch:hover {
  transform: scale(1.05);
  background: linear-gradient(to right, #8a45a5, #5d3d91);
}

.btn-favorite {
  background-color: rgba(255, 255, 255, 0.1);
  border: none;
  color: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-favorite:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.btn-favorite.active {
  background-color: rgba(157, 80, 187, 0.8);
}

/* Series Grid Styles */
.series-grid {
  margin-bottom: 4rem;
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1.5rem;
}

.series-card {
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
  transition: transform 0.3s ease;
  background-color: #1a1a2e;
}

.series-card:hover {
  transform: translateY(-5px);
}

.card-image {
  position: relative;
  height: 260px;
}

.card-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.card-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(15, 15, 30, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.series-card:hover .card-overlay {
  opacity: 1;
}

.card-buttons {
  display: flex;
  gap: 1rem;
}

.btn-play,
.btn-like,
.btn-add {
  background-color: rgba(255, 255, 255, 0.15);
  color: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
}

.btn-play {
  background: linear-gradient(to right, #9d50bb, #6e48aa);
  width: 50px;
  height: 50px;
}

.btn-play:hover,
.btn-like:hover,
.btn-add:hover {
  transform: scale(1.1);
  background-color: rgba(255, 255, 255, 0.25);
}

.btn-play:hover {
  background: linear-gradient(to right, #8a45a5, #5d3d91);
}

.card-info {
  padding: 1rem;
}

.card-info h4 {
  font-size: 1rem;
  margin-bottom: 0.5rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.info-meta {
  display: flex;
  gap: 0.8rem;
  margin-bottom: 0.5rem;
  font-size: 0.8rem;
}

.info-meta .rating {
  color: #9d50bb;
  font-weight: 600;
}

.info-meta .duration {
  color: #aaa;
}

.genres {
  font-size: 0.8rem;
  color: #999;
}

/* Subscription Banner */
.subscription-banner {
  margin-top: 4rem;
  background: linear-gradient(135deg, #232344 0%, #1a1a2e 100%);
  border-radius: 12px;
  padding: 3rem 2rem;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.subscription-banner::before {
  content: '';
  position: absolute;
  top: -10%;
  right: -10%;
  width: 300px;
  height: 300px;
  background: radial-gradient(circle, rgba(157, 80, 187, 0.2) 0%, rgba(110, 72, 170, 0) 70%);
  border-radius: 50%;
}

.subscription-banner::after {
  content: '';
  position: absolute;
  bottom: -10%;
  left: -10%;
  width: 250px;
  height: 250px;
  background: radial-gradient(circle, rgba(157, 80, 187, 0.2) 0%, rgba(110, 72, 170, 0) 70%);
  border-radius: 50%;
}

.banner-content {
  position: relative;
  z-index: 1;
  max-width: 600px;
  margin: 0 auto;
}

.banner-content h2 {
  font-size: 2rem;
  margin-bottom: 1rem;
  background: linear-gradient(to right, #fff, #ddd);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}

.banner-content p {
  color: #bbb;
  margin-bottom: 2rem;
  font-size: 1.1rem;
}

.btn-subscribe {
  background: linear-gradient(to right, #9d50bb, #6e48aa);
  color: white;
  text-decoration: none;
  padding: 0.8rem 2rem;
  border-radius: 50px;
  font-weight: 600;
  display: inline-block;
  transition: all 0.3s ease;
  border: none;
}

.btn-subscribe:hover {
  transform: scale(1.05);
  background: linear-gradient(to right, #8a45a5, #5d3d91);
}

/* Loading Spinner */
.loading-spinner {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 4rem 0;
}

.spinner {
  border: 4px solid rgba(157, 80, 187, 0.2);
  border-left: 4px solid #9d50bb;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
}

.loading-spinner p {
  color: #bbb;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .hero-content h1 {
    font-size: 2.5rem;
  }
  
  .featured-grid {
    grid-template-columns: 1fr;
  }
  
  .grid-container {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  }
  
  .genre-tabs button {
    padding: 0.4rem 0.8rem;
    font-size: 0.8rem;
  }
  
  .subscription-banner {
    padding: 2rem 1rem;
  }
  
  .banner-content h2 {
    font-size: 1.5rem;
  }
}

@media (max-width: 480px) {
  .hero-banner {
    min-height: 300px;
  }
  
  .hero-content h1 {
    font-size: 2rem;
  }
  
  .grid-container {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .series-container {
    padding: 0 1rem 3rem;
  }
}
--- END OF FILE netflix-clone/src/components/series/series.css ---

--- START OF FILE netflix-clone/src/components/trending/Trending.jsx ---
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { Ucard } from "../Upcomming/Ucard";
import "./trending.css";

export const Trending = () => {
  const [items, setItems] = useState([]);
  const [isVisible, setIsVisible] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  // Simulate fetching trending data
  useEffect(() => {
    // Import trending data
    import("../../dummyData").then((data) => {
      setItems(data.trending);
      setIsLoading(false);
    });
  }, []);

  useEffect(() => {
    const section = document.querySelector(".trending-section");

    if (section) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              setIsVisible(true);
              section.classList.add("is-visible");
              observer.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.2 }
      );

      observer.observe(section);

      return () => {
        observer.unobserve(section);
      };
    }
  }, []);

  return (
    <section className={`trending-section ${isVisible ? "is-visible" : ""}`}>
      {/* Background elements */}
      <div className="trending-bg-gradient"></div>
      <div className="trending-glow"></div>

      {/* Animated particles */}
      <div className="trending-particle"></div>
      <div className="trending-particle"></div>
      <div className="trending-particle"></div>
      <div className="trending-particle"></div>
      <div className="trending-particle"></div>

      <div className="trending-container">
        <div className="trending-header">
          <h1 className="trending-title">Trending Content</h1>
          <div className="trending-badge">
            <i className="fa fa-fire"></i> Popular Right Now
          </div>
        </div>

        {isLoading ? (
          <div className="loading-spinner">
            <div className="spinner"></div>
          </div>
        ) : (
          <>
            <div className="trending-grid">
              {items.map((item) => (
                <Ucard key={item.id} item={item} />
              ))}
            </div>

            <div style={{ textAlign: "center" }}>
              <Link to="/movies" className="trending-view-all">
                Explore All Trending <i className="fa fa-arrow-right"></i>
              </Link>
            </div>
          </>
        )}
      </div>
    </section>
  );
};

--- END OF FILE netflix-clone/src/components/trending/Trending.jsx ---

--- START OF FILE netflix-clone/src/components/trending/trending.css ---
.trending-section {
  margin: 70px 0;
  padding: 70px 0;
  background: linear-gradient(135deg, #1a0733 0%, #2d0854 100%);
  border-radius: 20px;
  box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(30px);
  transition: all 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.trending-section.is-visible {
  opacity: 1;
  transform: translateY(0);
}

.trending-container {
  max-width: 90%;
  margin: auto;
  padding: 0 15px;
  position: relative;
  z-index: 3;
}

.trending-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 50px;
  flex-wrap: wrap;
}

.trending-title {
  font-size: 38px;
  font-weight: 700;
  color: var(--white);
  position: relative;
  padding-bottom: 15px;
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
}

.trending-title::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 80px;
  height: 4px;
  background: linear-gradient(to right, var(--purple-light), var(--purple-lightest));
  border-radius: 2px;
}

.trending-badge {
  background: linear-gradient(to right, var(--purple-main), var(--purple-dark));
  color: var(--white);
  padding: 12px 25px;
  border-radius: 50px;
  font-weight: 600;
  font-size: 15px;
  display: inline-flex;
  align-items: center;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
  position: relative;
  overflow: hidden;
}

.trending-badge::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.3) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(30deg);
  animation: shineEffect 3s infinite;
}

@keyframes shineEffect {
  0% { transform: translateX(-100%) rotate(30deg); }
  100% { transform: translateX(100%) rotate(30deg); }
}

.trending-badge i {
  margin-right: 10px;
  font-size: 16px;
  color: #ffeb3b;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.2);
  }
  100% {
    transform: scale(1);
  }
}

.trending-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 25px;
  margin-top: 30px;
}

/* Particles effects */
.trending-particle {
  position: absolute;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.1);
  box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
  animation: particleFloat 15s infinite linear;
}

.trending-particle:nth-child(1) {
  top: 20%;
  left: 10%;
  width: 15px;
  height: 15px;
  animation-duration: 25s;
  animation-delay: 0s;
}

.trending-particle:nth-child(2) {
  top: 70%;
  left: 30%;
  width: 12px;
  height: 12px;
  animation-duration: 30s;
  animation-delay: 5s;
}

.trending-particle:nth-child(3) {
  top: 40%;
  right: 10%;
  width: 20px;
  height: 20px;
  animation-duration: 40s;
  animation-delay: 3s;
}

.trending-particle:nth-child(4) {
  bottom: 30%;
  right: 20%;
  width: 8px;
  height: 8px;
  animation-duration: 35s;
  animation-delay: 7s;
}

.trending-particle:nth-child(5) {
  bottom: 10%;
  left: 50%;
  width: 18px;
  height: 18px;
  animation-duration: 32s;
  animation-delay: 10s;
}

@keyframes particleFloat {
  0% {
    transform: translateY(0) translateX(0) rotate(0deg);
    opacity: 1;
  }
  33% {
    transform: translateY(-50px) translateX(50px) rotate(120deg);
    opacity: 0.6;
  }
  66% {
    transform: translateY(50px) translateX(-30px) rotate(240deg);
    opacity: 0.9;
  }
  100% {
    transform: translateY(0) translateX(0) rotate(360deg);
    opacity: 1;
  }
}

/* Gradient background */
.trending-bg-gradient {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="0" y="0"></rect><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="50" y="50"></rect></svg>');
  background-size: 30px;
  opacity: 0.15;
}

/* Glow effect at the bottom */
.trending-glow {
  position: absolute;
  bottom: -50px;
  left: 50%;
  transform: translateX(-50%);
  width: 80%;
  height: 100px;
  background: var(--purple-light);
  filter: blur(60px);
  opacity: 0.2;
  border-radius: 100%;
}

/* View all button */
.trending-view-all {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin-top: 40px;
  padding: 15px 35px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--radius-large);
  color: var(--white);
  font-weight: 600;
  font-size: 16px;
  transition: all 0.3s ease;
  backdrop-filter: blur(5px);
}

.trending-view-all:hover {
  background: rgba(255, 255, 255, 0.2);
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

.trending-view-all i {
  margin-left: 10px;
  transition: transform 0.3s ease;
}

.trending-view-all:hover i {
  transform: translateX(5px);
}

/* Responsive styles */
@media only screen and (max-width: 1024px) {
  .trending-section {
    padding: 60px 0;
  }
  
  .trending-title {
    font-size: 32px;
  }
  
  .trending-grid {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
  }
}

@media only screen and (max-width: 768px) {
  .trending-section {
    padding: 50px 0;
    margin: 40px 0;
  }
  
  .trending-title {
    font-size: 28px;
    margin-bottom: 15px;
  }
  
  .trending-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 15px;
    margin-bottom: 30px;
  }
  
  .trending-grid {
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 15px;
  }
}

@media only screen and (max-width: 576px) {
  .trending-section {
    padding: 40px 0;
    margin: 30px 0;
  }
  
  .trending-title {
    font-size: 24px;
  }
  
  .trending-grid {
    grid-template-columns: 1fr;
    gap: 15px;
  }
}
--- END OF FILE netflix-clone/src/components/trending/trending.css ---

--- START OF FILE netflix-clone/src/components/watch/SinglePage.jsx ---
import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  homeData,
  trending,
  latest,
  upcome,
  recommended,
  documentaries,
  animation,
} from "../../dummyData";
import "./style.css";

// Using a single export statement
export const SinglePage = () => {
  const { source, id } = useParams();
  const navigate = useNavigate();
  const [item, setItem] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [relatedContent, setRelatedContent] = useState([]);
  const [isPlaying, setIsPlaying] = useState(true);

  // Scroll to top when component mounts
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  // Helper function to fix image and video paths
  const fixPath = (path) => {
    if (!path) return null;

    // If path already starts with http or / or blob, return as is
    if (
      path.startsWith("http") ||
      path.startsWith("/") ||
      path.startsWith("blob:")
    ) {
      return path;
    }

    // If path starts with ../, strip it to make it relative to the current path
    if (path.startsWith("../")) {
      return path.replace("../", "/");
    }

    // Return path as is if none of the above conditions match
    return path;
  };

  useEffect(() => {
    setLoading(true);
    setIsPlaying(true); // Reset playing state when navigating between films
    let dataSource;

    // Select the appropriate data source based on URL parameters
    switch (source) {
      case "homeData":
        dataSource = homeData;
        break;
      case "trending":
        dataSource = trending;
        break;
      case "latest":
        dataSource = latest;
        break;
      case "upcome":
        dataSource = upcome;
        break;
      case "recommended":
        dataSource = recommended;
        break;
      case "documentaries":
        dataSource = documentaries;
        break;
      case "animation":
        dataSource = animation;
        break;
      default:
        // Search in all sources
        dataSource = [
          ...homeData,
          ...trending,
          ...latest,
          ...upcome,
          ...recommended,
          ...documentaries,
          ...animation,
        ];
    }

    // Find the movie/show by ID
    const numericId = parseInt(id);
    const foundItem = dataSource.find((item) => item.id === numericId);

    if (foundItem) {
      console.log("Found content:", foundItem);
      console.log("Video path before fixing:", foundItem.video);

      // Fix paths for cover and video
      const fixedItem = {
        ...foundItem,
        cover: fixPath(foundItem.cover),
        video: fixPath(foundItem.video),
      };

      console.log("Video path after fixing:", fixedItem.video);
      setItem(fixedItem);

      // Determine related content (by genre or tags)
      let genre = "";
      if (foundItem.genres) {
        genre = foundItem.genres.split(", ")[0];
      }

      const related = [
        ...homeData,
        ...trending,
        ...latest,
        ...upcome,
        ...recommended,
      ]
        .filter(
          (relItem) =>
            relItem.id !== foundItem.id &&
            ((genre && relItem.genres?.includes(genre)) ||
              (foundItem.tags &&
                relItem.tags?.includes(foundItem.tags.split(", ")[0])))
        )
        .slice(0, 4)
        .map((relItem) => ({
          ...relItem,
          cover: fixPath(relItem.cover),
          video: fixPath(relItem.video),
          source: getSourceForItem(relItem),
        }));

      setRelatedContent(related);
      setLoading(false);
    } else {
      console.log("Content not found. Source:", source, "ID:", numericId);
      setError("Content not found");
      setLoading(false);
    }
  }, [source, id]);

  // Function to determine the source of an item
  const getSourceForItem = (item) => {
    // Check each data source to find where the item comes from
    if (homeData.some((i) => i.id === item.id)) return "homeData";
    if (trending.some((i) => i.id === item.id)) return "trending";
    if (latest.some((i) => i.id === item.id)) return "latest";
    if (upcome.some((i) => i.id === item.id)) return "upcome";
    if (recommended.some((i) => i.id === item.id)) return "recommended";
    if (documentaries.some((i) => i.id === item.id)) return "documentaries";
    if (animation.some((i) => i.id === item.id)) return "animation";

    // Default fallback
    return "homeData";
  };

  const togglePlay = () => {
    setIsPlaying(!isPlaying);
  };

  // Go back button function
  const goBack = () => {
    navigate(-1);
  };

  // Reload video when navigating to a new movie
  useEffect(() => {
    if (item && item.video) {
      // When a new item is loaded with a video, reset video player
      const videoElement = document.querySelector(".video-player video");
      if (videoElement) {
        videoElement.load();
        if (isPlaying) {
          videoElement
            .play()
            .catch((e) => console.log("Auto-play prevented:", e));
        }
      }
    }
  }, [item, isPlaying]);

  if (loading) {
    return (
      <div className="loading-container">
        <div className="spinner"></div>
        <p>Loading content...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="error-container">
        <h2>Error</h2>
        <p>{error}</p>
        <button onClick={goBack} className="back-button">
          Go Back
        </button>
      </div>
    );
  }

  return (
    <div className="single-page">
      {item ? (
        <>
          {/* Video Background - Adding fallback background color */}
          <div
            className="video-background"
            style={{
              backgroundImage: item.cover ? `url(${item.cover})` : "none",
              backgroundColor: item.cover ? "transparent" : "#101020",
            }}
          >
            {/* Debug information */}
            {console.log("Cover image URL:", item.cover)}
            {console.log("Video URL:", item.video)}

            <div className="overlay"></div>

            {/* Content Title and Details */}
            <div className="content-header">
              <h1>{item.name}</h1>

              <div className="meta-details">
                {item.rating && (
                  <div className="rating">
                    <span className="stars">★</span> {item.rating}
                  </div>
                )}
                <div className="time-info">
                  <span>{item.time}</span>
                </div>
                {item.date && (
                  <div className="date-info">
                    <span>{item.date}</span>
                  </div>
                )}
              </div>

              {item.genres && (
                <div className="genre-badge">
                  <span>{item.genres}</span>
                </div>
              )}

              <div className="action-buttons">
                {item.video && (
                  <button className="play-button" onClick={togglePlay}>
                    <i
                      className={isPlaying ? "fas fa-pause" : "fas fa-play"}
                    ></i>
                    {isPlaying ? "Pause" : "Play"}
                  </button>
                )}
                <button className="add-button">
                  <i className="fas fa-plus"></i>
                  Add to List
                </button>
              </div>
            </div>
          </div>

          {/* Video Player */}
          {item.video && isPlaying && (
            <div className="video-player">
              <video key={`video-${item.id}`} autoPlay controls>
                <source src={item.video} type="video/mp4" />
                Your browser does not support video playback.
              </video>
            </div>
          )}

          {/* Content Details */}
          <div className="content-details">
            <div className="synopsis">
              <h3>Synopsis</h3>
              <p>{item.desc || "No synopsis available for this content."}</p>
            </div>

            {item.starring && (
              <div className="cast">
                <h3>Cast</h3>
                <p>{item.starring}</p>
              </div>
            )}
          </div>

          {/* Similar Content */}
          {relatedContent.length > 0 && (
            <div className="related-content">
              <h2>Similar Content</h2>
              <div className="related-grid">
                {relatedContent.map((related, index) => (
                  <div
                    className="related-item"
                    key={index}
                    onClick={() =>
                      navigate(`/singlePage/${related.source}/${related.id}`)
                    }
                  >
                    <div className="related-poster">
                      {related.cover ? (
                        <img src={related.cover} alt={related.name} />
                      ) : (
                        <div className="placeholder-image"></div>
                      )}
                      <div className="poster-overlay">
                        <i className="fas fa-play"></i>
                      </div>
                    </div>
                    <h4>{related.name}</h4>
                    <div className="related-meta">
                      {related.rating && <span>{related.rating}</span>}
                      <span>{related.time}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </>
      ) : (
        <div className="not-found">
          <h2>Content Not Found</h2>
          <p>The movie or TV show you are looking for is not available.</p>
          <button onClick={goBack} className="back-button">
            Go Back
          </button>
        </div>
      )}
    </div>
  );
};

--- END OF FILE netflix-clone/src/components/watch/SinglePage.jsx ---

--- START OF FILE netflix-clone/src/components/watch/style.css ---
.single-page {
  background-color: #0c0c14;
  color: #fff;
  min-height: 100vh;
  font-family: 'Poppins', sans-serif;
}

/* Video Background */
.video-background {
  position: relative;
  width: 100%;
  height: 80vh;
  background-size: cover;
  background-position: center;
  display: flex;
  align-items: flex-end;
  padding-bottom: 50px;
}

.overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to bottom, rgba(12, 12, 20, 0.4) 0%, rgba(12, 12, 20, 0.8) 70%, rgba(12, 12, 20, 1) 100%);
  z-index: 1;
}

.content-header {
  position: relative;
  z-index: 2;
  padding: 0 5%;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

.content-header h1 {
  font-size: 4.5rem;
  margin-bottom: 20px;
  font-weight: 700;
  background: linear-gradient(to right, #fff, #a4a4a4);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  text-shadow: 0px 0px 15px rgba(255, 255, 255, 0.2);
}

.meta-details {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 15px;
}

.rating {
  display: flex;
  align-items: center;
  font-size: 1.1rem;
  font-weight: 600;
}

.stars {
  color: #ffd700;
  margin-right: 5px;
}

.time-info, .date-info {
  font-size: 1.1rem;
  color: #dddddd;
  font-weight: 300;
}

.genre-badge {
  margin-bottom: 25px;
}

.genre-badge span {
  background-color: rgba(255, 255, 255, 0.1);
  padding: 5px 15px;
  border-radius: 50px;
  font-size: 0.9rem;
  margin-right: 10px;
  display: inline-block;
}

.action-buttons {
  display: flex;
  gap: 15px;
  margin-top: 20px;
}

.play-button, .add-button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  padding: 12px 20px;
  border-radius: 5px;
  border: none;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.play-button {
  background-color: rgba(202, 56, 146, 0.9);
  color: white;
}

.play-button:hover {
  background-color: #ca3892;
  transform: translateY(-2px);
}

.add-button {
  background-color: rgba(255, 255, 255, 0.1);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.3);
}

.add-button:hover {
  background-color: rgba(255, 255, 255, 0.2);
  transform: translateY(-2px);
}

/* Video Player */
.video-player {
  width: 100%;
  max-width: 1200px;
  margin: -80px auto 30px;
  position: relative;
  z-index: 3;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
}

.video-player video {
  width: 100%;
  display: block;
  background-color: #000;
}

/* Content Details */
.content-details {
  max-width: 1200px;
  margin: 40px auto;
  padding: 0 5%;
}

.synopsis h3, .cast h3 {
  font-size: 1.5rem;
  margin-bottom: 15px;
  color: #e5e5e5;
  font-weight: 600;
}

.synopsis p, .cast p {
  line-height: 1.7;
  font-size: 1.05rem;
  color: #b0b0b0;
  margin-bottom: 30px;
}

/* Related Content */
.related-content {
  max-width: 1200px;
  margin: 50px auto 30px;
  padding: 0 5%;
}

.related-content h2 {
  font-size: 1.8rem;
  margin-bottom: 20px;
  color: #e5e5e5;
  font-weight: 600;
}

.related-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.related-item {
  transition: transform 0.3s ease;
  cursor: pointer;
}

.related-item:hover {
  transform: scale(1.05);
}

.related-poster {
  position: relative;
  border-radius: 8px;
  overflow: hidden;
  margin-bottom: 10px;
  height: 0;
  padding-top: 150%; /* 2:3 aspect ratio */
}

.related-poster img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Placeholder for missing images */
.placeholder-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #1e1e2e;
  display: flex;
  justify-content: center;
  align-items: center;
}

.placeholder-image::after {
  content: "No Image";
  color: rgba(255, 255, 255, 0.5);
  font-size: 1rem;
}

.poster-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.related-poster:hover .poster-overlay {
  opacity: 1;
}

.poster-overlay i {
  font-size: 40px;
  color: white;
  background-color: rgba(202, 56, 146, 0.8);
  width: 70px;
  height: 70px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.related-item h4 {
  font-size: 1rem;
  margin-bottom: 5px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.related-meta {
  display: flex;
  justify-content: space-between;
  color: #999;
  font-size: 0.85rem;
}

/* Loading & Error States */
.loading-container, .error-container, .not-found {
  height: 70vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  padding: 20px;
}

.spinner {
  width: 50px;
  height: 50px;
  border: 4px solid rgba(255, 255, 255, 0.1);
  border-radius: 50%;
  border-top-color: #ca3892;
  animation: spin 1s linear infinite;
  margin-bottom: 20px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.back-button {
  margin-top: 20px;
  padding: 10px 25px;
  background-color: #ca3892;
  color: white;
  border: none;
  border-radius: 5px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.back-button:hover {
  background-color: #b0307c;
  transform: translateY(-2px);
}

/* Responsive Design */
@media (max-width: 992px) {
  .content-header h1 {
    font-size: 3.5rem;
  }
  
  .video-player {
    margin-top: -60px;
  }
}

@media (max-width: 768px) {
  .video-background {
    height: 60vh;
  }
  
  .content-header h1 {
    font-size: 2.5rem;
  }
  
  .video-player {
    margin-top: -40px;
  }
  
  .action-buttons {
    flex-wrap: wrap;
  }
  
  .play-button, .add-button {
    width: 100%;
  }
  
  .related-grid {
    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  }
}

@media (max-width: 480px) {
  .video-background {
    height: 50vh;
    padding-bottom: 30px;
  }
  
  .content-header h1 {
    font-size: 2rem;
  }
  
  .meta-details {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .video-player {
    margin-top: -30px;
  }
}
--- END OF FILE netflix-clone/src/components/watch/style.css ---

--- START OF FILE netflix-clone/src/dummyData.js ---
export const homeData = [
  {
    id: 1,
    name: "Casino Royale",
    rating: 8.4,
    time: "2hr : 24mins",
    desc: "Casino Royale is a 2006 spy film, the twenty-first in the Eon Productions James Bond series, and the third screen adaptation of Ian Fleming's 1953 novel of the same name. Directed by Martin Campbell from a screenplay by Neil Purvis, Robert Wade, and Paul Haggis, it stars Daniel Craig in his first appearance as Bond, alongside Eva Green, Mads Mikkelsen, Judi Dench, and Jeffrey Wright. In the film, Bond is on a mission to bankrupt terrorism financier Le Chiffre (Mikkelsen) in a high-stakes poker game at the Casino Royale in Montenegro.",
    starring: "Daniel Craig, Eva Green, Mads Mikkelsen",
    genres: "Action",
    tags: "Action, Adventures",
    cover: "../images/home1.jpg",
    video: "../video/video1.mp4",
    date: "16-Nov-2006",
  },
  {
    id: 2,
    name: "The Godfather",
    rating: 9.2,
    time: "2hr : 55mins",
    desc: "The Godfather is a 1972 American crime film directed by Francis Ford Coppola, based on Mario Puzo's 1969 novel of the same name. The film stars Marlon Brando, Al Pacino, James Caan, and Robert Duvall. It follows the powerful Italian-American crime family of Don Vito Corleone as he transfers control of his empire to his reluctant son, Michael Corleone.",
    starring: "Marlon Brando, Al Pacino, James Caan",
    genres: "Crime, Drama",
    tags: "Crime, Drama, Mafia",
    cover: "../images/home2.jpg",
    video: "../video/godfather.mp4",
    date: "24-Mar-1972",
  },
  {
    id: 3,
    name: "John Wick",
    rating: 7.4,
    time: "1hr : 41mins",
    desc: "John Wick is a 2014 American neo-noir action thriller film directed by Chad Stahelski and written by Derek Kolstad. It stars Keanu Reeves as the titular character, a retired hitman seeking vengeance for the killing of his dog, a final gift from his late wife. The film also features Michael Nyqvist, Alfie Allen, Willem Dafoe, and Ian McShane.",
    starring: "Keanu Reeves, Michael Nyqvist, Willem Dafoe",
    genres: "Action, Thriller",
    tags: "Action, Crime, Thriller",
    cover: "../images/home3.jpg",
    video: "../video/johnwick.mp4",
    date: "24-Oct-2014",
  },
  {
    id: 4,
    name: "No Time to Die",
    rating: 7.3,
    time: "2hr : 43mins",
    desc: "No Time to Die is a 2021 spy film and the twenty-fifth installment in the James Bond series produced by Eon Productions. Directed by Cary Joji Fukunaga, the film stars Daniel Craig in his final portrayal of the MI6 agent James Bond. In the film, Bond, who has left active service, is recruited by the CIA to rescue a kidnapped scientist, which leads to the discovery of a deadly new bioweapon.",
    starring: "Daniel Craig, Rami Malek, Léa Seydoux",
    genres: "Action, Adventure, Thriller",
    tags: "Action, Adventure, Spy",
    cover: "../images/home4.jpg",
    video: "../video/notimetodie.mp4",
    date: "30-Sep-2021",
  },
];
export const upcome = [
  {
    id: 1,
    cover: "../images/upcome/u13.jpg",
    name: "Daredevil: Born Again",
    time: "2hr : 45mins",
    video: "../video/daredevil.mp4",
  },
  {
    id: 2,
    cover: "../images/upcome/u14.jpg",
    name: "Esref Ruya",
    time: "2hr : 20mins",
    video: "../video/esrefruya.mp4",
  },
  {
    id: 3,
    cover: "../images/upcome/u15.jpg",
    name: "Kurtlar Vadisi",
    time: "2hr : 30mins",
    video: "../video/kurtlarvadisi.mp4",
  },
  {
    id: 4,
    cover: "../images/upcome/u16.png",
    name: "Breaking Bad",
    time: "2hr : 50mins",
    video: "../video/breakingbad.mp4",
  },
  {
    id: 5,
    cover: "../images/upcome/u17.webp",
    name: "Reacher",
    time: "2hr : 15mins",
    video: "../video/reacher.mp4",
  },
];

export const latest = [
  {
    id: 1,
    cover: "../images/upcome/u8.avif",
    name: "The Mandalorian",
    time: "2hr : 25mins",
    video: "../video/themandolorian.mp4",
  },
  {
    id: 2,
    cover: "../images/upcome/u9.jpg",
    name: "Transporter",
    time: "1hr : 45mins",
    video: "../video/thetransporter.mp4",
  },
  {
    id: 3,
    cover: "../images/upcome/u10.jpg",
    name: "Fast and Furious 3",
    time: "2hr : 10mins",
    video: "../video/fast3.mp4",
  },
  {
    id: 4,
    cover: "../images/upcome/u11.jpg",
    name: "The Batman",
    time: "2hr : 55mins",
    video: "../video/thebatman.mp4",
  },
  {
    id: 5,
    cover: "../images/upcome/u12.jpg",
    name: "Rush Hour",
    time: "1hr : 50mins",
    video: "../video/rushhour.mp4",
  },
];

export const trending = [
  {
    id: 1,
    name: "Central Intelligence",
    rating: 4.7,
    time: "1hr : 47mins",
    desc: "A lethal CIA agent and his former schoolmate encounter shootouts, espionage and double-crosses while on a top-secret case.",
    starring: "Dwayne Johnson, Kevin Hart",
    genres: "Action, Comedy",
    tags: "Action, Comedy, Spy",
    cover: "../images/img/slide1.jpg",
    date: "17-Jun-2016",
    video: "../video/centralintelligence.mp4",
  },
  {
    id: 2,
    name: "Scent of a Woman",
    rating: 4.9,
    time: "2hr : 37mins",
    desc: "A prep school student needing money agrees to 'babysit' a blind man, but the job is not at all what he anticipated.",
    starring: "Al Pacino, Chris O'Donnell",
    genres: "Drama",
    tags: "Drama, Classic",
    cover: "../images/img/slide2.jpg",
    date: "23-Dec-1992",
    video: "../video/scentofawoman.mp4",
  },
  {
    id: 3,
    name: "The Shawshank Redemption",
    rating: 5.0,
    time: "2hr : 22mins",
    desc: "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
    starring: "Tim Robbins, Morgan Freeman",
    genres: "Drama",
    tags: "Drama, Prison, Classic",
    cover: "../images/img/slide3.jpg",
    date: "14-Oct-1994",
    video: "../video/shawshank.mp4",
  },
];

export const recommended = [
  {
    id: 1,
    cover: "../images/rec/rec1.webp",
    name: "The Matrix",
    time: "2hr : 16mins",
    video: "../video/matrix.mp4",
  },
  {
    id: 2,
    cover: "../images/rec/rec2.jpg",
    name: "Man of Steel",
    time: "2hr : 23mins",
    video: "../video/superman.mp4",
  },
  {
    id: 3,
    cover: "../images/rec/rec3.jpg",
    name: "Forrest Gump",
    time: "2hr : 22mins",
    video: "../video/forrestgump.mp4",
  },
  {
    id: 4,
    cover: "../images/rec/rec4.jpg",
    name: "Life is Beautiful",
    time: "1hr : 56mins",
    video: "../video/shawshank.mp4",
  },
  {
    id: 5,
    cover: "../images/upcome/u3.jpg",
    name: "The Tourist",
    time: "1hr : 43mins",
    video: "../video/tourist.mp4",
  },
];

export const documentaries = [
  {
    id: 1,
    cover: "../images/docs/doc1.jpg",
    name: "Grizzly Man",
    time: "1hr : 43mins",
    video: "../video/grizzlyman.mp4",
  },
  {
    id: 2,
    cover: "../images/docs/doc2.jpg",
    name: "When We Were Kings",
    time: "1hr : 29mins",
    video: "../video/whenwewerekings.mp4",
  },
];

export const animation = [
  {
    id: 1,
    cover: "../images/anim/anim1.jpg",
    name: "Tom & Jerry",
    time: "1hr : 41mins",
    video: "../video/tomjerry.mp4",
  },
  {
    id: 2,
    cover: "../images/anim/anim2.jpg",
    name: "Chip & Dale",
    time: "1hr : 37mins",
    video: "../video/chipdale.mp4",
  },
  {
    id: 3,
    cover: "../images/anim/anim3.webp",
    name: "Spirit: Stallion of the Cimaron",
    time: "1hr : 23mins",
    video: "../video/spirit.mp4",
  },
  {
    id: 4,
    cover: "../images/anim/anim4.jpg",
    name: "Brother Bear",
    time: "1hr : 25mins",
    video: "../video/bearbrother.mp4",
  },
];

--- END OF FILE netflix-clone/src/dummyData.js ---

--- START OF FILE netflix-clone/src/home/HomePage.css ---
.main-wrapper {
  background-color: #1a0733;
  min-height: 100vh;
  position: relative;
  overflow: hidden;
  padding-bottom: 60px;
}

.content-section {
  position: relative;
  z-index: 1;
  margin: 20px 0;
}

/* Advanced Loading Screen */
.page-loader {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(135deg, #1a0733 0%, #2d0854 100%);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.loader-content {
  text-align: center;
  max-width: 500px;
  padding: 0 20px;
}

.spinner {
  width: 80px;
  height: 80px;
  border: 6px solid rgba(156, 39, 176, 0.2);
  border-radius: 50%;
  border-top-color: var(--purple-light);
  animation: spin 1s ease-in-out infinite;
  margin: 0 auto 30px;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.loader-content h2 {
  color: var(--white);
  font-size: 38px;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  letter-spacing: 2px;
  background: linear-gradient(to right, #e1bee7, #ffffff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: colorShift 2s infinite alternate;
}

@keyframes colorShift {
  0% { filter: hue-rotate(0deg); }
  100% { filter: hue-rotate(30deg); }
}

.loader-content p {
  color: var(--purple-lightest);
  font-size: 16px;
  margin-bottom: 30px;
  opacity: 0.8;
}

.progress-container {
  width: 100%;
  height: 8px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 10px;
  margin-bottom: 10px;
  overflow: hidden;
  position: relative;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2) inset;
}

.progress-bar {
  height: 100%;
  background: linear-gradient(to right, var(--purple-main), var(--purple-light));
  border-radius: 10px;
  transition: width 0.3s ease;
  position: relative;
  overflow: hidden;
  box-shadow: 0 0 10px var(--purple-light);
}

.progress-bar::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.4) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: translateX(-100%);
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  100% {
    transform: translateX(100%);
  }
}

.progress-text {
  color: var(--white);
  font-size: 14px;
  font-weight: 600;
  margin-top: 5px;
}

/* Background decorations */
.main-wrapper::before {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="0" y="0"></rect><rect fill="rgba(255,255,255,0.03)" width="50" height="50" x="50" y="50"></rect></svg>');
  background-size: 30px;
  opacity: 0.05;
  z-index: 0;
}

/* Animated background elements */
.main-wrapper::after {
  content: "";
  position: fixed;
  top: 50%;
  left: 50%;
  width: 60%;
  height: 60%;
  background: radial-gradient(circle, var(--purple-main) 0%, rgba(26, 7, 51, 0) 70%);
  opacity: 0.1;
  filter: blur(80px);
  z-index: 0;
  animation: pulse-bg 15s infinite alternate;
}

@keyframes pulse-bg {
  0% {
    transform: translate(-50%, -50%) scale(1);
    opacity: 0.08;
  }
  50% {
    transform: translate(-55%, -45%) scale(1.1);
    opacity: 0.12;
  }
  100% {
    transform: translate(-45%, -55%) scale(0.9);
    opacity: 0.08;
  }
}

/* Scene transitions */
.hero-section {
  position: relative;
  z-index: 2;
  animation: fadeIn 1s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* ScrollToTop button */
.scroll-to-top {
  position: fixed;
  bottom: 30px;
  right: 30px;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: linear-gradient(to right, var(--purple-main), var(--purple-dark));
  color: var(--white);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 100;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.3s ease;
}

.scroll-to-top.visible {
  opacity: 1;
  transform: translateY(0);
}

.scroll-to-top:hover {
  background: linear-gradient(to right, var(--purple-dark), var(--purple-main));
  transform: translateY(-5px);
}

/* Section animations */
.content-section {
  opacity: 0;
  transform: translateY(30px);
  transition: all 0.6s ease;
}

.content-section.animate-visible {
  opacity: 1;
  transform: translateY(0);
}

/* Spacing between sections */
.content-section:not(:first-child) {
  margin-top: 50px;
}

/* Floating orbs decoration */
.floating-orb {
  position: absolute;
  border-radius: 50%;
  background: radial-gradient(circle, var(--purple-light) 0%, rgba(26, 7, 51, 0) 70%);
  filter: blur(30px);
  opacity: 0.1;
  z-index: 0;
}

.orb-1 {
  top: 15%;
  left: 5%;
  width: 200px;
  height: 200px;
  animation: float-animation 20s infinite ease-in-out;
}

.orb-2 {
  top: 60%;
  right: 10%;
  width: 300px;
  height: 300px;
  animation: float-animation 25s infinite ease-in-out reverse;
}

.orb-3 {
  bottom: 10%;
  left: 20%;
  width: 150px;
  height: 150px;
  animation: float-animation 15s infinite ease-in-out;
  animation-delay: 5s;
}

@keyframes float-animation {
  0%, 100% {
    transform: translate(0, 0);
  }
  25% {
    transform: translate(30px, -30px);
  }
  50% {
    transform: translate(-20px, 40px);
  }
  75% {
    transform: translate(-40px, -20px);
  }
}

/* Gap between content sections */
.gap-section {
  height: 30px;
}

/* Container styles for consistent width */
.homepage-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Loading animation fade out */
.page-loader.fade-out {
  opacity: 0;
  transition: opacity 0.5s ease;
  pointer-events: none;
}

/* Responsive styles */
@media only screen and (max-width: 1200px) {
  .content-section:not(:first-child) {
    margin-top: 40px;
  }
}

@media only screen and (max-width: 992px) {
  .orb-1, .orb-2, .orb-3 {
    opacity: 0.08;
  }
}

@media only screen and (max-width: 768px) {
  .content-section {
    margin: 15px 0;
  }
  
  .content-section:not(:first-child) {
    margin-top: 30px;
  }
  
  .loader-content h2 {
    font-size: 30px;
  }
  
  .spinner {
    width: 60px;
    height: 60px;
    margin-bottom: 20px;
  }
  
  .scroll-to-top {
    width: 40px;
    height: 40px;
    bottom: 20px;
    right: 20px;
  }
}

@media only screen and (max-width: 576px) {
  .content-section {
    margin: 10px 0;
  }
  
  .content-section:not(:first-child) {
    margin-top: 25px;
  }
  
  .loader-content h2 {
    font-size: 26px;
  }
  
  .spinner {
    width: 50px;
    height: 50px;
  }
  
  .scroll-to-top {
    width: 35px;
    height: 35px;
    bottom: 15px;
    right: 15px;
  }
  
  .gap-section {
    height: 20px;
  }
}
--- END OF FILE netflix-clone/src/home/HomePage.css ---

--- START OF FILE netflix-clone/src/home/HomePages.jsx ---
import React, { useState, useEffect, useRef } from "react";
import { Homes } from "../components/homes/Homes";
import { Upcomming } from "../components/Upcomming/Upcomming";
import { Trending } from "../components/trending/Trending";
import { latest, recommended, upcome } from "../dummyData";
import "./HomePage.css";

export const HomePages = () => {
  // Veri kaynaklarına source bilgisini ekle (sadece bu satırları ekledim)
  const upcomingItemsWithSource = upcome.map((item) => ({
    ...item,
    source: "upcome",
  }));

  const latestItemsWithSource = latest.map((item) => ({
    ...item,
    source: "latest",
  }));

  const recommendedItemsWithSource = recommended.map((item) => ({
    ...item,
    source: "recommended",
  }));

  // Orijinal state'leri kullan ama source bilgisiyle birlikte
  const [upcomingItems, setUpcomingItems] = useState(upcomingItemsWithSource);
  const [latestItems, setLatestItems] = useState(latestItemsWithSource);
  const [recommendedItems, setRecommendedItems] = useState(
    recommendedItemsWithSource
  );
  const [isLoading, setIsLoading] = useState(true);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [showScrollTop, setShowScrollTop] = useState(false);

  const sectionRefs = useRef([]);

  // Page loading animation with progress
  useEffect(() => {
    let interval;
    let progress = 0;

    interval = setInterval(() => {
      progress += Math.floor(Math.random() * 10) + 5;
      if (progress > 100) {
        progress = 100;
        clearInterval(interval);

        // Add a small delay before hiding loader for smoother transition
        setTimeout(() => {
          const loader = document.querySelector(".page-loader");
          if (loader) loader.classList.add("fade-out");

          setTimeout(() => {
            setIsLoading(false);
          }, 500);
        }, 300);
      }
      setLoadingProgress(progress);
    }, 200);

    return () => clearInterval(interval);
  }, []);

  // Scroll to top button visibility
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 300) {
        setShowScrollTop(true);
      } else {
        setShowScrollTop(false);
      }

      // Also check for section visibility
      sectionRefs.current.forEach((section) => {
        if (section) {
          const rect = section.getBoundingClientRect();
          if (rect.top < window.innerHeight * 0.8) {
            section.classList.add("animate-visible");
          }
        }
      });
    };

    window.addEventListener("scroll", handleScroll);

    // Initial check
    setTimeout(handleScroll, 100);

    return () => window.removeEventListener("scroll", handleScroll);
  }, [isLoading]);

  // Scroll to top function
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  if (isLoading) {
    return (
      <div className="page-loader">
        <div className="loader-content">
          <div className="spinner"></div>
          <h2>Hocam, hoşgeldiniz. ツ</h2>
          <p>Loading amazing content for you...</p>
          <div className="progress-container">
            <div
              className="progress-bar"
              style={{ width: `${loadingProgress}%` }}
            ></div>
          </div>
          <div className="progress-text">{loadingProgress}%</div>
        </div>
      </div>
    );
  }

  return (
    <div className="main-wrapper">
      {/* Floating orbs for decoration */}
      <div className="floating-orb orb-1"></div>
      <div className="floating-orb orb-2"></div>
      <div className="floating-orb orb-3"></div>

      {/* Hero Section */}
      <section className="hero-section">
        <Homes />
      </section>

      {/* Upcoming Movies Section */}
      <section
        className="content-section"
        ref={(el) => (sectionRefs.current[0] = el)}
      >
        <Upcomming items={upcomingItems} title="Coming Soon" />
      </section>

      {/* Latest Releases Section */}
      <section
        className="content-section"
        ref={(el) => (sectionRefs.current[1] = el)}
      >
        <Upcomming items={latestItems} title="New Releases" />
      </section>

      {/* Trending Section */}
      <section
        className="content-section"
        ref={(el) => (sectionRefs.current[2] = el)}
      >
        <Trending />
      </section>

      {/* Recommended Section */}
      <section
        className="content-section"
        ref={(el) => (sectionRefs.current[3] = el)}
      >
        <Upcomming items={recommendedItems} title="Just for You" />
      </section>

      {/* Scroll to top button */}
      <div
        className={`scroll-to-top ${showScrollTop ? "visible" : ""}`}
        onClick={scrollToTop}
      >
        <i className="fa fa-chevron-up"></i>
      </div>
    </div>
  );
};

--- END OF FILE netflix-clone/src/home/HomePages.jsx ---

--- START OF FILE netflix-clone/src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

--- END OF FILE netflix-clone/src/index.css ---

--- START OF FILE netflix-clone/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

--- END OF FILE netflix-clone/src/index.js ---

--- START OF FILE netflix-clone/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

--- END OF FILE netflix-clone/src/reportWebVitals.js ---

--- START OF FILE netflix-clone/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

--- END OF FILE netflix-clone/src/setupTests.js ---

--- START OF FILE netflix-clone/vercel.json ---
{
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "build",
        "skipVerification": true
      }
    }
  ]
}

--- END OF FILE netflix-clone/vercel.json ---

--- START OF FILE package.json ---
{
  "dependencies": {
    "react-router-dom": "^5.3.4",
    "react-slick": "^0.30.3",
    "slick-carousel": "^1.8.1"
  }
}

--- END OF FILE package.json ---

